
navi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c804  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  0800c918  0800c918  0001c918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d178  0800d178  000203a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d178  0800d178  000203a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d178  0800d178  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d178  0800d178  0001d178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d17c  0800d17c  0001d17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0800d180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200003a8  0800d528  000203a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800d528  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001977e  00000000  00000000  000203d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3d  00000000  00000000  00039b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b140  00000000  00000000  0003fd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175e0  00000000  00000000  0005aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009089b  00000000  00000000  00072480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102d1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b60  00000000  00000000  00102d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003a8 	.word	0x200003a8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c8fc 	.word	0x0800c8fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003ac 	.word	0x200003ac
 800014c:	0800c8fc 	.word	0x0800c8fc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__gesf2>:
 8000d98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d9c:	e006      	b.n	8000dac <__cmpsf2+0x4>
 8000d9e:	bf00      	nop

08000da0 <__lesf2>:
 8000da0:	f04f 0c01 	mov.w	ip, #1
 8000da4:	e002      	b.n	8000dac <__cmpsf2+0x4>
 8000da6:	bf00      	nop

08000da8 <__cmpsf2>:
 8000da8:	f04f 0c01 	mov.w	ip, #1
 8000dac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000db0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000db4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dbc:	bf18      	it	ne
 8000dbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc2:	d011      	beq.n	8000de8 <__cmpsf2+0x40>
 8000dc4:	b001      	add	sp, #4
 8000dc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dca:	bf18      	it	ne
 8000dcc:	ea90 0f01 	teqne	r0, r1
 8000dd0:	bf58      	it	pl
 8000dd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dd6:	bf88      	it	hi
 8000dd8:	17c8      	asrhi	r0, r1, #31
 8000dda:	bf38      	it	cc
 8000ddc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000de0:	bf18      	it	ne
 8000de2:	f040 0001 	orrne.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	d102      	bne.n	8000df4 <__cmpsf2+0x4c>
 8000dee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000df2:	d105      	bne.n	8000e00 <__cmpsf2+0x58>
 8000df4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df8:	d1e4      	bne.n	8000dc4 <__cmpsf2+0x1c>
 8000dfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dfe:	d0e1      	beq.n	8000dc4 <__cmpsf2+0x1c>
 8000e00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <__aeabi_cfrcmple>:
 8000e08:	4684      	mov	ip, r0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	4661      	mov	r1, ip
 8000e0e:	e7ff      	b.n	8000e10 <__aeabi_cfcmpeq>

08000e10 <__aeabi_cfcmpeq>:
 8000e10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e12:	f7ff ffc9 	bl	8000da8 <__cmpsf2>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	bf48      	it	mi
 8000e1a:	f110 0f00 	cmnmi.w	r0, #0
 8000e1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e20 <__aeabi_fcmpeq>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff fff4 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e28:	bf0c      	ite	eq
 8000e2a:	2001      	moveq	r0, #1
 8000e2c:	2000      	movne	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmplt>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffea 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e3c:	bf34      	ite	cc
 8000e3e:	2001      	movcc	r0, #1
 8000e40:	2000      	movcs	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmple>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffe0 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpge>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffd2 	bl	8000e08 <__aeabi_cfrcmple>
 8000e64:	bf94      	ite	ls
 8000e66:	2001      	movls	r0, #1
 8000e68:	2000      	movhi	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_fcmpgt>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff ffc8 	bl	8000e08 <__aeabi_cfrcmple>
 8000e78:	bf34      	ite	cc
 8000e7a:	2001      	movcc	r0, #1
 8000e7c:	2000      	movcs	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_f2iz>:
 8000e84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e8c:	d30f      	bcc.n	8000eae <__aeabi_f2iz+0x2a>
 8000e8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e96:	d90d      	bls.n	8000eb4 <__aeabi_f2iz+0x30>
 8000e98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ea0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ea4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea8:	bf18      	it	ne
 8000eaa:	4240      	negne	r0, r0
 8000eac:	4770      	bx	lr
 8000eae:	f04f 0000 	mov.w	r0, #0
 8000eb2:	4770      	bx	lr
 8000eb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_f2iz+0x3a>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d105      	bne.n	8000eca <__aeabi_f2iz+0x46>
 8000ebe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ec8:	4770      	bx	lr
 8000eca:	f04f 0000 	mov.w	r0, #0
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_f2uiz>:
 8000ed0:	0042      	lsls	r2, r0, #1
 8000ed2:	d20e      	bcs.n	8000ef2 <__aeabi_f2uiz+0x22>
 8000ed4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ed8:	d30b      	bcc.n	8000ef2 <__aeabi_f2uiz+0x22>
 8000eda:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ede:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ee2:	d409      	bmi.n	8000ef8 <__aeabi_f2uiz+0x28>
 8000ee4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eec:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef0:	4770      	bx	lr
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	4770      	bx	lr
 8000ef8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000efc:	d101      	bne.n	8000f02 <__aeabi_f2uiz+0x32>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d102      	bne.n	8000f08 <__aeabi_f2uiz+0x38>
 8000f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <__aeabi_d2lz>:
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	460c      	mov	r4, r1
 8000f14:	4605      	mov	r5, r0
 8000f16:	4621      	mov	r1, r4
 8000f18:	4628      	mov	r0, r5
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f7ff fd57 	bl	80009d0 <__aeabi_dcmplt>
 8000f22:	b928      	cbnz	r0, 8000f30 <__aeabi_d2lz+0x20>
 8000f24:	4628      	mov	r0, r5
 8000f26:	4621      	mov	r1, r4
 8000f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f2c:	f000 b80a 	b.w	8000f44 <__aeabi_d2ulz>
 8000f30:	4628      	mov	r0, r5
 8000f32:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f36:	f000 f805 	bl	8000f44 <__aeabi_d2ulz>
 8000f3a:	4240      	negs	r0, r0
 8000f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f40:	bd38      	pop	{r3, r4, r5, pc}
 8000f42:	bf00      	nop

08000f44 <__aeabi_d2ulz>:
 8000f44:	b5d0      	push	{r4, r6, r7, lr}
 8000f46:	2200      	movs	r2, #0
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <__aeabi_d2ulz+0x34>)
 8000f4a:	4606      	mov	r6, r0
 8000f4c:	460f      	mov	r7, r1
 8000f4e:	f7ff facd 	bl	80004ec <__aeabi_dmul>
 8000f52:	f7ff fda3 	bl	8000a9c <__aeabi_d2uiz>
 8000f56:	4604      	mov	r4, r0
 8000f58:	f7ff fa4e 	bl	80003f8 <__aeabi_ui2d>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <__aeabi_d2ulz+0x38>)
 8000f60:	f7ff fac4 	bl	80004ec <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4630      	mov	r0, r6
 8000f6a:	4639      	mov	r1, r7
 8000f6c:	f7ff f906 	bl	800017c <__aeabi_dsub>
 8000f70:	f7ff fd94 	bl	8000a9c <__aeabi_d2uiz>
 8000f74:	4621      	mov	r1, r4
 8000f76:	bdd0      	pop	{r4, r6, r7, pc}
 8000f78:	3df00000 	.word	0x3df00000
 8000f7c:	41f00000 	.word	0x41f00000

08000f80 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT11_sensor.h"

uint32_t DWT_Delay_Init(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <DWT_Delay_Init+0x58>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <DWT_Delay_Init+0x58>)
 8000f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f8e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <DWT_Delay_Init+0x58>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <DWT_Delay_Init+0x58>)
 8000f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <DWT_Delay_Init+0x5c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <DWT_Delay_Init+0x5c>)
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <DWT_Delay_Init+0x5c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <DWT_Delay_Init+0x5c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <DWT_Delay_Init+0x5c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000fba:	bf00      	nop
     __ASM volatile ("NOP");
 8000fbc:	bf00      	nop
  __ASM volatile ("NOP");
 8000fbe:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <DWT_Delay_Init+0x5c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e000      	b.n	8000fce <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000fcc:	2301      	movs	r3, #1
  }
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000edf0 	.word	0xe000edf0
 8000fdc:	e0001000 	.word	0xe0001000

08000fe0 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <delay+0x40>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000fee:	f005 fae5 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <delay+0x44>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9b      	lsrs	r3, r3, #18
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001004:	bf00      	nop
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <delay+0x40>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad2      	subs	r2, r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3f8      	bcc.n	8001006 <delay+0x26>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e0001000 	.word	0xe0001000
 8001024:	431bde83 	.word	0x431bde83

08001028 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2302      	movs	r3, #2
 800104c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f003 fcf9 	bl	8004a4c <HAL_GPIO_Init>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f003 fcdc 	bl	8004a4c <HAL_GPIO_Init>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <DHT_Start>:


void DHT_Start (void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80010a0:	f7ff ff6e 	bl	8000f80 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80010a4:	2102      	movs	r1, #2
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <DHT_Start+0x40>)
 80010a8:	f7ff ffbe 	bl	8001028 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80010ac:	2200      	movs	r2, #0
 80010ae:	2102      	movs	r1, #2
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <DHT_Start+0x40>)
 80010b2:	f003 fe66 	bl	8004d82 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 80010b6:	f244 6050 	movw	r0, #18000	; 0x4650
 80010ba:	f7ff ff91 	bl	8000fe0 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80010be:	2201      	movs	r2, #1
 80010c0:	2102      	movs	r1, #2
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <DHT_Start+0x40>)
 80010c4:	f003 fe5d 	bl	8004d82 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80010c8:	2014      	movs	r0, #20
 80010ca:	f7ff ff89 	bl	8000fe0 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80010ce:	2102      	movs	r1, #2
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <DHT_Start+0x40>)
 80010d2:	f7ff ffc6 	bl	8001062 <Set_Pin_Input>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40010800 	.word	0x40010800

080010e0 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80010ea:	2028      	movs	r0, #40	; 0x28
 80010ec:	f7ff ff78 	bl	8000fe0 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80010f0:	2102      	movs	r1, #2
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <DHT_Check_Response+0x58>)
 80010f4:	f003 fe2e 	bl	8004d54 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10e      	bne.n	800111c <DHT_Check_Response+0x3c>
	{
		delay (80);
 80010fe:	2050      	movs	r0, #80	; 0x50
 8001100:	f7ff ff6e 	bl	8000fe0 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001104:	2102      	movs	r1, #2
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <DHT_Check_Response+0x58>)
 8001108:	f003 fe24 	bl	8004d54 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <DHT_Check_Response+0x38>
 8001112:	2301      	movs	r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e001      	b.n	800111c <DHT_Check_Response+0x3c>
		else Response = -1;
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800111c:	bf00      	nop
 800111e:	2102      	movs	r1, #2
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <DHT_Check_Response+0x58>)
 8001122:	f003 fe17 	bl	8004d54 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f8      	bne.n	800111e <DHT_Check_Response+0x3e>

	return Response;
 800112c:	79fb      	ldrb	r3, [r7, #7]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40010800 	.word	0x40010800

0800113c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001142:	2300      	movs	r3, #0
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	e037      	b.n	80011b8 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001148:	bf00      	nop
 800114a:	2102      	movs	r1, #2
 800114c:	481e      	ldr	r0, [pc, #120]	; (80011c8 <DHT_Read+0x8c>)
 800114e:	f003 fe01 	bl	8004d54 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f8      	beq.n	800114a <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001158:	2028      	movs	r0, #40	; 0x28
 800115a:	f7ff ff41 	bl	8000fe0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800115e:	2102      	movs	r1, #2
 8001160:	4819      	ldr	r0, [pc, #100]	; (80011c8 <DHT_Read+0x8c>)
 8001162:	f003 fdf7 	bl	8004d54 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10e      	bne.n	800118a <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2201      	movs	r2, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	b25b      	sxtb	r3, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	b25a      	sxtb	r2, r3
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4013      	ands	r3, r2
 8001184:	b25b      	sxtb	r3, r3
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	e00b      	b.n	80011a2 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	f1c3 0307 	rsb	r3, r3, #7
 8001190:	2201      	movs	r2, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	b25a      	sxtb	r2, r3
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4313      	orrs	r3, r2
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80011a2:	bf00      	nop
 80011a4:	2102      	movs	r1, #2
 80011a6:	4808      	ldr	r0, [pc, #32]	; (80011c8 <DHT_Read+0x8c>)
 80011a8:	f003 fdd4 	bl	8004d54 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f8      	bne.n	80011a4 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	3301      	adds	r3, #1
 80011b6:	71bb      	strb	r3, [r7, #6]
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	2b07      	cmp	r3, #7
 80011bc:	d9c4      	bls.n	8001148 <DHT_Read+0xc>
	}
	return i;
 80011be:	79fb      	ldrb	r3, [r7, #7]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010800 	.word	0x40010800

080011cc <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80011d4:	f7ff ff62 	bl	800109c <DHT_Start>
	Presence = DHT_Check_Response ();
 80011d8:	f7ff ff82 	bl	80010e0 <DHT_Check_Response>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <DHT_GetData+0xa0>)
 80011e2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80011e4:	f7ff ffaa 	bl	800113c <DHT_Read>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <DHT_GetData+0xa4>)
 80011ee:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80011f0:	f7ff ffa4 	bl	800113c <DHT_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <DHT_GetData+0xa8>)
 80011fa:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80011fc:	f7ff ff9e 	bl	800113c <DHT_Read>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <DHT_GetData+0xac>)
 8001206:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001208:	f7ff ff98 	bl	800113c <DHT_Read>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <DHT_GetData+0xb0>)
 8001212:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001214:	f7ff ff92 	bl	800113c <DHT_Read>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <DHT_GetData+0xb4>)
 800121e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <DHT_GetData+0xb4>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <DHT_GetData+0xa4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <DHT_GetData+0xa8>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4413      	add	r3, r2
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <DHT_GetData+0xac>)
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <DHT_GetData+0xb0>)
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	4413      	add	r3, r2
 800123e:	4299      	cmp	r1, r3
 8001240:	d10f      	bne.n	8001262 <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <DHT_GetData+0xac>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fd4e 	bl	8000ce8 <__aeabi_ui2f>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <DHT_GetData+0xa4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fd46 	bl	8000ce8 <__aeabi_ui2f>
 800125c:	4602      	mov	r2, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200003c4 	.word	0x200003c4
 8001270:	200003d8 	.word	0x200003d8
 8001274:	200003e5 	.word	0x200003e5
 8001278:	200003e4 	.word	0x200003e4
 800127c:	200003e8 	.word	0x200003e8
 8001280:	200003e6 	.word	0x200003e6

08001284 <Temperature>:
uint8_t Temperature(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
	uint8_t i;
	DHT_GetData(&DHT11_Data);
 800128a:	4807      	ldr	r0, [pc, #28]	; (80012a8 <Temperature+0x24>)
 800128c:	f7ff ff9e 	bl	80011cc <DHT_GetData>
	i = DHT11_Data.Temperature;
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <Temperature+0x24>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe1b 	bl	8000ed0 <__aeabi_f2uiz>
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	return i;
 800129e:	79fb      	ldrb	r3, [r7, #7]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200003dc 	.word	0x200003dc

080012ac <Humidity>:
uint8_t Humidity(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	uint8_t i;
	DHT_GetData(&DHT11_Data);
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <Humidity+0x24>)
 80012b4:	f7ff ff8a 	bl	80011cc <DHT_GetData>
	i = DHT11_Data.Humidity;
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <Humidity+0x24>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe07 	bl	8000ed0 <__aeabi_f2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]

	return i;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200003dc 	.word	0x200003dc

080012d4 <Delay_us>:

#include "Delayus.h"

// Delay use timer 3
void Delay_us(uint16_t us)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
	htim3.Instance->CNT = 0;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <Delay_us+0x2c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim3.Instance->CNT <= us);
 80012e6:	bf00      	nop
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <Delay_us+0x2c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d9f9      	bls.n	80012e8 <Delay_us+0x14>
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	20000740 	.word	0x20000740

08001304 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <strtoke+0x1a>
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <strtoke+0x60>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <strtoke+0x60>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <strtoke+0x26>
 8001326:	2300      	movs	r3, #0
 8001328:	e017      	b.n	800135a <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <strtoke+0x60>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <strtoke+0x60>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f007 fae2 	bl	8008900 <strpbrk>
 800133c:	4603      	mov	r3, r0
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <strtoke+0x60>)
 8001340:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <strtoke+0x60>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <strtoke+0x54>
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <strtoke+0x60>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	4904      	ldr	r1, [pc, #16]	; (8001364 <strtoke+0x60>)
 8001352:	600a      	str	r2, [r1, #0]
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8001358:	68fb      	ldr	r3, [r7, #12]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200003c8 	.word	0x200003c8

08001368 <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001376:	3301      	adds	r3, #1
 8001378:	425a      	negs	r2, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	bf58      	it	pl
 8001380:	4253      	negpl	r3, r2
 8001382:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	429a      	cmp	r2, r3
 800138e:	d02f      	beq.n	80013f0 <NEO6_ReceiveUartChar+0x88>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <NEO6_ReceiveUartChar+0xa0>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b0d      	cmp	r3, #13
 8001398:	d114      	bne.n	80013c4 <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <NEO6_ReceiveUartChar+0xa0>)
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	b2d1      	uxtb	r1, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	460a      	mov	r2, r1
 80013c0:	711a      	strb	r2, [r3, #4]
 80013c2:	e015      	b.n	80013f0 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <NEO6_ReceiveUartChar+0xa0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d010      	beq.n	80013f0 <NEO6_ReceiveUartChar+0x88>
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <NEO6_ReceiveUartChar+0xa0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b0a      	cmp	r3, #10
 80013d6:	d00b      	beq.n	80013f0 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <NEO6_ReceiveUartChar+0xa0>)
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	b2d1      	uxtb	r1, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	460a      	mov	r2, r1
 80013ee:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4904      	ldr	r1, [pc, #16]	; (8001408 <NEO6_ReceiveUartChar+0xa0>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f006 f96e 	bl	80076da <HAL_UART_Receive_IT>
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200003f0 	.word	0x200003f0

0800140c <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001420:	429a      	cmp	r2, r3
 8001422:	d102      	bne.n	800142a <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 8001424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001428:	e013      	b.n	8001452 <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001430:	3301      	adds	r3, #1
 8001432:	425a      	negs	r2, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	bf58      	it	pl
 800143a:	4253      	negpl	r3, r2
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800144a:	461a      	mov	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	791b      	ldrb	r3, [r3, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f203 1307 	addw	r3, r3, #263	; 0x107
 800146a:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01e      	beq.n	80014b4 <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8001476:	e008      	b.n	800148a <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 8001478:	7afb      	ldrb	r3, [r7, #11]
 800147a:	2b0d      	cmp	r3, #13
 800147c:	d00e      	beq.n	800149c <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	7afa      	ldrb	r2, [r7, #11]
 8001482:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffbe 	bl	800140c <NEO6_GetCharFromBuffer>
 8001490:	4603      	mov	r3, r0
 8001492:	72fb      	strb	r3, [r7, #11]
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ee      	bne.n	8001478 <NEO6_GetLineFromBuffer+0x1c>
 800149a:	e000      	b.n	800149e <NEO6_GetLineFromBuffer+0x42>
				break;
 800149c:	bf00      	nop
		}
		*LinePointer = 0; // end of cs tring
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 80014c8:	4966      	ldr	r1, [pc, #408]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff ff1a 	bl	8001304 <strtoke>
 80014d0:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d035      	beq.n	8001546 <NEO6_ParseGPRMC+0x86>
	{
		Temp = atoi(ParsePoiner);
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f006 fd59 	bl	8007f92 <atoi>
 80014e0:	4603      	mov	r3, r0
 80014e2:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Second = Temp % 100;
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	4b60      	ldr	r3, [pc, #384]	; (8001668 <NEO6_ParseGPRMC+0x1a8>)
 80014e8:	fba3 1302 	umull	r1, r3, r3, r2
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	2164      	movs	r1, #100	; 0x64
 80014f0:	fb01 f303 	mul.w	r3, r1, r3
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	4a59      	ldr	r2, [pc, #356]	; (8001668 <NEO6_ParseGPRMC+0x1a8>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	095a      	lsrs	r2, r3, #5
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <NEO6_ParseGPRMC+0x1a8>)
 800150a:	fba3 1302 	umull	r1, r3, r3, r2
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2164      	movs	r1, #100	; 0x64
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b2da      	uxtb	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = ((Temp / 10000) % 100)+2;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4a52      	ldr	r2, [pc, #328]	; (800166c <NEO6_ParseGPRMC+0x1ac>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0b5a      	lsrs	r2, r3, #13
 800152a:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <NEO6_ParseGPRMC+0x1a8>)
 800152c:	fba3 1302 	umull	r1, r3, r3, r2
 8001530:	095b      	lsrs	r3, r3, #5
 8001532:	2164      	movs	r1, #100	; 0x64
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	3302      	adds	r3, #2
 800153e:	b2da      	uxtb	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 8001546:	4947      	ldr	r1, [pc, #284]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fedb 	bl	8001304 <strtoke>
 800154e:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8001550:	4944      	ldr	r1, [pc, #272]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fed6 	bl	8001304 <strtoke>
 8001558:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <NEO6_ParseGPRMC+0xb2>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f006 fd12 	bl	8007f8c <atof>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001572:	493c      	ldr	r1, [pc, #240]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fec5 	bl	8001304 <strtoke>
 800157a:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <NEO6_ParseGPRMC+0xce>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 800158e:	4935      	ldr	r1, [pc, #212]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff feb7 	bl	8001304 <strtoke>
 8001596:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <NEO6_ParseGPRMC+0xf0>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f006 fcf3 	bl	8007f8c <atof>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80015b0:	492c      	ldr	r1, [pc, #176]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fea6 	bl	8001304 <strtoke>
 80015b8:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <NEO6_ParseGPRMC+0x10c>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 80015cc:	4925      	ldr	r1, [pc, #148]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fe98 	bl	8001304 <strtoke>
 80015d4:	60f8      	str	r0, [r7, #12]
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 80015d6:	4923      	ldr	r1, [pc, #140]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fe93 	bl	8001304 <strtoke>
 80015de:	60f8      	str	r0, [r7, #12]
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 80015e0:	4920      	ldr	r1, [pc, #128]	; (8001664 <NEO6_ParseGPRMC+0x1a4>)
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fe8e 	bl	8001304 <strtoke>
 80015e8:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d033      	beq.n	800165a <NEO6_ParseGPRMC+0x19a>
	{
		Temp = atoi(ParsePoiner);
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f006 fccd 	bl	8007f92 <atoi>
 80015f8:	4603      	mov	r3, r0
 80015fa:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Year = Temp % 100;
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <NEO6_ParseGPRMC+0x1a8>)
 8001600:	fba3 1302 	umull	r1, r3, r3, r2
 8001604:	095b      	lsrs	r3, r3, #5
 8001606:	2164      	movs	r1, #100	; 0x64
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <NEO6_ParseGPRMC+0x1a8>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	095a      	lsrs	r2, r3, #5
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <NEO6_ParseGPRMC+0x1a8>)
 8001622:	fba3 1302 	umull	r1, r3, r3, r2
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2164      	movs	r1, #100	; 0x64
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b2da      	uxtb	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <NEO6_ParseGPRMC+0x1ac>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	0b5a      	lsrs	r2, r3, #13
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <NEO6_ParseGPRMC+0x1a8>)
 8001644:	fba3 1302 	umull	r1, r3, r3, r2
 8001648:	095b      	lsrs	r3, r3, #5
 800164a:	2164      	movs	r1, #100	; 0x64
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	0800c918 	.word	0x0800c918
 8001668:	51eb851f 	.word	0x51eb851f
 800166c:	d1b71759 	.word	0xd1b71759

08001670 <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8001678:	491f      	ldr	r1, [pc, #124]	; (80016f8 <NEO6_ParseGPVTG+0x88>)
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fe42 	bl	8001304 <strtoke>
 8001680:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8001682:	491d      	ldr	r1, [pc, #116]	; (80016f8 <NEO6_ParseGPVTG+0x88>)
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fe3d 	bl	8001304 <strtoke>
 800168a:	60f8      	str	r0, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 800168c:	491a      	ldr	r1, [pc, #104]	; (80016f8 <NEO6_ParseGPVTG+0x88>)
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fe38 	bl	8001304 <strtoke>
 8001694:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 8001696:	4918      	ldr	r1, [pc, #96]	; (80016f8 <NEO6_ParseGPVTG+0x88>)
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fe33 	bl	8001304 <strtoke>
 800169e:	60f8      	str	r0, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 80016a0:	4915      	ldr	r1, [pc, #84]	; (80016f8 <NEO6_ParseGPVTG+0x88>)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fe2e 	bl	8001304 <strtoke>
 80016a8:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <NEO6_ParseGPVTG+0x52>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f006 fc6a 	bl	8007f8c <atof>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
	}
	ParsePoiner = strtoke(NULL, ",");
 80016c2:	490d      	ldr	r1, [pc, #52]	; (80016f8 <NEO6_ParseGPVTG+0x88>)
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff fe1d 	bl	8001304 <strtoke>
 80016ca:	60f8      	str	r0, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 80016cc:	490a      	ldr	r1, [pc, #40]	; (80016f8 <NEO6_ParseGPVTG+0x88>)
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff fe18 	bl	8001304 <strtoke>
 80016d4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <NEO6_ParseGPVTG+0x7e>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f006 fc54 	bl	8007f8c <atof>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	}
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0800c918 	.word	0x0800c918

080016fc <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8001704:	492a      	ldr	r1, [pc, #168]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fdfc 	bl	8001304 <strtoke>
 800170c:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 800170e:	4928      	ldr	r1, [pc, #160]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fdf7 	bl	8001304 <strtoke>
 8001716:	60f8      	str	r0, [r7, #12]
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 8001718:	4925      	ldr	r1, [pc, #148]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fdf2 	bl	8001304 <strtoke>
 8001720:	60f8      	str	r0, [r7, #12]
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8001722:	4923      	ldr	r1, [pc, #140]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fded 	bl	8001304 <strtoke>
 800172a:	60f8      	str	r0, [r7, #12]
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 800172c:	4920      	ldr	r1, [pc, #128]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fde8 	bl	8001304 <strtoke>
 8001734:	60f8      	str	r0, [r7, #12]
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 8001736:	491e      	ldr	r1, [pc, #120]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fde3 	bl	8001304 <strtoke>
 800173e:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d007      	beq.n	8001758 <NEO6_ParseGPGGA+0x5c>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f006 fc22 	bl	8007f92 <atoi>
 800174e:	4603      	mov	r3, r0
 8001750:	b2da      	uxtb	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 8001758:	4915      	ldr	r1, [pc, #84]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fdd2 	bl	8001304 <strtoke>
 8001760:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <NEO6_ParseGPGGA+0x7e>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f006 fc11 	bl	8007f92 <atoi>
 8001770:	4603      	mov	r3, r0
 8001772:	b2da      	uxtb	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fdc1 	bl	8001304 <strtoke>
 8001782:	60f8      	str	r0, [r7, #12]
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8001784:	490a      	ldr	r1, [pc, #40]	; (80017b0 <NEO6_ParseGPGGA+0xb4>)
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff fdbc 	bl	8001304 <strtoke>
 800178c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <NEO6_ParseGPGGA+0xaa>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f006 fbf8 	bl	8007f8c <atof>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
	}
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	0800c918 	.word	0x0800c918

080017b4 <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 80017bc:	492d      	ldr	r1, [pc, #180]	; (8001874 <NEO6_ParseGPGSA+0xc0>)
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fda0 	bl	8001304 <strtoke>
 80017c4:	60b8      	str	r0, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 80017c6:	492b      	ldr	r1, [pc, #172]	; (8001874 <NEO6_ParseGPGSA+0xc0>)
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fd9b 	bl	8001304 <strtoke>
 80017ce:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <NEO6_ParseGPGSA+0x34>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f006 fbda 	bl	8007f92 <atoi>
 80017de:	4603      	mov	r3, r0
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e007      	b.n	80017fe <NEO6_ParseGPGSA+0x4a>
	{
		ParsePoiner = strtoke(NULL, ",");
 80017ee:	4921      	ldr	r1, [pc, #132]	; (8001874 <NEO6_ParseGPGSA+0xc0>)
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff fd87 	bl	8001304 <strtoke>
 80017f6:	60b8      	str	r0, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	3301      	adds	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b0b      	cmp	r3, #11
 8001802:	d9f4      	bls.n	80017ee <NEO6_ParseGPGSA+0x3a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 8001804:	491b      	ldr	r1, [pc, #108]	; (8001874 <NEO6_ParseGPGSA+0xc0>)
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff fd7c 	bl	8001304 <strtoke>
 800180c:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <NEO6_ParseGPGSA+0x72>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 8001816:	68b8      	ldr	r0, [r7, #8]
 8001818:	f006 fbb8 	bl	8007f8c <atof>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8001826:	4913      	ldr	r1, [pc, #76]	; (8001874 <NEO6_ParseGPGSA+0xc0>)
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fd6b 	bl	8001304 <strtoke>
 800182e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <NEO6_ParseGPGSA+0x94>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f006 fba7 	bl	8007f8c <atof>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8001848:	490a      	ldr	r1, [pc, #40]	; (8001874 <NEO6_ParseGPGSA+0xc0>)
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fd5a 	bl	8001304 <strtoke>
 8001850:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <NEO6_ParseGPGSA+0xb6>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 800185a:	68b8      	ldr	r0, [r7, #8]
 800185c:	f006 fb96 	bl	8007f8c <atof>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
	}
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	0800c918 	.word	0x0800c918

08001878 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001886:	491a      	ldr	r1, [pc, #104]	; (80018f0 <NEO6_ParseLine+0x78>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fd3b 	bl	8001304 <strtoke>
 800188e:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 8001890:	4918      	ldr	r1, [pc, #96]	; (80018f4 <NEO6_ParseLine+0x7c>)
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7fe fc5c 	bl	8000150 <strcmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d103      	bne.n	80018a6 <NEO6_ParseLine+0x2e>
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fe0e 	bl	80014c0 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 80018a4:	e01f      	b.n	80018e6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 80018a6:	4914      	ldr	r1, [pc, #80]	; (80018f8 <NEO6_ParseLine+0x80>)
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7fe fc51 	bl	8000150 <strcmp>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <NEO6_ParseLine+0x44>
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fedb 	bl	8001670 <NEO6_ParseGPVTG>
}
 80018ba:	e014      	b.n	80018e6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 80018bc:	490f      	ldr	r1, [pc, #60]	; (80018fc <NEO6_ParseLine+0x84>)
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7fe fc46 	bl	8000150 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <NEO6_ParseLine+0x5a>
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ff16 	bl	80016fc <NEO6_ParseGPGGA>
}
 80018d0:	e009      	b.n	80018e6 <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 80018d2:	490b      	ldr	r1, [pc, #44]	; (8001900 <NEO6_ParseLine+0x88>)
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7fe fc3b 	bl	8000150 <strcmp>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <NEO6_ParseLine+0x6e>
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff67 	bl	80017b4 <NEO6_ParseGPGSA>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	0800c918 	.word	0x0800c918
 80018f4:	0800c91c 	.word	0x0800c91c
 80018f8:	0800c924 	.word	0x0800c924
 80018fc:	0800c92c 	.word	0x0800c92c
 8001900:	0800c934 	.word	0x0800c934

08001904 <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	return GpsStateHandler->Quality;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferLines)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <NEO6_Task+0x1e>
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fd94 	bl	800145c <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff9f 	bl	8001878 <NEO6_ParseLine>
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <NEO6_Init>:

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2230      	movs	r2, #48	; 0x30
 80019ae:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2230      	movs	r2, #48	; 0x30
 80019c4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->SpeedKilometers = 0;
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->SpeedKnots = 0;
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

	GpsStateHandler->SatelitesNumber = 0;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	GpsStateHandler->Quality = 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	GpsStateHandler->Dop = 0;
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	GpsStateHandler->Hdop = 0;
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->Vdop = 0;
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2201      	movs	r2, #1
 8001a24:	4903      	ldr	r1, [pc, #12]	; (8001a34 <NEO6_Init+0xf0>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 fe57 	bl	80076da <HAL_UART_Receive_IT>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200003f0 	.word	0x200003f0

08001a38 <NEO6_Recive_Data>:
void NEO6_Recive_Data(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart,(uint8_t*) &UartReceivedChar, 1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4903      	ldr	r1, [pc, #12]	; (8001a58 <NEO6_Recive_Data+0x20>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f005 fe45 	bl	80076da <HAL_UART_Receive_IT>

}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200003f0 	.word	0x200003f0

08001a5c <LCD_SetDataPort>:

//
//	Set data port
//
static inline void LCD_SetDataPort(uint8_t data)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]

#ifdef LCD_4BIT
	if(data & (1<<0))
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <LCD_SetDataPort+0x20>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2110      	movs	r1, #16
 8001a74:	481e      	ldr	r0, [pc, #120]	; (8001af0 <LCD_SetDataPort+0x94>)
 8001a76:	f003 f984 	bl	8004d82 <HAL_GPIO_WritePin>
 8001a7a:	e004      	b.n	8001a86 <LCD_SetDataPort+0x2a>
	else
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2110      	movs	r1, #16
 8001a80:	481b      	ldr	r0, [pc, #108]	; (8001af0 <LCD_SetDataPort+0x94>)
 8001a82:	f003 f97e 	bl	8004d82 <HAL_GPIO_WritePin>

	if(data & (1<<1))
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <LCD_SetDataPort+0x40>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2120      	movs	r1, #32
 8001a94:	4816      	ldr	r0, [pc, #88]	; (8001af0 <LCD_SetDataPort+0x94>)
 8001a96:	f003 f974 	bl	8004d82 <HAL_GPIO_WritePin>
 8001a9a:	e004      	b.n	8001aa6 <LCD_SetDataPort+0x4a>
	else
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4813      	ldr	r0, [pc, #76]	; (8001af0 <LCD_SetDataPort+0x94>)
 8001aa2:	f003 f96e 	bl	8004d82 <HAL_GPIO_WritePin>

	if(data & (1<<2))
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <LCD_SetDataPort+0x60>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	480e      	ldr	r0, [pc, #56]	; (8001af0 <LCD_SetDataPort+0x94>)
 8001ab6:	f003 f964 	bl	8004d82 <HAL_GPIO_WritePin>
 8001aba:	e004      	b.n	8001ac6 <LCD_SetDataPort+0x6a>
	else
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <LCD_SetDataPort+0x94>)
 8001ac2:	f003 f95e 	bl	8004d82 <HAL_GPIO_WritePin>

	if(data & (1<<3))
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <LCD_SetDataPort+0x80>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <LCD_SetDataPort+0x94>)
 8001ad6:	f003 f954 	bl	8004d82 <HAL_GPIO_WritePin>
	if(data & (1<<7))
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
#endif
}
 8001ada:	e004      	b.n	8001ae6 <LCD_SetDataPort+0x8a>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <LCD_SetDataPort+0x94>)
 8001ae2:	f003 f94e 	bl	8004d82 <HAL_GPIO_WritePin>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40010c00 	.word	0x40010c00

08001af4 <LCD_GetDataPort>:

#ifdef USE_RW
static inline uint8_t LCD_GetDataPort()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	71fb      	strb	r3, [r7, #7]

#ifdef LCD_4BIT

	if(HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin) == GPIO_PIN_SET) result |= (1<<0);
 8001afe:	2110      	movs	r1, #16
 8001b00:	4817      	ldr	r0, [pc, #92]	; (8001b60 <LCD_GetDataPort+0x6c>)
 8001b02:	f003 f927 	bl	8004d54 <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d103      	bne.n	8001b14 <LCD_GetDataPort+0x20>
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin) == GPIO_PIN_SET) result |= (1<<1);
 8001b14:	2120      	movs	r1, #32
 8001b16:	4812      	ldr	r0, [pc, #72]	; (8001b60 <LCD_GetDataPort+0x6c>)
 8001b18:	f003 f91c 	bl	8004d54 <HAL_GPIO_ReadPin>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d103      	bne.n	8001b2a <LCD_GetDataPort+0x36>
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin) == GPIO_PIN_SET) result |= (1<<2);
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <LCD_GetDataPort+0x6c>)
 8001b2e:	f003 f911 	bl	8004d54 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d103      	bne.n	8001b40 <LCD_GetDataPort+0x4c>
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin) == GPIO_PIN_SET) result |= (1<<3);
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <LCD_GetDataPort+0x6c>)
 8001b44:	f003 f906 	bl	8004d54 <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d103      	bne.n	8001b56 <LCD_GetDataPort+0x62>
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(LCD_DB5_GPIO_Port, LCD_DB5_Pin) == GPIO_PIN_SET) result |= (1<<5);
	if(HAL_GPIO_ReadPin(LCD_DB6_GPIO_Port, LCD_DB6_Pin) == GPIO_PIN_SET) result |= (1<<6);
	if(HAL_GPIO_ReadPin(LCD_DB7_GPIO_Port, LCD_DB7_Pin) == GPIO_PIN_SET) result |= (1<<7);
#endif

return result;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40010c00 	.word	0x40010c00

08001b64 <LCD_DataOut>:
#endif

static void LCD_DataOut()
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
#ifdef LCD_4BIT
	  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001b6a:	23f0      	movs	r3, #240	; 0xf0
 8001b6c:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2302      	movs	r3, #2
 8001b78:	60fb      	str	r3, [r7, #12]
	                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
#endif
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4803      	ldr	r0, [pc, #12]	; (8001b8c <LCD_DataOut+0x28>)
 8001b80:	f002 ff64 	bl	8004a4c <HAL_GPIO_Init>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40010c00 	.word	0x40010c00

08001b90 <LCD_DataIn>:

#ifdef USE_RW
static void LCD_DataIn()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;
#ifdef LCD_4BIT
	 GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001b96:	23f0      	movs	r3, #240	; 0xf0
 8001b98:	603b      	str	r3, [r7, #0]
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
	 GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
	 	                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
#endif
	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <LCD_DataIn+0x24>)
 8001ba8:	f002 ff50 	bl	8004a4c <HAL_GPIO_Init>
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40010c00 	.word	0x40010c00

08001bb8 <LCD_ReadByte>:

//
//	Write byte to LCD
//
uint8_t LCD_ReadByte(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	LCD_DataIn();
 8001bc2:	f7ff ffe5 	bl	8001b90 <LCD_DataIn>

	SET_LCD_RW;
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2108      	movs	r1, #8
 8001bca:	4814      	ldr	r0, [pc, #80]	; (8001c1c <LCD_ReadByte+0x64>)
 8001bcc:	f003 f8d9 	bl	8004d82 <HAL_GPIO_WritePin>
#ifdef LCD_4BIT
	SET_LCD_E;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4811      	ldr	r0, [pc, #68]	; (8001c1c <LCD_ReadByte+0x64>)
 8001bd6:	f003 f8d4 	bl	8004d82 <HAL_GPIO_WritePin>
	result = (LCD_GetDataPort() << 4);
 8001bda:	f7ff ff8b 	bl	8001af4 <LCD_GetDataPort>
 8001bde:	4603      	mov	r3, r0
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	71fb      	strb	r3, [r7, #7]
	RESET_LCD_E;
 8001be4:	2200      	movs	r2, #0
 8001be6:	2101      	movs	r1, #1
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <LCD_ReadByte+0x64>)
 8001bea:	f003 f8ca 	bl	8004d82 <HAL_GPIO_WritePin>

	SET_LCD_E;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	480a      	ldr	r0, [pc, #40]	; (8001c1c <LCD_ReadByte+0x64>)
 8001bf4:	f003 f8c5 	bl	8004d82 <HAL_GPIO_WritePin>
	result |= LCD_GetDataPort();
 8001bf8:	f7ff ff7c 	bl	8001af4 <LCD_GetDataPort>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	71fb      	strb	r3, [r7, #7]
	RESET_LCD_E;
 8001c06:	2200      	movs	r2, #0
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4804      	ldr	r0, [pc, #16]	; (8001c1c <LCD_ReadByte+0x64>)
 8001c0c:	f003 f8b9 	bl	8004d82 <HAL_GPIO_WritePin>
#else
	SET_LCD_E;
	result = LCD_GetDataPort();
	RESET_LCD_E;
#endif
	return result;
 8001c10:	79fb      	ldrb	r3, [r7, #7]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40011000 	.word	0x40011000

08001c20 <LCD_CheckBusyFlag>:

//
//	Check Busy Flag
//
uint8_t LCD_CheckBusyFlag()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	RESET_LCD_RS;
 8001c24:	2200      	movs	r2, #0
 8001c26:	2102      	movs	r1, #2
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <LCD_CheckBusyFlag+0x18>)
 8001c2a:	f003 f8aa 	bl	8004d82 <HAL_GPIO_WritePin>
	return LCD_ReadByte();
 8001c2e:	f7ff ffc3 	bl	8001bb8 <LCD_ReadByte>
 8001c32:	4603      	mov	r3, r0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40011000 	.word	0x40011000

08001c3c <LCD_WriteByte>:

//
//	Write byte to LCD
//
void LCD_WriteByte(uint8_t data)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
#ifdef USE_RW // There is no need to change GPIO direction if RW is not used
	LCD_DataOut();
 8001c46:	f7ff ff8d 	bl	8001b64 <LCD_DataOut>

	RESET_LCD_RW;
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	4816      	ldr	r0, [pc, #88]	; (8001ca8 <LCD_WriteByte+0x6c>)
 8001c50:	f003 f897 	bl	8004d82 <HAL_GPIO_WritePin>
#endif

#ifdef LCD_4BIT
	SET_LCD_E;
 8001c54:	2201      	movs	r2, #1
 8001c56:	2101      	movs	r1, #1
 8001c58:	4813      	ldr	r0, [pc, #76]	; (8001ca8 <LCD_WriteByte+0x6c>)
 8001c5a:	f003 f892 	bl	8004d82 <HAL_GPIO_WritePin>
	LCD_SetDataPort(data >> 4);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fef9 	bl	8001a5c <LCD_SetDataPort>
	RESET_LCD_E;
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <LCD_WriteByte+0x6c>)
 8001c70:	f003 f887 	bl	8004d82 <HAL_GPIO_WritePin>
#endif
	SET_LCD_E;
 8001c74:	2201      	movs	r2, #1
 8001c76:	2101      	movs	r1, #1
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <LCD_WriteByte+0x6c>)
 8001c7a:	f003 f882 	bl	8004d82 <HAL_GPIO_WritePin>
	LCD_SetDataPort(data);
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff feeb 	bl	8001a5c <LCD_SetDataPort>
	RESET_LCD_E;
 8001c86:	2200      	movs	r2, #0
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <LCD_WriteByte+0x6c>)
 8001c8c:	f003 f879 	bl	8004d82 <HAL_GPIO_WritePin>


#ifdef USE_RW
	while((LCD_CheckBusyFlag() & (1<<7))); // Wait for data processing
 8001c90:	bf00      	nop
 8001c92:	f7ff ffc5 	bl	8001c20 <LCD_CheckBusyFlag>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dbf9      	blt.n	8001c92 <LCD_WriteByte+0x56>
#else
//		HAL_Delay(1);
		Delay_us(120); // Wait for data processing
#endif
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40011000 	.word	0x40011000

08001cac <LCD_WriteCmd>:

//
//	Write command to LCD
//
void LCD_WriteCmd(uint8_t cmd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	RESET_LCD_RS;
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2102      	movs	r1, #2
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <LCD_WriteCmd+0x24>)
 8001cbc:	f003 f861 	bl	8004d82 <HAL_GPIO_WritePin>
	LCD_WriteByte(cmd);
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <LCD_WriteByte>
#ifndef USE_RW
	Delay_us(1000); //<<--- wait for command processing
#endif
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40011000 	.word	0x40011000

08001cd4 <LCD_WriteData>:

//
//	Write data to LCD
//
void LCD_WriteData(uint8_t data)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
	SET_LCD_RS;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <LCD_WriteData+0x24>)
 8001ce4:	f003 f84d 	bl	8004d82 <HAL_GPIO_WritePin>
	LCD_WriteByte(data);
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ffa6 	bl	8001c3c <LCD_WriteByte>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40011000 	.word	0x40011000

08001cfc <LCD_Char>:

//
//	Write one character to LCD
//
void LCD_Char(char c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
	LCD_WriteData(((c >= 0x80) && (c <= 0x87)) ? (c & 0x07) : c);
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	da07      	bge.n	8001d1e <LCD_Char+0x22>
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b87      	cmp	r3, #135	; 0x87
 8001d12:	d804      	bhi.n	8001d1e <LCD_Char+0x22>
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e000      	b.n	8001d20 <LCD_Char+0x24>
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffd7 	bl	8001cd4 <LCD_WriteData>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <LCD_String>:

//
//	Write string to LCD
//
void LCD_String(char* str)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	char c;
	while((c = *(str++)))
 8001d36:	e003      	b.n	8001d40 <LCD_String+0x12>
		LCD_Char(c);
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ffde 	bl	8001cfc <LCD_Char>
	while((c = *(str++)))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f3      	bne.n	8001d38 <LCD_String+0xa>
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <LCD_Menu_Clear>:

}
//
// Clear one row on display
//
void LCD_Menu_Clear (void){
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0

	uint8_t x =0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
	LCD_Locate(x, 1);
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	2101      	movs	r1, #1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f847 	bl	8001dfc <LCD_Locate>
		for(x=0; x<LCD_X; x++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	e005      	b.n	8001d80 <LCD_Menu_Clear+0x26>
				  		{
					  	  	  LCD_Char(' ');
 8001d74:	2020      	movs	r0, #32
 8001d76:	f7ff ffc1 	bl	8001cfc <LCD_Char>
		for(x=0; x<LCD_X; x++)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	d9f6      	bls.n	8001d74 <LCD_Menu_Clear+0x1a>

				  		}
}
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <LCD_write>:

void LCD_write(uint8_t x, uint8_t y, char *text)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	603a      	str	r2, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	71bb      	strb	r3, [r7, #6]
	LCD_Locate(x,y);
 8001da0:	79ba      	ldrb	r2, [r7, #6]
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f828 	bl	8001dfc <LCD_Locate>

	while(*text)
 8001dac:	e006      	b.n	8001dbc <LCD_write+0x2c>
		LCD_Char(*text++);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	603a      	str	r2, [r7, #0]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ffa0 	bl	8001cfc <LCD_Char>
	while(*text)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f4      	bne.n	8001dae <LCD_write+0x1e>

}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <LCD_Int>:
//
// Print integer on LCD
//
void LCD_Int(int value)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	char buf[LCD_X+1];
	sprintf(buf, "%d", value);
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4906      	ldr	r1, [pc, #24]	; (8001df8 <LCD_Int+0x28>)
 8001de0:	4618      	mov	r0, r3
 8001de2:	f006 fd6d 	bl	80088c0 <siprintf>
	LCD_String(buf);
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff9f 	bl	8001d2e <LCD_String>
}
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	0800c93c 	.word	0x0800c93c

08001dfc <LCD_Locate>:

//
// Set cursor for x-column, y-row
//
void LCD_Locate(uint8_t x, uint8_t y)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71bb      	strb	r3, [r7, #6]
	switch(y)
 8001e0c:	79bb      	ldrb	r3, [r7, #6]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <LCD_Locate+0x1c>
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d003      	beq.n	8001e1e <LCD_Locate+0x22>
 8001e16:	e005      	b.n	8001e24 <LCD_Locate+0x28>
	{
		case 0:
			y = LCD_LINE1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	71bb      	strb	r3, [r7, #6]
			break;
 8001e1c:	e002      	b.n	8001e24 <LCD_Locate+0x28>
#if (LCD_Y>1)
		case 1:
			y = LCD_LINE2;
 8001e1e:	2340      	movs	r3, #64	; 0x40
 8001e20:	71bb      	strb	r3, [r7, #6]
			break;
 8001e22:	bf00      	nop
			y = LCD_LINE4;
			break;
#endif
	}

	LCD_WriteCmd((0x80 + y + x));
 8001e24:	79ba      	ldrb	r2, [r7, #6]
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3b80      	subs	r3, #128	; 0x80
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff3b 	bl	8001cac <LCD_WriteCmd>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <LCD_Cls>:

//
//	Clear LCD
//
void LCD_Cls(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
	LCD_WriteCmd(LCDC_CLS);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff ff32 	bl	8001cac <LCD_WriteCmd>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <LCD_Init>:

//
//	Initialization
//
void LCD_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	RESET_LCD_RS;
 8001e50:	2200      	movs	r2, #0
 8001e52:	2102      	movs	r1, #2
 8001e54:	481a      	ldr	r0, [pc, #104]	; (8001ec0 <LCD_Init+0x74>)
 8001e56:	f002 ff94 	bl	8004d82 <HAL_GPIO_WritePin>
	RESET_LCD_E;
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <LCD_Init+0x74>)
 8001e60:	f002 ff8f 	bl	8004d82 <HAL_GPIO_WritePin>
#ifdef USE_RW
	RESET_LCD_RW;
 8001e64:	2200      	movs	r2, #0
 8001e66:	2108      	movs	r1, #8
 8001e68:	4815      	ldr	r0, [pc, #84]	; (8001ec0 <LCD_Init+0x74>)
 8001e6a:	f002 ff8a 	bl	8004d82 <HAL_GPIO_WritePin>
#endif
	LCD_DataOut();
 8001e6e:	f7ff fe79 	bl	8001b64 <LCD_DataOut>

	HAL_Delay(15);
 8001e72:	200f      	movs	r0, #15
 8001e74:	f002 fc08 	bl	8004688 <HAL_Delay>

	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 8001e78:	2030      	movs	r0, #48	; 0x30
 8001e7a:	f7ff fdef 	bl	8001a5c <LCD_SetDataPort>
	Delay_us(4100);
 8001e7e:	f241 0004 	movw	r0, #4100	; 0x1004
 8001e82:	f7ff fa27 	bl	80012d4 <Delay_us>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 8001e86:	2030      	movs	r0, #48	; 0x30
 8001e88:	f7ff fde8 	bl	8001a5c <LCD_SetDataPort>
	Delay_us(100);
 8001e8c:	2064      	movs	r0, #100	; 0x64
 8001e8e:	f7ff fa21 	bl	80012d4 <Delay_us>
#ifdef LCD_4BIT
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC4B); //4-byte mode
 8001e92:	2020      	movs	r0, #32
 8001e94:	f7ff fde2 	bl	8001a5c <LCD_SetDataPort>
	Delay_us(100);
 8001e98:	2064      	movs	r0, #100	; 0x64
 8001e9a:	f7ff fa1b 	bl	80012d4 <Delay_us>
	LCD_WriteCmd(LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7); // 4-bit, 2 lanes, 5x7 chars
 8001e9e:	2028      	movs	r0, #40	; 0x28
 8001ea0:	f7ff ff04 	bl	8001cac <LCD_WriteCmd>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
	Delay_us(100);
	LCD_WriteCmd(LCDC_FUNC|LCDC_FUNC8B|LCDC_FUNC2L|LCDC_FUNC5x7); // 4-bit, 2 lanes, 5x7 chars
#endif

	LCD_WriteCmd(LCDC_ONOFF|LCDC_CURSOROFF); // Cursor off
 8001ea4:	2008      	movs	r0, #8
 8001ea6:	f7ff ff01 	bl	8001cac <LCD_WriteCmd>
	LCD_WriteCmd(LCDC_ONOFF|LCDC_DISPLAYON); // LCD on
 8001eaa:	200c      	movs	r0, #12
 8001eac:	f7ff fefe 	bl	8001cac <LCD_WriteCmd>
	LCD_WriteCmd(LCDC_ENTRY|LCDC_ENTRYR); // Data entry right
 8001eb0:	2006      	movs	r0, #6
 8001eb2:	f7ff fefb 	bl	8001cac <LCD_WriteCmd>

	LCD_Cls(); // Clear display
 8001eb6:	f7ff ffc2 	bl	8001e3e <LCD_Cls>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40011000 	.word	0x40011000

08001ec4 <LCD_Brightness_Next>:
//uint8_t Temperature, Humidity;

void LCD_Brightness_Refresh(void);
extern uint8_t PWM;

void LCD_Brightness_Next (void){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0


	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,PWM);  // od  1 do 35
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <LCD_Brightness_Next+0x24>)
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <LCD_Brightness_Next+0x28>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34

	PWM-=10;
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <LCD_Brightness_Next+0x24>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	3b0a      	subs	r3, #10
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <LCD_Brightness_Next+0x24>)
 8001edc:	701a      	strb	r2, [r3, #0]
	LCD_Brightness_Refresh();
 8001ede:	f000 f83f 	bl	8001f60 <LCD_Brightness_Refresh>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000788 	.word	0x20000788

08001ef0 <LCD_Brightness_Back>:

void LCD_Brightness_Back(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	key_next_func = menu_next;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <LCD_Brightness_Back+0x24>)
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <LCD_Brightness_Back+0x28>)
 8001ef8:	601a      	str	r2, [r3, #0]
	key_prev_func = menu_prev;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <LCD_Brightness_Back+0x2c>)
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <LCD_Brightness_Back+0x30>)
 8001efe:	601a      	str	r2, [r3, #0]
	key_enter_func = menu_enter;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <LCD_Brightness_Back+0x34>)
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <LCD_Brightness_Back+0x38>)
 8001f04:	601a      	str	r2, [r3, #0]
	key_back_func = menu_back;
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <LCD_Brightness_Back+0x3c>)
 8001f08:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <LCD_Brightness_Back+0x40>)
 8001f0a:	601a      	str	r2, [r3, #0]

	menu_refresh();
 8001f0c:	f001 fdf2 	bl	8003af4 <menu_refresh>

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200001b8 	.word	0x200001b8
 8001f18:	08003dd1 	.word	0x08003dd1
 8001f1c:	200001bc 	.word	0x200001bc
 8001f20:	08003e55 	.word	0x08003e55
 8001f24:	200001c0 	.word	0x200001c0
 8001f28:	08003d55 	.word	0x08003d55
 8001f2c:	200001c4 	.word	0x200001c4
 8001f30:	08003ce5 	.word	0x08003ce5

08001f34 <LCD_Brightness_Prev>:
void LCD_Brightness_Prev (void){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,PWM);  // od  1 do 35
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <LCD_Brightness_Prev+0x24>)
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <LCD_Brightness_Prev+0x28>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	635a      	str	r2, [r3, #52]	; 0x34
PWM+=10;
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <LCD_Brightness_Prev+0x24>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	330a      	adds	r3, #10
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <LCD_Brightness_Prev+0x24>)
 8001f4c:	701a      	strb	r2, [r3, #0]
LCD_Brightness_Refresh();
 8001f4e:	f000 f807 	bl	8001f60 <LCD_Brightness_Refresh>
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000788 	.word	0x20000788

08001f60 <LCD_Brightness_Refresh>:
//
//Brightness setting function
//
void LCD_Brightness_Refresh (void){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
		//uint8_t percent = (TIM2->CCR1)/550;
		LCD_Cls();
 8001f64:	f7ff ff6b 	bl	8001e3e <LCD_Cls>
		LCD_write(0,0, "-- BRIGHTNESS --");
 8001f68:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <LCD_Brightness_Refresh+0x3c>)
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff ff0f 	bl	8001d90 <LCD_write>
		LCD_Menu_Clear ();
 8001f72:	f7ff fef2 	bl	8001d5a <LCD_Menu_Clear>

		//memset(LCD_Char,0xff,percent/10);  //LCD_Char   memset(&lcd_buf[2][8],0xff,percent/10)
		//memset(&lcd_buf[2][8+percent/10], '-',10-percent/10);

		LCD_Locate(5,1);
 8001f76:	2101      	movs	r1, #1
 8001f78:	2005      	movs	r0, #5
 8001f7a:	f7ff ff3f 	bl	8001dfc <LCD_Locate>
		LCD_Int(PWM);
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <LCD_Brightness_Refresh+0x40>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff24 	bl	8001dd0 <LCD_Int>
		LCD_Locate(8,1);
 8001f88:	2101      	movs	r1, #1
 8001f8a:	2008      	movs	r0, #8
 8001f8c:	f7ff ff36 	bl	8001dfc <LCD_Locate>
		LCD_Char('%');
 8001f90:	2025      	movs	r0, #37	; 0x25
 8001f92:	f7ff feb3 	bl	8001cfc <LCD_Char>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	0800c948 	.word	0x0800c948
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <LCD_Display_Test_Refresh>:
//
//Test function display
//
void LCD_Display_Test_Refresh(void) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
	//uint8_t percent = (TIM2->CCR1)/550;
	uint8_t x = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	71fb      	strb	r3, [r7, #7]
	LCD_Cls();
 8001fae:	f7ff ff46 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "---- TEST ----");
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <LCD_Display_Test_Refresh+0x88>)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff feea 	bl	8001d90 <LCD_write>

	LCD_Cls();
 8001fbc:	f7ff ff3f 	bl	8001e3e <LCD_Cls>
	LCD_Locate(0, 0);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff1a 	bl	8001dfc <LCD_Locate>
	for (x = 0; x <= 15; x++) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	e00d      	b.n	8001fea <LCD_Display_Test_Refresh+0x46>
		LCD_Locate(x, 0);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff12 	bl	8001dfc <LCD_Locate>
		LCD_Char(0xff);
 8001fd8:	20ff      	movs	r0, #255	; 0xff
 8001fda:	f7ff fe8f 	bl	8001cfc <LCD_Char>
		HAL_Delay(100);
 8001fde:	2064      	movs	r0, #100	; 0x64
 8001fe0:	f002 fb52 	bl	8004688 <HAL_Delay>
	for (x = 0; x <= 15; x++) {
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d9ee      	bls.n	8001fce <LCD_Display_Test_Refresh+0x2a>
	}
	LCD_Locate(0, 1);
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff ff02 	bl	8001dfc <LCD_Locate>
	for (x = 0; x <= 15; x++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	e00d      	b.n	800201a <LCD_Display_Test_Refresh+0x76>
		LCD_Locate(x, 1);
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fefa 	bl	8001dfc <LCD_Locate>
		LCD_Char(0xff);
 8002008:	20ff      	movs	r0, #255	; 0xff
 800200a:	f7ff fe77 	bl	8001cfc <LCD_Char>
		HAL_Delay(100);
 800200e:	2064      	movs	r0, #100	; 0x64
 8002010:	f002 fb3a 	bl	8004688 <HAL_Delay>
	for (x = 0; x <= 15; x++) {
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	3301      	adds	r3, #1
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d9ee      	bls.n	8001ffe <LCD_Display_Test_Refresh+0x5a>
	}

}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	0800c95c 	.word	0x0800c95c

08002030 <LCD_Display_Compas_Refresh>:
//
//Compass value display function
//
void LCD_Display_Compas_Refresh(void) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0

	int16_t x ;
	LCD_Cls();
 8002036:	f7ff ff02 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "--- COMPAS ----");
 800203a:	4a92      	ldr	r2, [pc, #584]	; (8002284 <LCD_Display_Compas_Refresh+0x254>)
 800203c:	2100      	movs	r1, #0
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fea6 	bl	8001d90 <LCD_write>

	LCD_Menu_Clear();
 8002044:	f7ff fe89 	bl	8001d5a <LCD_Menu_Clear>
	while(HAL_GPIO_ReadPin(GPIOC , key_prev_Pin)){
 8002048:	e10d      	b.n	8002266 <LCD_Display_Compas_Refresh+0x236>
		HAL_Delay(150);
 800204a:	2096      	movs	r0, #150	; 0x96
 800204c:	f002 fb1c 	bl	8004688 <HAL_Delay>
		x = Compas_Degress();
 8002050:	f001 fa32 	bl	80034b8 <Compas_Degress>
 8002054:	4603      	mov	r3, r0
 8002056:	80fb      	strh	r3, [r7, #6]
		if (x>=0 ){
 8002058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db18      	blt.n	8002092 <LCD_Display_Compas_Refresh+0x62>
			LCD_Menu_Clear();
 8002060:	f7ff fe7b 	bl	8001d5a <LCD_Menu_Clear>
			LCD_Locate(0, 1);
 8002064:	2101      	movs	r1, #1
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fec8 	bl	8001dfc <LCD_Locate>
			LCD_Int(x);
 800206c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fead 	bl	8001dd0 <LCD_Int>
			LCD_Locate(3, 1);
 8002076:	2101      	movs	r1, #1
 8002078:	2003      	movs	r0, #3
 800207a:	f7ff febf 	bl	8001dfc <LCD_Locate>
			LCD_Char(0xDF);
 800207e:	20df      	movs	r0, #223	; 0xdf
 8002080:	f7ff fe3c 	bl	8001cfc <LCD_Char>
			LCD_Locate(6, 1);
 8002084:	2101      	movs	r1, #1
 8002086:	2006      	movs	r0, #6
 8002088:	f7ff feb8 	bl	8001dfc <LCD_Locate>
			LCD_String("PN");
 800208c:	487e      	ldr	r0, [pc, #504]	; (8002288 <LCD_Display_Compas_Refresh+0x258>)
 800208e:	f7ff fe4e 	bl	8001d2e <LCD_String>
		}
		if (x >= 20 ) {
 8002092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002096:	2b13      	cmp	r3, #19
 8002098:	dd18      	ble.n	80020cc <LCD_Display_Compas_Refresh+0x9c>
			LCD_Menu_Clear();
 800209a:	f7ff fe5e 	bl	8001d5a <LCD_Menu_Clear>
			LCD_Locate(0, 1);
 800209e:	2101      	movs	r1, #1
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff feab 	bl	8001dfc <LCD_Locate>
			LCD_Int(x);
 80020a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fe90 	bl	8001dd0 <LCD_Int>
			LCD_Locate(3, 1);
 80020b0:	2101      	movs	r1, #1
 80020b2:	2003      	movs	r0, #3
 80020b4:	f7ff fea2 	bl	8001dfc <LCD_Locate>
			LCD_Char(0xDF);
 80020b8:	20df      	movs	r0, #223	; 0xdf
 80020ba:	f7ff fe1f 	bl	8001cfc <LCD_Char>
			LCD_Locate(6, 1);
 80020be:	2101      	movs	r1, #1
 80020c0:	2006      	movs	r0, #6
 80020c2:	f7ff fe9b 	bl	8001dfc <LCD_Locate>
			LCD_String("PN-W");
 80020c6:	4871      	ldr	r0, [pc, #452]	; (800228c <LCD_Display_Compas_Refresh+0x25c>)
 80020c8:	f7ff fe31 	bl	8001d2e <LCD_String>
		}
		if (x >= 70) {
 80020cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d0:	2b45      	cmp	r3, #69	; 0x45
 80020d2:	dd18      	ble.n	8002106 <LCD_Display_Compas_Refresh+0xd6>
			LCD_Menu_Clear();
 80020d4:	f7ff fe41 	bl	8001d5a <LCD_Menu_Clear>
			LCD_Locate(0, 1);
 80020d8:	2101      	movs	r1, #1
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff fe8e 	bl	8001dfc <LCD_Locate>
			LCD_Int(x);
 80020e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fe73 	bl	8001dd0 <LCD_Int>
			LCD_Locate(3, 1);
 80020ea:	2101      	movs	r1, #1
 80020ec:	2003      	movs	r0, #3
 80020ee:	f7ff fe85 	bl	8001dfc <LCD_Locate>
			LCD_Char(0xDF);
 80020f2:	20df      	movs	r0, #223	; 0xdf
 80020f4:	f7ff fe02 	bl	8001cfc <LCD_Char>
			LCD_Locate(6, 1);
 80020f8:	2101      	movs	r1, #1
 80020fa:	2006      	movs	r0, #6
 80020fc:	f7ff fe7e 	bl	8001dfc <LCD_Locate>
			LCD_String("W");
 8002100:	4863      	ldr	r0, [pc, #396]	; (8002290 <LCD_Display_Compas_Refresh+0x260>)
 8002102:	f7ff fe14 	bl	8001d2e <LCD_String>
		}
		if (x >= 110 ) {
 8002106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210a:	2b6d      	cmp	r3, #109	; 0x6d
 800210c:	dd18      	ble.n	8002140 <LCD_Display_Compas_Refresh+0x110>
			LCD_Menu_Clear();
 800210e:	f7ff fe24 	bl	8001d5a <LCD_Menu_Clear>
			LCD_Locate(0, 1);
 8002112:	2101      	movs	r1, #1
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff fe71 	bl	8001dfc <LCD_Locate>
			LCD_Int(x);
 800211a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fe56 	bl	8001dd0 <LCD_Int>
			LCD_Locate(3, 1);
 8002124:	2101      	movs	r1, #1
 8002126:	2003      	movs	r0, #3
 8002128:	f7ff fe68 	bl	8001dfc <LCD_Locate>
			LCD_Char(0xDF);
 800212c:	20df      	movs	r0, #223	; 0xdf
 800212e:	f7ff fde5 	bl	8001cfc <LCD_Char>
			LCD_Locate(6, 1);
 8002132:	2101      	movs	r1, #1
 8002134:	2006      	movs	r0, #6
 8002136:	f7ff fe61 	bl	8001dfc <LCD_Locate>
			LCD_String("PD-W");
 800213a:	4856      	ldr	r0, [pc, #344]	; (8002294 <LCD_Display_Compas_Refresh+0x264>)
 800213c:	f7ff fdf7 	bl	8001d2e <LCD_String>
		}
		if (x >=160 ) {
 8002140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002144:	2b9f      	cmp	r3, #159	; 0x9f
 8002146:	dd18      	ble.n	800217a <LCD_Display_Compas_Refresh+0x14a>
			LCD_Menu_Clear();
 8002148:	f7ff fe07 	bl	8001d5a <LCD_Menu_Clear>
			LCD_Locate(0, 1);
 800214c:	2101      	movs	r1, #1
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff fe54 	bl	8001dfc <LCD_Locate>
			LCD_Int(x);
 8002154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fe39 	bl	8001dd0 <LCD_Int>
			LCD_Locate(3, 1);
 800215e:	2101      	movs	r1, #1
 8002160:	2003      	movs	r0, #3
 8002162:	f7ff fe4b 	bl	8001dfc <LCD_Locate>
			LCD_Char(0xDF);
 8002166:	20df      	movs	r0, #223	; 0xdf
 8002168:	f7ff fdc8 	bl	8001cfc <LCD_Char>
			LCD_Locate(6, 1);
 800216c:	2101      	movs	r1, #1
 800216e:	2006      	movs	r0, #6
 8002170:	f7ff fe44 	bl	8001dfc <LCD_Locate>
			LCD_String("PD");
 8002174:	4848      	ldr	r0, [pc, #288]	; (8002298 <LCD_Display_Compas_Refresh+0x268>)
 8002176:	f7ff fdda 	bl	8001d2e <LCD_String>
		}
		if (x >= 200 ) {
 800217a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217e:	2bc7      	cmp	r3, #199	; 0xc7
 8002180:	dd18      	ble.n	80021b4 <LCD_Display_Compas_Refresh+0x184>
			LCD_Menu_Clear();
 8002182:	f7ff fdea 	bl	8001d5a <LCD_Menu_Clear>
			LCD_Locate(0, 1);
 8002186:	2101      	movs	r1, #1
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff fe37 	bl	8001dfc <LCD_Locate>
			LCD_Int(x);
 800218e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fe1c 	bl	8001dd0 <LCD_Int>
			LCD_Locate(3, 1);
 8002198:	2101      	movs	r1, #1
 800219a:	2003      	movs	r0, #3
 800219c:	f7ff fe2e 	bl	8001dfc <LCD_Locate>
			LCD_Char(0xDF);
 80021a0:	20df      	movs	r0, #223	; 0xdf
 80021a2:	f7ff fdab 	bl	8001cfc <LCD_Char>
			LCD_Locate(6, 1);
 80021a6:	2101      	movs	r1, #1
 80021a8:	2006      	movs	r0, #6
 80021aa:	f7ff fe27 	bl	8001dfc <LCD_Locate>
			LCD_String("PD-Z");
 80021ae:	483b      	ldr	r0, [pc, #236]	; (800229c <LCD_Display_Compas_Refresh+0x26c>)
 80021b0:	f7ff fdbd 	bl	8001d2e <LCD_String>
		}
		if (x >= 250 ) {
 80021b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b8:	2bf9      	cmp	r3, #249	; 0xf9
 80021ba:	dd18      	ble.n	80021ee <LCD_Display_Compas_Refresh+0x1be>
			LCD_Menu_Clear();
 80021bc:	f7ff fdcd 	bl	8001d5a <LCD_Menu_Clear>
			LCD_Locate(0, 1);
 80021c0:	2101      	movs	r1, #1
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff fe1a 	bl	8001dfc <LCD_Locate>
			LCD_Int(x);
 80021c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fdff 	bl	8001dd0 <LCD_Int>
			LCD_Locate(3, 1);
 80021d2:	2101      	movs	r1, #1
 80021d4:	2003      	movs	r0, #3
 80021d6:	f7ff fe11 	bl	8001dfc <LCD_Locate>
			LCD_Char(0xDF);
 80021da:	20df      	movs	r0, #223	; 0xdf
 80021dc:	f7ff fd8e 	bl	8001cfc <LCD_Char>
			LCD_Locate(6, 1);
 80021e0:	2101      	movs	r1, #1
 80021e2:	2006      	movs	r0, #6
 80021e4:	f7ff fe0a 	bl	8001dfc <LCD_Locate>
			LCD_String("Z");
 80021e8:	482d      	ldr	r0, [pc, #180]	; (80022a0 <LCD_Display_Compas_Refresh+0x270>)
 80021ea:	f7ff fda0 	bl	8001d2e <LCD_String>
		}
		if (x >= 290) {
 80021ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f2:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80021f6:	db18      	blt.n	800222a <LCD_Display_Compas_Refresh+0x1fa>
			LCD_Menu_Clear();
 80021f8:	f7ff fdaf 	bl	8001d5a <LCD_Menu_Clear>
				LCD_Locate(0, 1);
 80021fc:	2101      	movs	r1, #1
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff fdfc 	bl	8001dfc <LCD_Locate>
				LCD_Int(x);
 8002204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fde1 	bl	8001dd0 <LCD_Int>
				LCD_Locate(3, 1);
 800220e:	2101      	movs	r1, #1
 8002210:	2003      	movs	r0, #3
 8002212:	f7ff fdf3 	bl	8001dfc <LCD_Locate>
				LCD_Char(0xDF);
 8002216:	20df      	movs	r0, #223	; 0xdf
 8002218:	f7ff fd70 	bl	8001cfc <LCD_Char>
				LCD_Locate(6, 1);
 800221c:	2101      	movs	r1, #1
 800221e:	2006      	movs	r0, #6
 8002220:	f7ff fdec 	bl	8001dfc <LCD_Locate>
				LCD_String("PN-Z");
 8002224:	481f      	ldr	r0, [pc, #124]	; (80022a4 <LCD_Display_Compas_Refresh+0x274>)
 8002226:	f7ff fd82 	bl	8001d2e <LCD_String>
			}
		if (x>290 ){
 800222a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002232:	dd18      	ble.n	8002266 <LCD_Display_Compas_Refresh+0x236>
				LCD_Menu_Clear();
 8002234:	f7ff fd91 	bl	8001d5a <LCD_Menu_Clear>
				LCD_Locate(0, 1);
 8002238:	2101      	movs	r1, #1
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff fdde 	bl	8001dfc <LCD_Locate>
				LCD_Int(x);
 8002240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fdc3 	bl	8001dd0 <LCD_Int>
				LCD_Locate(3, 1);
 800224a:	2101      	movs	r1, #1
 800224c:	2003      	movs	r0, #3
 800224e:	f7ff fdd5 	bl	8001dfc <LCD_Locate>
				LCD_Char(0xDF);
 8002252:	20df      	movs	r0, #223	; 0xdf
 8002254:	f7ff fd52 	bl	8001cfc <LCD_Char>
				LCD_Locate(6, 1);
 8002258:	2101      	movs	r1, #1
 800225a:	2006      	movs	r0, #6
 800225c:	f7ff fdce 	bl	8001dfc <LCD_Locate>
				LCD_String("PN");
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <LCD_Display_Compas_Refresh+0x258>)
 8002262:	f7ff fd64 	bl	8001d2e <LCD_String>
	while(HAL_GPIO_ReadPin(GPIOC , key_prev_Pin)){
 8002266:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800226a:	480f      	ldr	r0, [pc, #60]	; (80022a8 <LCD_Display_Compas_Refresh+0x278>)
 800226c:	f002 fd72 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	f47f aee9 	bne.w	800204a <LCD_Display_Compas_Refresh+0x1a>
			}
	}

	}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	0800c96c 	.word	0x0800c96c
 8002288:	0800c97c 	.word	0x0800c97c
 800228c:	0800c980 	.word	0x0800c980
 8002290:	0800c988 	.word	0x0800c988
 8002294:	0800c98c 	.word	0x0800c98c
 8002298:	0800c994 	.word	0x0800c994
 800229c:	0800c998 	.word	0x0800c998
 80022a0:	0800c9a0 	.word	0x0800c9a0
 80022a4:	0800c9a4 	.word	0x0800c9a4
 80022a8:	40011000 	.word	0x40011000

080022ac <LCD_Display_Temperature_Refresh>:
//
//Temperature value display function
//
void LCD_Display_Temperature_Refresh(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
	//uint8_t percent = (TIM2->CCR1)/550;
	uint8_t x = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	71fb      	strb	r3, [r7, #7]
	LCD_Cls();
 80022b6:	f7ff fdc2 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "-- Temperature --");
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <LCD_Display_Temperature_Refresh+0x74>)
 80022bc:	2100      	movs	r1, #0
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff fd66 	bl	8001d90 <LCD_write>

	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 80022c4:	e01f      	b.n	8002306 <LCD_Display_Temperature_Refresh+0x5a>
		LCD_Menu_Clear();
 80022c6:	f7ff fd48 	bl	8001d5a <LCD_Menu_Clear>
		x = Temperature();
 80022ca:	f7fe ffdb 	bl	8001284 <Temperature>
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
		LCD_Locate(0, 1);
 80022d2:	2101      	movs	r1, #1
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fd91 	bl	8001dfc <LCD_Locate>
		LCD_Int(x);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fd77 	bl	8001dd0 <LCD_Int>
		LCD_Locate(3, 1);
 80022e2:	2101      	movs	r1, #1
 80022e4:	2003      	movs	r0, #3
 80022e6:	f7ff fd89 	bl	8001dfc <LCD_Locate>
		LCD_Char(0xDF);
 80022ea:	20df      	movs	r0, #223	; 0xdf
 80022ec:	f7ff fd06 	bl	8001cfc <LCD_Char>
		LCD_Locate(4, 1);
 80022f0:	2101      	movs	r1, #1
 80022f2:	2004      	movs	r0, #4
 80022f4:	f7ff fd82 	bl	8001dfc <LCD_Locate>
		LCD_Char(0x43);
 80022f8:	2043      	movs	r0, #67	; 0x43
 80022fa:	f7ff fcff 	bl	8001cfc <LCD_Char>
		HAL_Delay(300);
 80022fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002302:	f002 f9c1 	bl	8004688 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <LCD_Display_Temperature_Refresh+0x78>)
 800230c:	f002 fd22 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1d7      	bne.n	80022c6 <LCD_Display_Temperature_Refresh+0x1a>

}
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	0800c9ac 	.word	0x0800c9ac
 8002324:	40011000 	.word	0x40011000

08002328 <LCD_Display_Humidity_Refresh>:
//
//Humidity value display function
//
void LCD_Display_Humidity_Refresh(void) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
	uint8_t x = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	71fb      	strb	r3, [r7, #7]
	LCD_Cls();
 8002332:	f7ff fd84 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "--- Humidity ----");
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <LCD_Display_Humidity_Refresh+0x68>)
 8002338:	2100      	movs	r1, #0
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff fd28 	bl	8001d90 <LCD_write>

	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002340:	e018      	b.n	8002374 <LCD_Display_Humidity_Refresh+0x4c>
		LCD_Menu_Clear();
 8002342:	f7ff fd0a 	bl	8001d5a <LCD_Menu_Clear>
		x = Humidity();
 8002346:	f7fe ffb1 	bl	80012ac <Humidity>
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
		LCD_Locate(0, 1);
 800234e:	2101      	movs	r1, #1
 8002350:	2000      	movs	r0, #0
 8002352:	f7ff fd53 	bl	8001dfc <LCD_Locate>
		LCD_Int(x);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fd39 	bl	8001dd0 <LCD_Int>
		LCD_Locate(3, 1);
 800235e:	2101      	movs	r1, #1
 8002360:	2003      	movs	r0, #3
 8002362:	f7ff fd4b 	bl	8001dfc <LCD_Locate>
		LCD_Char(0x25);
 8002366:	2025      	movs	r0, #37	; 0x25
 8002368:	f7ff fcc8 	bl	8001cfc <LCD_Char>
		HAL_Delay(300);
 800236c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002370:	f002 f98a 	bl	8004688 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002378:	4806      	ldr	r0, [pc, #24]	; (8002394 <LCD_Display_Humidity_Refresh+0x6c>)
 800237a:	f002 fceb 	bl	8004d54 <HAL_GPIO_ReadPin>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1de      	bne.n	8002342 <LCD_Display_Humidity_Refresh+0x1a>
}
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	0800c9c0 	.word	0x0800c9c0
 8002394:	40011000 	.word	0x40011000

08002398 <GPS_Display_Data_Refresh>:
//
//GPS data value display function
//
void GPS_Display_Data_Refresh(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	uint8_t day;
	uint8_t month;
	uint8_t year;
	LCD_Cls();
 800239e:	f7ff fd4e 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "---  GPS ----");
 80023a2:	4a22      	ldr	r2, [pc, #136]	; (800242c <GPS_Display_Data_Refresh+0x94>)
 80023a4:	2100      	movs	r1, #0
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff fcf2 	bl	8001d90 <LCD_write>



	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 80023ac:	e030      	b.n	8002410 <GPS_Display_Data_Refresh+0x78>
		//NEO6_Task(&GpsState);
		LCD_Menu_Clear();
 80023ae:	f7ff fcd4 	bl	8001d5a <LCD_Menu_Clear>
		day = GpsState.Day ;
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <GPS_Display_Data_Refresh+0x98>)
 80023b4:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80023b8:	71fb      	strb	r3, [r7, #7]
		month = GpsState.Month ;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <GPS_Display_Data_Refresh+0x98>)
 80023bc:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 80023c0:	71bb      	strb	r3, [r7, #6]
		year = GpsState.Year ;
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <GPS_Display_Data_Refresh+0x98>)
 80023c4:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 80023c8:	717b      	strb	r3, [r7, #5]
		LCD_Locate(0, 1);
 80023ca:	2101      	movs	r1, #1
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff fd15 	bl	8001dfc <LCD_Locate>
		LCD_String("Data:");
 80023d2:	4818      	ldr	r0, [pc, #96]	; (8002434 <GPS_Display_Data_Refresh+0x9c>)
 80023d4:	f7ff fcab 	bl	8001d2e <LCD_String>
		LCD_Locate(6, 1);
 80023d8:	2101      	movs	r1, #1
 80023da:	2006      	movs	r0, #6
 80023dc:	f7ff fd0e 	bl	8001dfc <LCD_Locate>
		LCD_Int(day);
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fcf4 	bl	8001dd0 <LCD_Int>
		LCD_Locate(9, 1);
 80023e8:	2101      	movs	r1, #1
 80023ea:	2009      	movs	r0, #9
 80023ec:	f7ff fd06 	bl	8001dfc <LCD_Locate>
		LCD_Int(month);
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fcec 	bl	8001dd0 <LCD_Int>
		LCD_Locate(12, 1);
 80023f8:	2101      	movs	r1, #1
 80023fa:	200c      	movs	r0, #12
 80023fc:	f7ff fcfe 	bl	8001dfc <LCD_Locate>
		LCD_Int(year);
 8002400:	797b      	ldrb	r3, [r7, #5]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fce4 	bl	8001dd0 <LCD_Int>
		HAL_Delay(1000);
 8002408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800240c:	f002 f93c 	bl	8004688 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <GPS_Display_Data_Refresh+0xa0>)
 8002416:	f002 fc9d 	bl	8004d54 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1c6      	bne.n	80023ae <GPS_Display_Data_Refresh+0x16>
		//NEO6_Recive_Data(&GpsState, &huart1);
}
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	0800c9d4 	.word	0x0800c9d4
 8002430:	200003f8 	.word	0x200003f8
 8002434:	0800c9e4 	.word	0x0800c9e4
 8002438:	40011000 	.word	0x40011000

0800243c <GPS_Display_Hour_Refresh>:
//
//GPS hour value display function
//
void GPS_Display_Hour_Refresh(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0

	uint8_t hour;
	uint8_t minute;
	uint8_t second;
	LCD_Cls();
 8002442:	f7ff fcfc 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "---  GPS ----");
 8002446:	4a25      	ldr	r2, [pc, #148]	; (80024dc <GPS_Display_Hour_Refresh+0xa0>)
 8002448:	2100      	movs	r1, #0
 800244a:	2000      	movs	r0, #0
 800244c:	f7ff fca0 	bl	8001d90 <LCD_write>



	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002450:	e036      	b.n	80024c0 <GPS_Display_Hour_Refresh+0x84>
		NEO6_Task(&GpsState);
 8002452:	4823      	ldr	r0, [pc, #140]	; (80024e0 <GPS_Display_Hour_Refresh+0xa4>)
 8002454:	f7ff fa62 	bl	800191c <NEO6_Task>
		LCD_Menu_Clear();
 8002458:	f7ff fc7f 	bl	8001d5a <LCD_Menu_Clear>
		hour = GpsState.Hour ;
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <GPS_Display_Hour_Refresh+0xa4>)
 800245e:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8002462:	71fb      	strb	r3, [r7, #7]
		minute = GpsState.Minute ;
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <GPS_Display_Hour_Refresh+0xa4>)
 8002466:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800246a:	71bb      	strb	r3, [r7, #6]
		second = GpsState.Second;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <GPS_Display_Hour_Refresh+0xa4>)
 800246e:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8002472:	717b      	strb	r3, [r7, #5]
		LCD_Locate(0, 1);
 8002474:	2101      	movs	r1, #1
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff fcc0 	bl	8001dfc <LCD_Locate>
		LCD_String("Hour:");
 800247c:	4819      	ldr	r0, [pc, #100]	; (80024e4 <GPS_Display_Hour_Refresh+0xa8>)
 800247e:	f7ff fc56 	bl	8001d2e <LCD_String>
		LCD_Locate(6, 1);
 8002482:	2101      	movs	r1, #1
 8002484:	2006      	movs	r0, #6
 8002486:	f7ff fcb9 	bl	8001dfc <LCD_Locate>
		LCD_Int(hour);
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fc9f 	bl	8001dd0 <LCD_Int>

		LCD_Locate(9, 1);
 8002492:	2101      	movs	r1, #1
 8002494:	2009      	movs	r0, #9
 8002496:	f7ff fcb1 	bl	8001dfc <LCD_Locate>
		LCD_Int(minute);
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fc97 	bl	8001dd0 <LCD_Int>
		LCD_Locate(12, 1);
 80024a2:	2101      	movs	r1, #1
 80024a4:	200c      	movs	r0, #12
 80024a6:	f7ff fca9 	bl	8001dfc <LCD_Locate>
		LCD_Int(second);
 80024aa:	797b      	ldrb	r3, [r7, #5]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fc8f 	bl	8001dd0 <LCD_Int>
		HAL_Delay(100);
 80024b2:	2064      	movs	r0, #100	; 0x64
 80024b4:	f002 f8e8 	bl	8004688 <HAL_Delay>
		NEO6_Recive_Data(&GpsState, &huart1);
 80024b8:	490b      	ldr	r1, [pc, #44]	; (80024e8 <GPS_Display_Hour_Refresh+0xac>)
 80024ba:	4809      	ldr	r0, [pc, #36]	; (80024e0 <GPS_Display_Hour_Refresh+0xa4>)
 80024bc:	f7ff fabc 	bl	8001a38 <NEO6_Recive_Data>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 80024c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024c4:	4809      	ldr	r0, [pc, #36]	; (80024ec <GPS_Display_Hour_Refresh+0xb0>)
 80024c6:	f002 fc45 	bl	8004d54 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1c0      	bne.n	8002452 <GPS_Display_Hour_Refresh+0x16>
}
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	0800c9d4 	.word	0x0800c9d4
 80024e0:	200003f8 	.word	0x200003f8
 80024e4:	0800c9ec 	.word	0x0800c9ec
 80024e8:	200005e0 	.word	0x200005e0
 80024ec:	40011000 	.word	0x40011000

080024f0 <GPS_Display_SatelitesNumber_Refresh>:
//
//GPS satelites number value display function
//
void GPS_Display_SatelitesNumber_Refresh(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0

	uint8_t satelitenumber;

	LCD_Cls();
 80024f6:	f7ff fca2 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "---  GPS ----");
 80024fa:	4a19      	ldr	r2, [pc, #100]	; (8002560 <GPS_Display_SatelitesNumber_Refresh+0x70>)
 80024fc:	2100      	movs	r1, #0
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fc46 	bl	8001d90 <LCD_write>



	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002504:	e01e      	b.n	8002544 <GPS_Display_SatelitesNumber_Refresh+0x54>
		NEO6_Task(&GpsState);
 8002506:	4817      	ldr	r0, [pc, #92]	; (8002564 <GPS_Display_SatelitesNumber_Refresh+0x74>)
 8002508:	f7ff fa08 	bl	800191c <NEO6_Task>
		LCD_Menu_Clear();
 800250c:	f7ff fc25 	bl	8001d5a <LCD_Menu_Clear>
		satelitenumber = GpsState.SatelitesNumber ;
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <GPS_Display_SatelitesNumber_Refresh+0x74>)
 8002512:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002516:	71fb      	strb	r3, [r7, #7]

		LCD_Locate(0, 1);
 8002518:	2101      	movs	r1, #1
 800251a:	2000      	movs	r0, #0
 800251c:	f7ff fc6e 	bl	8001dfc <LCD_Locate>
		LCD_String("Satelite:");
 8002520:	4811      	ldr	r0, [pc, #68]	; (8002568 <GPS_Display_SatelitesNumber_Refresh+0x78>)
 8002522:	f7ff fc04 	bl	8001d2e <LCD_String>
		LCD_Locate(10, 1);
 8002526:	2101      	movs	r1, #1
 8002528:	200a      	movs	r0, #10
 800252a:	f7ff fc67 	bl	8001dfc <LCD_Locate>
		LCD_Int(satelitenumber);
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fc4d 	bl	8001dd0 <LCD_Int>
		HAL_Delay(100);
 8002536:	2064      	movs	r0, #100	; 0x64
 8002538:	f002 f8a6 	bl	8004688 <HAL_Delay>
		NEO6_Recive_Data(&GpsState, &huart1);
 800253c:	490b      	ldr	r1, [pc, #44]	; (800256c <GPS_Display_SatelitesNumber_Refresh+0x7c>)
 800253e:	4809      	ldr	r0, [pc, #36]	; (8002564 <GPS_Display_SatelitesNumber_Refresh+0x74>)
 8002540:	f7ff fa7a 	bl	8001a38 <NEO6_Recive_Data>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002548:	4809      	ldr	r0, [pc, #36]	; (8002570 <GPS_Display_SatelitesNumber_Refresh+0x80>)
 800254a:	f002 fc03 	bl	8004d54 <HAL_GPIO_ReadPin>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1d8      	bne.n	8002506 <GPS_Display_SatelitesNumber_Refresh+0x16>
}
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	0800c9d4 	.word	0x0800c9d4
 8002564:	200003f8 	.word	0x200003f8
 8002568:	0800c9f4 	.word	0x0800c9f4
 800256c:	200005e0 	.word	0x200005e0
 8002570:	40011000 	.word	0x40011000

08002574 <GPS_Display_Altitude_Refresh>:
//
//GPS altitude value display function
//
void GPS_Display_Altitude_Refresh(void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0

	uint8_t altitude;

	LCD_Cls();
 800257a:	f7ff fc60 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "---  GPS ----");
 800257e:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <GPS_Display_Altitude_Refresh+0x78>)
 8002580:	2100      	movs	r1, #0
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff fc04 	bl	8001d90 <LCD_write>



	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002588:	e023      	b.n	80025d2 <GPS_Display_Altitude_Refresh+0x5e>
		NEO6_Task(&GpsState);
 800258a:	4819      	ldr	r0, [pc, #100]	; (80025f0 <GPS_Display_Altitude_Refresh+0x7c>)
 800258c:	f7ff f9c6 	bl	800191c <NEO6_Task>
		LCD_Menu_Clear();
 8002590:	f7ff fbe3 	bl	8001d5a <LCD_Menu_Clear>
		altitude = GpsState.Altitude ;
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <GPS_Display_Altitude_Refresh+0x7c>)
 8002596:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f7fe fa7d 	bl	8000a9c <__aeabi_d2uiz>
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]

		LCD_Locate(0, 1);
 80025a6:	2101      	movs	r1, #1
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff fc27 	bl	8001dfc <LCD_Locate>
		LCD_String("Altitude:");
 80025ae:	4811      	ldr	r0, [pc, #68]	; (80025f4 <GPS_Display_Altitude_Refresh+0x80>)
 80025b0:	f7ff fbbd 	bl	8001d2e <LCD_String>
		LCD_Locate(10, 1);
 80025b4:	2101      	movs	r1, #1
 80025b6:	200a      	movs	r0, #10
 80025b8:	f7ff fc20 	bl	8001dfc <LCD_Locate>
		LCD_Int(altitude);
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fc06 	bl	8001dd0 <LCD_Int>
		HAL_Delay(100);
 80025c4:	2064      	movs	r0, #100	; 0x64
 80025c6:	f002 f85f 	bl	8004688 <HAL_Delay>
		NEO6_Recive_Data(&GpsState, &huart1);
 80025ca:	490b      	ldr	r1, [pc, #44]	; (80025f8 <GPS_Display_Altitude_Refresh+0x84>)
 80025cc:	4808      	ldr	r0, [pc, #32]	; (80025f0 <GPS_Display_Altitude_Refresh+0x7c>)
 80025ce:	f7ff fa33 	bl	8001a38 <NEO6_Recive_Data>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 80025d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025d6:	4809      	ldr	r0, [pc, #36]	; (80025fc <GPS_Display_Altitude_Refresh+0x88>)
 80025d8:	f002 fbbc 	bl	8004d54 <HAL_GPIO_ReadPin>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1d3      	bne.n	800258a <GPS_Display_Altitude_Refresh+0x16>
}
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	0800c9d4 	.word	0x0800c9d4
 80025f0:	200003f8 	.word	0x200003f8
 80025f4:	0800ca00 	.word	0x0800ca00
 80025f8:	200005e0 	.word	0x200005e0
 80025fc:	40011000 	.word	0x40011000

08002600 <GPS_Display_Latitude_Refresh>:
//
//GPS latitude value display function
//
void GPS_Display_Latitude_Refresh(void) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0

	double latitude;
	char latitudedirection;
	char  numi [15];

	LCD_Cls();
 8002606:	f7ff fc1a 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "---  GPS ----");
 800260a:	4a23      	ldr	r2, [pc, #140]	; (8002698 <GPS_Display_Latitude_Refresh+0x98>)
 800260c:	2100      	movs	r1, #0
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff fbbe 	bl	8001d90 <LCD_write>



	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002614:	e032      	b.n	800267c <GPS_Display_Latitude_Refresh+0x7c>
		NEO6_Task(&GpsState);
 8002616:	4821      	ldr	r0, [pc, #132]	; (800269c <GPS_Display_Latitude_Refresh+0x9c>)
 8002618:	f7ff f980 	bl	800191c <NEO6_Task>

		LCD_Menu_Clear();
 800261c:	f7ff fb9d 	bl	8001d5a <LCD_Menu_Clear>
		latitude = GpsState.Latitude ;
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <GPS_Display_Latitude_Refresh+0x9c>)
 8002622:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8002626:	e9c7 2304 	strd	r2, r3, [r7, #16]
		latitudedirection =  GpsState.LatitudeDirection;
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <GPS_Display_Latitude_Refresh+0x9c>)
 800262c:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8002630:	73fb      	strb	r3, [r7, #15]
		sprintf((char*)numi, "%.2f", latitude);
 8002632:	4638      	mov	r0, r7
 8002634:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002638:	4919      	ldr	r1, [pc, #100]	; (80026a0 <GPS_Display_Latitude_Refresh+0xa0>)
 800263a:	f006 f941 	bl	80088c0 <siprintf>

		LCD_Locate(0, 1);
 800263e:	2101      	movs	r1, #1
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff fbdb 	bl	8001dfc <LCD_Locate>
		LCD_String("Lati:");
 8002646:	4817      	ldr	r0, [pc, #92]	; (80026a4 <GPS_Display_Latitude_Refresh+0xa4>)
 8002648:	f7ff fb71 	bl	8001d2e <LCD_String>
		LCD_Locate(6, 1);
 800264c:	2101      	movs	r1, #1
 800264e:	2006      	movs	r0, #6
 8002650:	f7ff fbd4 	bl	8001dfc <LCD_Locate>
		LCD_String(numi);
 8002654:	463b      	mov	r3, r7
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fb69 	bl	8001d2e <LCD_String>
		LCD_Locate(15, 1);
 800265c:	2101      	movs	r1, #1
 800265e:	200f      	movs	r0, #15
 8002660:	f7ff fbcc 	bl	8001dfc <LCD_Locate>
		LCD_String(&latitudedirection);
 8002664:	f107 030f 	add.w	r3, r7, #15
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fb60 	bl	8001d2e <LCD_String>
		HAL_Delay(100);
 800266e:	2064      	movs	r0, #100	; 0x64
 8002670:	f002 f80a 	bl	8004688 <HAL_Delay>
		NEO6_Recive_Data(&GpsState, &huart1);
 8002674:	490c      	ldr	r1, [pc, #48]	; (80026a8 <GPS_Display_Latitude_Refresh+0xa8>)
 8002676:	4809      	ldr	r0, [pc, #36]	; (800269c <GPS_Display_Latitude_Refresh+0x9c>)
 8002678:	f7ff f9de 	bl	8001a38 <NEO6_Recive_Data>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 800267c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002680:	480a      	ldr	r0, [pc, #40]	; (80026ac <GPS_Display_Latitude_Refresh+0xac>)
 8002682:	f002 fb67 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1c4      	bne.n	8002616 <GPS_Display_Latitude_Refresh+0x16>
}
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	0800c9d4 	.word	0x0800c9d4
 800269c:	200003f8 	.word	0x200003f8
 80026a0:	0800ca0c 	.word	0x0800ca0c
 80026a4:	0800ca14 	.word	0x0800ca14
 80026a8:	200005e0 	.word	0x200005e0
 80026ac:	40011000 	.word	0x40011000

080026b0 <GPS_Display_Longitude_Refresh>:
//
//GPS longitude value display function
//
void GPS_Display_Longitude_Refresh(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0

	double longitude;
	char longitudedirection;
	char  numi [15];

	LCD_Cls();
 80026b6:	f7ff fbc2 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "---  GPS ----");
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <GPS_Display_Longitude_Refresh+0x98>)
 80026bc:	2100      	movs	r1, #0
 80026be:	2000      	movs	r0, #0
 80026c0:	f7ff fb66 	bl	8001d90 <LCD_write>



	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 80026c4:	e032      	b.n	800272c <GPS_Display_Longitude_Refresh+0x7c>
		NEO6_Task(&GpsState);
 80026c6:	4821      	ldr	r0, [pc, #132]	; (800274c <GPS_Display_Longitude_Refresh+0x9c>)
 80026c8:	f7ff f928 	bl	800191c <NEO6_Task>

		LCD_Menu_Clear();
 80026cc:	f7ff fb45 	bl	8001d5a <LCD_Menu_Clear>
		longitude = GpsState.Longitude ;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <GPS_Display_Longitude_Refresh+0x9c>)
 80026d2:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 80026d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		longitudedirection =  GpsState.LongitudeDirection;
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <GPS_Display_Longitude_Refresh+0x9c>)
 80026dc:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80026e0:	73fb      	strb	r3, [r7, #15]
		sprintf((char*)numi, "%.2f", longitude);
 80026e2:	4638      	mov	r0, r7
 80026e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026e8:	4919      	ldr	r1, [pc, #100]	; (8002750 <GPS_Display_Longitude_Refresh+0xa0>)
 80026ea:	f006 f8e9 	bl	80088c0 <siprintf>

		LCD_Locate(0, 1);
 80026ee:	2101      	movs	r1, #1
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff fb83 	bl	8001dfc <LCD_Locate>
		LCD_String("Long:");
 80026f6:	4817      	ldr	r0, [pc, #92]	; (8002754 <GPS_Display_Longitude_Refresh+0xa4>)
 80026f8:	f7ff fb19 	bl	8001d2e <LCD_String>
		LCD_Locate(6, 1);
 80026fc:	2101      	movs	r1, #1
 80026fe:	2006      	movs	r0, #6
 8002700:	f7ff fb7c 	bl	8001dfc <LCD_Locate>
		LCD_String(numi);
 8002704:	463b      	mov	r3, r7
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fb11 	bl	8001d2e <LCD_String>
		LCD_Locate(15, 1);
 800270c:	2101      	movs	r1, #1
 800270e:	200f      	movs	r0, #15
 8002710:	f7ff fb74 	bl	8001dfc <LCD_Locate>
		LCD_String(&longitudedirection);
 8002714:	f107 030f 	add.w	r3, r7, #15
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fb08 	bl	8001d2e <LCD_String>
		HAL_Delay(100);
 800271e:	2064      	movs	r0, #100	; 0x64
 8002720:	f001 ffb2 	bl	8004688 <HAL_Delay>
		NEO6_Recive_Data(&GpsState, &huart1);
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <GPS_Display_Longitude_Refresh+0xa8>)
 8002726:	4809      	ldr	r0, [pc, #36]	; (800274c <GPS_Display_Longitude_Refresh+0x9c>)
 8002728:	f7ff f986 	bl	8001a38 <NEO6_Recive_Data>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 800272c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002730:	480a      	ldr	r0, [pc, #40]	; (800275c <GPS_Display_Longitude_Refresh+0xac>)
 8002732:	f002 fb0f 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1c4      	bne.n	80026c6 <GPS_Display_Longitude_Refresh+0x16>
}
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	0800c9d4 	.word	0x0800c9d4
 800274c:	200003f8 	.word	0x200003f8
 8002750:	0800ca0c 	.word	0x0800ca0c
 8002754:	0800ca1c 	.word	0x0800ca1c
 8002758:	200005e0 	.word	0x200005e0
 800275c:	40011000 	.word	0x40011000

08002760 <GPS_Display_Speed_Refresh>:
//
//GPS speed value display function
//
void GPS_Display_Speed_Refresh(void) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0

	double speedkilometers;
	//char longitudedirection;
	char  numi [15];

	LCD_Cls();
 8002766:	f7ff fb6a 	bl	8001e3e <LCD_Cls>
	LCD_write(0, 0, "---  GPS ----");
 800276a:	4a20      	ldr	r2, [pc, #128]	; (80027ec <GPS_Display_Speed_Refresh+0x8c>)
 800276c:	2100      	movs	r1, #0
 800276e:	2000      	movs	r0, #0
 8002770:	f7ff fb0e 	bl	8001d90 <LCD_write>



	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 8002774:	e02c      	b.n	80027d0 <GPS_Display_Speed_Refresh+0x70>
		NEO6_Task(&GpsState);
 8002776:	481e      	ldr	r0, [pc, #120]	; (80027f0 <GPS_Display_Speed_Refresh+0x90>)
 8002778:	f7ff f8d0 	bl	800191c <NEO6_Task>

		LCD_Menu_Clear();
 800277c:	f7ff faed 	bl	8001d5a <LCD_Menu_Clear>
		speedkilometers = GpsState.SpeedKilometers ;
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <GPS_Display_Speed_Refresh+0x90>)
 8002782:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8002786:	e9c7 2304 	strd	r2, r3, [r7, #16]

		sprintf((char*)numi, "%.2f", speedkilometers);
 800278a:	4638      	mov	r0, r7
 800278c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002790:	4918      	ldr	r1, [pc, #96]	; (80027f4 <GPS_Display_Speed_Refresh+0x94>)
 8002792:	f006 f895 	bl	80088c0 <siprintf>

		LCD_Locate(0, 1);
 8002796:	2101      	movs	r1, #1
 8002798:	2000      	movs	r0, #0
 800279a:	f7ff fb2f 	bl	8001dfc <LCD_Locate>
		LCD_String("Speed:");
 800279e:	4816      	ldr	r0, [pc, #88]	; (80027f8 <GPS_Display_Speed_Refresh+0x98>)
 80027a0:	f7ff fac5 	bl	8001d2e <LCD_String>
		LCD_Locate(6, 1);
 80027a4:	2101      	movs	r1, #1
 80027a6:	2006      	movs	r0, #6
 80027a8:	f7ff fb28 	bl	8001dfc <LCD_Locate>
		LCD_String(numi);
 80027ac:	463b      	mov	r3, r7
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fabd 	bl	8001d2e <LCD_String>
		LCD_Locate(12, 1);
 80027b4:	2101      	movs	r1, #1
 80027b6:	200c      	movs	r0, #12
 80027b8:	f7ff fb20 	bl	8001dfc <LCD_Locate>
		LCD_String("km/h");
 80027bc:	480f      	ldr	r0, [pc, #60]	; (80027fc <GPS_Display_Speed_Refresh+0x9c>)
 80027be:	f7ff fab6 	bl	8001d2e <LCD_String>
		HAL_Delay(100);
 80027c2:	2064      	movs	r0, #100	; 0x64
 80027c4:	f001 ff60 	bl	8004688 <HAL_Delay>
		NEO6_Recive_Data(&GpsState, &huart1);
 80027c8:	490d      	ldr	r1, [pc, #52]	; (8002800 <GPS_Display_Speed_Refresh+0xa0>)
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <GPS_Display_Speed_Refresh+0x90>)
 80027cc:	f7ff f934 	bl	8001a38 <NEO6_Recive_Data>
	while (HAL_GPIO_ReadPin(GPIOC, key_prev_Pin)) {
 80027d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027d4:	480b      	ldr	r0, [pc, #44]	; (8002804 <GPS_Display_Speed_Refresh+0xa4>)
 80027d6:	f002 fabd 	bl	8004d54 <HAL_GPIO_ReadPin>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ca      	bne.n	8002776 <GPS_Display_Speed_Refresh+0x16>
}
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	0800c9d4 	.word	0x0800c9d4
 80027f0:	200003f8 	.word	0x200003f8
 80027f4:	0800ca0c 	.word	0x0800ca0c
 80027f8:	0800ca24 	.word	0x0800ca24
 80027fc:	0800ca2c 	.word	0x0800ca2c
 8002800:	200005e0 	.word	0x200005e0
 8002804:	40011000 	.word	0x40011000

08002808 <GPS_Display_Longitude_Callback>:
	GPS_Display_Speed_Refresh();
}
//
//Function that changes the functions of the button
//
void GPS_Display_Longitude_Callback(void) {
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <GPS_Display_Longitude_Callback+0x24>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <GPS_Display_Longitude_Callback+0x28>)
 8002814:	4a07      	ldr	r2, [pc, #28]	; (8002834 <GPS_Display_Longitude_Callback+0x2c>)
 8002816:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <GPS_Display_Longitude_Callback+0x30>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <GPS_Display_Longitude_Callback+0x34>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
	GPS_Display_Longitude_Refresh();
 8002824:	f7ff ff44 	bl	80026b0 <GPS_Display_Longitude_Refresh>
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200001b8 	.word	0x200001b8
 8002830:	200001c4 	.word	0x200001c4
 8002834:	08001ef1 	.word	0x08001ef1
 8002838:	200001c0 	.word	0x200001c0
 800283c:	200001bc 	.word	0x200001bc

08002840 <GPS_Display_Latitude_Callback>:
//
//Function that changes the functions of the button
//
void GPS_Display_Latitude_Callback(void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <GPS_Display_Latitude_Callback+0x24>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <GPS_Display_Latitude_Callback+0x28>)
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <GPS_Display_Latitude_Callback+0x2c>)
 800284e:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <GPS_Display_Latitude_Callback+0x30>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <GPS_Display_Latitude_Callback+0x34>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
	GPS_Display_Latitude_Refresh();
 800285c:	f7ff fed0 	bl	8002600 <GPS_Display_Latitude_Refresh>
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200001b8 	.word	0x200001b8
 8002868:	200001c4 	.word	0x200001c4
 800286c:	08001ef1 	.word	0x08001ef1
 8002870:	200001c0 	.word	0x200001c0
 8002874:	200001bc 	.word	0x200001bc

08002878 <GPS_Display_Altitude_Callback>:
//
//Function that changes the functions of the button
//
void GPS_Display_Altitude_Callback(void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <GPS_Display_Altitude_Callback+0x24>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <GPS_Display_Altitude_Callback+0x28>)
 8002884:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <GPS_Display_Altitude_Callback+0x2c>)
 8002886:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <GPS_Display_Altitude_Callback+0x30>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <GPS_Display_Altitude_Callback+0x34>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
	GPS_Display_Altitude_Refresh();
 8002894:	f7ff fe6e 	bl	8002574 <GPS_Display_Altitude_Refresh>
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200001b8 	.word	0x200001b8
 80028a0:	200001c4 	.word	0x200001c4
 80028a4:	08001ef1 	.word	0x08001ef1
 80028a8:	200001c0 	.word	0x200001c0
 80028ac:	200001bc 	.word	0x200001bc

080028b0 <GPS_Display_SatelitesNumber_Callback>:
//
//Function that changes the functions of the button
//
void GPS_Display_SatelitesNumber_Callback(void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <GPS_Display_SatelitesNumber_Callback+0x24>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <GPS_Display_SatelitesNumber_Callback+0x28>)
 80028bc:	4a07      	ldr	r2, [pc, #28]	; (80028dc <GPS_Display_SatelitesNumber_Callback+0x2c>)
 80028be:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <GPS_Display_SatelitesNumber_Callback+0x30>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <GPS_Display_SatelitesNumber_Callback+0x34>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
	GPS_Display_SatelitesNumber_Refresh();
 80028cc:	f7ff fe10 	bl	80024f0 <GPS_Display_SatelitesNumber_Refresh>
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200001b8 	.word	0x200001b8
 80028d8:	200001c4 	.word	0x200001c4
 80028dc:	08001ef1 	.word	0x08001ef1
 80028e0:	200001c0 	.word	0x200001c0
 80028e4:	200001bc 	.word	0x200001bc

080028e8 <GPS_Display_Hour_Callback>:
//
//Function that changes the functions of the button
//
void GPS_Display_Hour_Callback(void) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <GPS_Display_Hour_Callback+0x24>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <GPS_Display_Hour_Callback+0x28>)
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <GPS_Display_Hour_Callback+0x2c>)
 80028f6:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <GPS_Display_Hour_Callback+0x30>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <GPS_Display_Hour_Callback+0x34>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
	GPS_Display_Hour_Refresh();
 8002904:	f7ff fd9a 	bl	800243c <GPS_Display_Hour_Refresh>
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200001b8 	.word	0x200001b8
 8002910:	200001c4 	.word	0x200001c4
 8002914:	08001ef1 	.word	0x08001ef1
 8002918:	200001c0 	.word	0x200001c0
 800291c:	200001bc 	.word	0x200001bc

08002920 <GPS_Display_Data_Callback>:
//
//Function that changes the functions of the button
//
void GPS_Display_Data_Callback(void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <GPS_Display_Data_Callback+0x24>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <GPS_Display_Data_Callback+0x28>)
 800292c:	4a07      	ldr	r2, [pc, #28]	; (800294c <GPS_Display_Data_Callback+0x2c>)
 800292e:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <GPS_Display_Data_Callback+0x30>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <GPS_Display_Data_Callback+0x34>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
	GPS_Display_Data_Refresh();
 800293c:	f7ff fd2c 	bl	8002398 <GPS_Display_Data_Refresh>
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200001b8 	.word	0x200001b8
 8002948:	200001c4 	.word	0x200001c4
 800294c:	08001ef1 	.word	0x08001ef1
 8002950:	200001c0 	.word	0x200001c0
 8002954:	200001bc 	.word	0x200001bc

08002958 <LCD_Display_Himidity_Callback>:
//
//Function that changes the functions of the button
//
void LCD_Display_Himidity_Callback(void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <LCD_Display_Himidity_Callback+0x24>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <LCD_Display_Himidity_Callback+0x28>)
 8002964:	4a07      	ldr	r2, [pc, #28]	; (8002984 <LCD_Display_Himidity_Callback+0x2c>)
 8002966:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <LCD_Display_Himidity_Callback+0x30>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <LCD_Display_Himidity_Callback+0x34>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
	LCD_Display_Humidity_Refresh();
 8002974:	f7ff fcd8 	bl	8002328 <LCD_Display_Humidity_Refresh>
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200001b8 	.word	0x200001b8
 8002980:	200001c4 	.word	0x200001c4
 8002984:	08001ef1 	.word	0x08001ef1
 8002988:	200001c0 	.word	0x200001c0
 800298c:	200001bc 	.word	0x200001bc

08002990 <LCD_Display_Temperature_Callback>:
//
//Function that changes the functions of the button
//
void LCD_Display_Temperature_Callback(void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <LCD_Display_Temperature_Callback+0x24>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <LCD_Display_Temperature_Callback+0x28>)
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <LCD_Display_Temperature_Callback+0x2c>)
 800299e:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <LCD_Display_Temperature_Callback+0x30>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <LCD_Display_Temperature_Callback+0x34>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
	LCD_Display_Temperature_Refresh();
 80029ac:	f7ff fc7e 	bl	80022ac <LCD_Display_Temperature_Refresh>
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200001b8 	.word	0x200001b8
 80029b8:	200001c4 	.word	0x200001c4
 80029bc:	08001ef1 	.word	0x08001ef1
 80029c0:	200001c0 	.word	0x200001c0
 80029c4:	200001bc 	.word	0x200001bc

080029c8 <LCD_Display_Compas_Callback>:
//
//Function that changes the functions of the button
//
void LCD_Display_Compas_Callback(void) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <LCD_Display_Compas_Callback+0x24>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <LCD_Display_Compas_Callback+0x28>)
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <LCD_Display_Compas_Callback+0x2c>)
 80029d6:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <LCD_Display_Compas_Callback+0x30>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <LCD_Display_Compas_Callback+0x34>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
	LCD_Display_Compas_Refresh();
 80029e4:	f7ff fb24 	bl	8002030 <LCD_Display_Compas_Refresh>
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200001b8 	.word	0x200001b8
 80029f0:	200001c4 	.word	0x200001c4
 80029f4:	08001ef1 	.word	0x08001ef1
 80029f8:	200001c0 	.word	0x200001c0
 80029fc:	200001bc 	.word	0x200001bc

08002a00 <LCD_Brightness_Callback>:
//
//Function that changes the functions of the button
//
void LCD_Brightness_Callback(void) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	key_next_func = LCD_Brightness_Next;
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <LCD_Brightness_Callback+0x24>)
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <LCD_Brightness_Callback+0x28>)
 8002a08:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <LCD_Brightness_Callback+0x2c>)
 8002a0c:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <LCD_Brightness_Callback+0x30>)
 8002a0e:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <LCD_Brightness_Callback+0x34>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
	key_prev_func = LCD_Brightness_Prev;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <LCD_Brightness_Callback+0x38>)
 8002a18:	4a08      	ldr	r2, [pc, #32]	; (8002a3c <LCD_Brightness_Callback+0x3c>)
 8002a1a:	601a      	str	r2, [r3, #0]
	LCD_Brightness_Refresh();
 8002a1c:	f7ff faa0 	bl	8001f60 <LCD_Brightness_Refresh>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200001b8 	.word	0x200001b8
 8002a28:	08001ec5 	.word	0x08001ec5
 8002a2c:	200001c4 	.word	0x200001c4
 8002a30:	08001ef1 	.word	0x08001ef1
 8002a34:	200001c0 	.word	0x200001c0
 8002a38:	200001bc 	.word	0x200001bc
 8002a3c:	08001f35 	.word	0x08001f35

08002a40 <LCD_Display_Test_Callback>:
//
//Function that changes the functions of the button
//
void LCD_Display_Test_Callback(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	key_next_func = NULL;
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <LCD_Display_Test_Callback+0x24>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
	key_back_func = LCD_Brightness_Back;
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <LCD_Display_Test_Callback+0x28>)
 8002a4c:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <LCD_Display_Test_Callback+0x2c>)
 8002a4e:	601a      	str	r2, [r3, #0]
	key_enter_func = NULL;
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <LCD_Display_Test_Callback+0x30>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
	key_prev_func = NULL;
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <LCD_Display_Test_Callback+0x34>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
	LCD_Display_Test_Refresh();
 8002a5c:	f7ff faa2 	bl	8001fa4 <LCD_Display_Test_Refresh>
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200001b8 	.word	0x200001b8
 8002a68:	200001c4 	.word	0x200001c4
 8002a6c:	08001ef1 	.word	0x08001ef1
 8002a70:	200001c0 	.word	0x200001c0
 8002a74:	200001bc 	.word	0x200001bc

08002a78 <ButtonEnterInitKey>:

#include "main.h"
#include "button.h"

//init button
void ButtonEnterInitKey(buttonenter_t* Key, GPIO_TypeDef 	*GpioPort, uint16_t  GpioPin, uint32_t 	TimerDebounce){
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	80fb      	strh	r3, [r7, #6]
	Key -> State = IDLE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
	Key ->  GpioPort = GpioPort;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	605a      	str	r2, [r3, #4]
	Key ->GpioPin = GpioPin;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	811a      	strh	r2, [r3, #8]
	Key -> TimerDebounce = TimerDebounce;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	60da      	str	r2, [r3, #12]

}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <ButtonBackInitKey>:
void ButtonBackInitKey(buttonback_t* Key, GPIO_TypeDef 	*GpioPort, uint16_t  GpioPin, uint32_t 	TimerDebounce){
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
	Key -> State = IDLE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
	Key ->  GpioPort = GpioPort;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	605a      	str	r2, [r3, #4]
	Key ->GpioPin = GpioPin;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	811a      	strh	r2, [r3, #8]
	Key -> TimerDebounce = TimerDebounce;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	60da      	str	r2, [r3, #12]

}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <ButtonPrevInitKey>:
void ButtonPrevInitKey(buttonprev_t* Key, GPIO_TypeDef 	*GpioPort, uint16_t  GpioPin, uint32_t 	TimerDebounce){
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	80fb      	strh	r3, [r7, #6]
	Key -> State = IDLE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
	Key ->  GpioPort = GpioPort;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	605a      	str	r2, [r3, #4]
	Key ->GpioPin = GpioPin;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	811a      	strh	r2, [r3, #8]
	Key -> TimerDebounce = TimerDebounce;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	60da      	str	r2, [r3, #12]

}void ButtonNextInitKey(buttonnext_t* Key, GPIO_TypeDef 	*GpioPort, uint16_t  GpioPin, uint32_t 	TimerDebounce){
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <ButtonNextInitKey>:
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
	Key -> State = IDLE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
	Key ->  GpioPort = GpioPort;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	605a      	str	r2, [r3, #4]
	Key ->GpioPin = GpioPin;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	811a      	strh	r2, [r3, #8]
	Key -> TimerDebounce = TimerDebounce;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	60da      	str	r2, [r3, #12]

}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <ButtonBackPressCallback>:

//function time setting

//Register callbacks
void ButtonBackPressCallback(buttonback_t* Key, void *Callback){
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
	Key->key_back_press = Callback;
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	615a      	str	r2, [r3, #20]

}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <ButtonNextPressCallback>:
void ButtonNextPressCallback(buttonnext_t* Key, void *Callback){
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
	Key->key_next_press = Callback;
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	615a      	str	r2, [r3, #20]

}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <ButtonPrevPressCallback>:
void ButtonPrevPressCallback(buttonprev_t* Key, void *Callback){
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	Key->key_prev_press = Callback;
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	615a      	str	r2, [r3, #20]

}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <ButtonEnterPressCallback>:
void ButtonEnterPressCallback(buttonenter_t* Key, void *Callback){
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
	Key->key_enter_press = Callback;
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	615a      	str	r2, [r3, #20]

}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <ButtonNextIdleRoutine>:
//states for next button
void ButtonNextIdleRoutine(buttonnext_t* Key){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Key->GpioPort , Key->GpioPin)){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	891b      	ldrh	r3, [r3, #8]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f002 f8ca 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <ButtonNextIdleRoutine+0x2e>
	Key->State = DEBOUNCE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
	Key ->LastTick = HAL_GetTick();
 8002bcc:	f001 fd52 	bl	8004674 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]
}
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ButtonNextPressedRoutine>:
void ButtonNextPressedRoutine(buttonnext_t* Key){
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(Key->GpioPort , Key->GpioPin)){
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	891b      	ldrh	r3, [r3, #8]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f002 f8af 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <ButtonNextPressedRoutine+0x24>
		Key->State = IDLE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
	}
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <ButtonNextDebounceRoutine>:
void ButtonNextDebounceRoutine(buttonnext_t* Key)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
	if ((HAL_GetTick() - Key ->LastTick) > Key ->TimerDebounce){
 8002c12:	f001 fd2f 	bl	8004674 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	1ad2      	subs	r2, r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d914      	bls.n	8002c50 <ButtonNextDebounceRoutine+0x46>
		if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Key->GpioPort , Key->GpioPin))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	891b      	ldrh	r3, [r3, #8]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f002 f88f 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <ButtonNextDebounceRoutine+0x40>
		{
			Key-> State = PRESSED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	701a      	strb	r2, [r3, #0]
			//if (Key->key_next_press != NULL)
			//{
				Key->key_next_press();
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4798      	blx	r3
		}
		else {
			Key->State = IDLE;
		}
	}
}
 8002c48:	e002      	b.n	8002c50 <ButtonNextDebounceRoutine+0x46>
			Key->State = IDLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <ButtonNextTask>:
//states Machine for Next Button
void ButtonNextTask(buttonnext_t* Key){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

	switch(Key-> State){
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d00e      	beq.n	8002c86 <ButtonNextTask+0x2e>
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	dc10      	bgt.n	8002c8e <ButtonNextTask+0x36>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <ButtonNextTask+0x1e>
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d004      	beq.n	8002c7e <ButtonNextTask+0x26>
	case PRESSED:
		ButtonNextPressedRoutine( Key);
		break;

	}
}
 8002c74:	e00b      	b.n	8002c8e <ButtonNextTask+0x36>
		ButtonNextIdleRoutine( Key);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ff96 	bl	8002ba8 <ButtonNextIdleRoutine>
		break;
 8002c7c:	e007      	b.n	8002c8e <ButtonNextTask+0x36>
		ButtonNextDebounceRoutine( Key);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffc3 	bl	8002c0a <ButtonNextDebounceRoutine>
		break;
 8002c84:	e003      	b.n	8002c8e <ButtonNextTask+0x36>
		ButtonNextPressedRoutine( Key);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ffa9 	bl	8002bde <ButtonNextPressedRoutine>
		break;
 8002c8c:	bf00      	nop
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ButtonEnterIdleRoutine>:

//states for Enter button
void ButtonEnterIdleRoutine(buttonenter_t *Key) {
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin)) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	891b      	ldrh	r3, [r3, #8]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f002 f853 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <ButtonEnterIdleRoutine+0x2e>
		Key->State = DEBOUNCE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
		Key->LastTick = HAL_GetTick();
 8002cba:	f001 fcdb 	bl	8004674 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	611a      	str	r2, [r3, #16]
	}
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <ButtonEnterPressedRoutine>:
void ButtonEnterPressedRoutine(buttonenter_t *Key) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin)) {
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	891b      	ldrh	r3, [r3, #8]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f002 f838 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <ButtonEnterPressedRoutine+0x24>
		Key->State = IDLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <ButtonEnterDebounceRoutine>:
void ButtonEnterDebounceRoutine(buttonenter_t *Key) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	if ((HAL_GetTick() - Key->LastTick) > Key->TimerDebounce) {
 8002d00:	f001 fcb8 	bl	8004674 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	1ad2      	subs	r2, r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d914      	bls.n	8002d3e <ButtonEnterDebounceRoutine+0x46>
		if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin)) {
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	891b      	ldrh	r3, [r3, #8]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f002 f818 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <ButtonEnterDebounceRoutine+0x40>
			Key->State = PRESSED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
			//if (Key->key_enter_press != NULL) {
				Key->key_enter_press();
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	4798      	blx	r3

		} else {
			Key->State = IDLE;
		}
	}
}
 8002d36:	e002      	b.n	8002d3e <ButtonEnterDebounceRoutine+0x46>
			Key->State = IDLE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <ButtonEnterTask>:
//states Machine for Enter Button
void ButtonEnterTask(buttonenter_t *Key) {
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]

	switch (Key->State) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d00e      	beq.n	8002d74 <ButtonEnterTask+0x2e>
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	dc10      	bgt.n	8002d7c <ButtonEnterTask+0x36>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <ButtonEnterTask+0x1e>
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d004      	beq.n	8002d6c <ButtonEnterTask+0x26>
	case PRESSED:
		ButtonEnterPressedRoutine(Key);
		break;

	}
}
 8002d62:	e00b      	b.n	8002d7c <ButtonEnterTask+0x36>
		ButtonEnterIdleRoutine(Key);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff96 	bl	8002c96 <ButtonEnterIdleRoutine>
		break;
 8002d6a:	e007      	b.n	8002d7c <ButtonEnterTask+0x36>
		ButtonEnterDebounceRoutine(Key);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffc3 	bl	8002cf8 <ButtonEnterDebounceRoutine>
		break;
 8002d72:	e003      	b.n	8002d7c <ButtonEnterTask+0x36>
		ButtonEnterPressedRoutine(Key);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ffa9 	bl	8002ccc <ButtonEnterPressedRoutine>
		break;
 8002d7a:	bf00      	nop
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <ButtonBackIdleRoutine>:

//states for Back button
void ButtonBackIdleRoutine(buttonback_t *Key) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin)) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	891b      	ldrh	r3, [r3, #8]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f001 ffdc 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <ButtonBackIdleRoutine+0x2e>
		Key->State = DEBOUNCE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
		Key->LastTick = HAL_GetTick();
 8002da8:	f001 fc64 	bl	8004674 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	611a      	str	r2, [r3, #16]
	}
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <ButtonBackPressedRoutine>:
void ButtonBackPressedRoutine(buttonback_t *Key) {
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin)) {
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	891b      	ldrh	r3, [r3, #8]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f001 ffc1 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d102      	bne.n	8002dde <ButtonBackPressedRoutine+0x24>
		Key->State = IDLE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
	}
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ButtonBackDebounceRoutine>:
void ButtonBackDebounceRoutine(buttonback_t *Key) {
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
	if ((HAL_GetTick() - Key->LastTick) > Key->TimerDebounce) {
 8002dee:	f001 fc41 	bl	8004674 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	1ad2      	subs	r2, r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d914      	bls.n	8002e2c <ButtonBackDebounceRoutine+0x46>
		if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin)) {
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	891b      	ldrh	r3, [r3, #8]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f001 ffa1 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <ButtonBackDebounceRoutine+0x40>
			Key->State = PRESSED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	701a      	strb	r2, [r3, #0]
			//if (Key->key_back_press != NULL) {
				Key->key_back_press();
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4798      	blx	r3

		} else {
			Key->State = IDLE;
		}
	}
}
 8002e24:	e002      	b.n	8002e2c <ButtonBackDebounceRoutine+0x46>
			Key->State = IDLE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <ButtonBackTask>:
//states Machine for Back Button
void ButtonBackTask(buttonback_t* Key){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

	switch(Key-> State){
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d00e      	beq.n	8002e62 <ButtonBackTask+0x2e>
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	dc10      	bgt.n	8002e6a <ButtonBackTask+0x36>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <ButtonBackTask+0x1e>
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d004      	beq.n	8002e5a <ButtonBackTask+0x26>
	case PRESSED:
		ButtonBackPressedRoutine( Key);
		break;

	}
}
 8002e50:	e00b      	b.n	8002e6a <ButtonBackTask+0x36>
		ButtonBackIdleRoutine( Key);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ff96 	bl	8002d84 <ButtonBackIdleRoutine>
		break;
 8002e58:	e007      	b.n	8002e6a <ButtonBackTask+0x36>
		ButtonBackDebounceRoutine( Key);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffc3 	bl	8002de6 <ButtonBackDebounceRoutine>
		break;
 8002e60:	e003      	b.n	8002e6a <ButtonBackTask+0x36>
		ButtonBackPressedRoutine( Key);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ffa9 	bl	8002dba <ButtonBackPressedRoutine>
		break;
 8002e68:	bf00      	nop
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <ButtonPrevIdleRoutine>:

//states for Prev button
void ButtonPrevIdleRoutine(buttonprev_t* Key){
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Key->GpioPort , Key->GpioPin)){
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	891b      	ldrh	r3, [r3, #8]
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f001 ff65 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d107      	bne.n	8002ea0 <ButtonPrevIdleRoutine+0x2e>
	Key->State = DEBOUNCE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
	Key ->LastTick = HAL_GetTick();
 8002e96:	f001 fbed 	bl	8004674 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	611a      	str	r2, [r3, #16]
}
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <ButtonPrevPressedRoutine>:
void ButtonPrevPressedRoutine(buttonprev_t* Key){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(Key->GpioPort , Key->GpioPin)){
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	891b      	ldrh	r3, [r3, #8]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f001 ff4a 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d102      	bne.n	8002ecc <ButtonPrevPressedRoutine+0x24>
		Key->State = IDLE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
	}
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <ButtonPrevDebounceRoutine>:
void ButtonPrevDebounceRoutine(buttonprev_t* Key)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	if ((HAL_GetTick() - Key ->LastTick) > Key ->TimerDebounce){
 8002edc:	f001 fbca 	bl	8004674 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	1ad2      	subs	r2, r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d914      	bls.n	8002f1a <ButtonPrevDebounceRoutine+0x46>
		if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Key->GpioPort , Key->GpioPin))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	891b      	ldrh	r3, [r3, #8]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f001 ff2a 	bl	8004d54 <HAL_GPIO_ReadPin>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <ButtonPrevDebounceRoutine+0x40>
		{
			Key-> State = PRESSED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	701a      	strb	r2, [r3, #0]
			//if (Key->key_prev_press != NULL)
			//{
				Key->key_prev_press();
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	4798      	blx	r3
		}
		else {
			Key->State = IDLE;
		}
	}
}
 8002f12:	e002      	b.n	8002f1a <ButtonPrevDebounceRoutine+0x46>
			Key->State = IDLE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <ButtonPrevTask>:
//states Machine for Prev Button
void ButtonPrevTask(buttonprev_t* Key){
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]

	switch(Key-> State){
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d00e      	beq.n	8002f50 <ButtonPrevTask+0x2e>
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	dc10      	bgt.n	8002f58 <ButtonPrevTask+0x36>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <ButtonPrevTask+0x1e>
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d004      	beq.n	8002f48 <ButtonPrevTask+0x26>
	case PRESSED:
		ButtonPrevPressedRoutine( Key);
		break;

	}
}
 8002f3e:	e00b      	b.n	8002f58 <ButtonPrevTask+0x36>
		ButtonPrevIdleRoutine( Key);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff96 	bl	8002e72 <ButtonPrevIdleRoutine>
		break;
 8002f46:	e007      	b.n	8002f58 <ButtonPrevTask+0x36>
		ButtonPrevDebounceRoutine( Key);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ffc3 	bl	8002ed4 <ButtonPrevDebounceRoutine>
		break;
 8002f4e:	e003      	b.n	8002f58 <ButtonPrevTask+0x36>
		ButtonPrevPressedRoutine( Key);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ffa9 	bl	8002ea8 <ButtonPrevPressedRoutine>
		break;
 8002f56:	bf00      	nop
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f74:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	4a5b      	ldr	r2, [pc, #364]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002f7a:	f043 0310 	orr.w	r3, r3, #16
 8002f7e:	6193      	str	r3, [r2, #24]
 8002f80:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8c:	4b56      	ldr	r3, [pc, #344]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	4a55      	ldr	r2, [pc, #340]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	6193      	str	r3, [r2, #24]
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a4f      	ldr	r2, [pc, #316]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fbc:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	4a49      	ldr	r2, [pc, #292]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002fc2:	f043 0308 	orr.w	r3, r3, #8
 8002fc6:	6193      	str	r3, [r2, #24]
 8002fc8:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <MX_GPIO_Init+0x188>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	210b      	movs	r1, #11
 8002fd8:	4844      	ldr	r0, [pc, #272]	; (80030ec <MX_GPIO_Init+0x18c>)
 8002fda:	f001 fed2 	bl	8004d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2120      	movs	r1, #32
 8002fe2:	4843      	ldr	r0, [pc, #268]	; (80030f0 <MX_GPIO_Init+0x190>)
 8002fe4:	f001 fecd 	bl	8004d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	21f0      	movs	r1, #240	; 0xf0
 8002fec:	4841      	ldr	r0, [pc, #260]	; (80030f4 <MX_GPIO_Init+0x194>)
 8002fee:	f001 fec8 	bl	8004d82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = key_enter_Pin;
 8002ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <MX_GPIO_Init+0x198>)
 8002ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(key_enter_GPIO_Port, &GPIO_InitStruct);
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	4619      	mov	r1, r3
 8003006:	4839      	ldr	r0, [pc, #228]	; (80030ec <MX_GPIO_Init+0x18c>)
 8003008:	f001 fd20 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin|LCD_RW_Pin;
 800300c:	230b      	movs	r3, #11
 800300e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003010:	2301      	movs	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2302      	movs	r3, #2
 800301a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4619      	mov	r1, r3
 8003022:	4832      	ldr	r0, [pc, #200]	; (80030ec <MX_GPIO_Init+0x18c>)
 8003024:	f001 fd12 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC4 PC5 PC6
                           PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003028:	f44f 737d 	mov.w	r3, #1012	; 0x3f4
 800302c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800302e:	2303      	movs	r3, #3
 8003030:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003032:	f107 0310 	add.w	r3, r7, #16
 8003036:	4619      	mov	r1, r3
 8003038:	482c      	ldr	r0, [pc, #176]	; (80030ec <MX_GPIO_Init+0x18c>)
 800303a:	f001 fd07 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 800303e:	f649 13d2 	movw	r3, #39378	; 0x99d2
 8003042:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003044:	2303      	movs	r3, #3
 8003046:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003048:	f107 0310 	add.w	r3, r7, #16
 800304c:	4619      	mov	r1, r3
 800304e:	4828      	ldr	r0, [pc, #160]	; (80030f0 <MX_GPIO_Init+0x190>)
 8003050:	f001 fcfc 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003054:	2320      	movs	r3, #32
 8003056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003058:	2301      	movs	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2302      	movs	r3, #2
 8003062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003064:	f107 0310 	add.w	r3, r7, #16
 8003068:	4619      	mov	r1, r3
 800306a:	4821      	ldr	r0, [pc, #132]	; (80030f0 <MX_GPIO_Init+0x190>)
 800306c:	f001 fcee 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003070:	f64f 4307 	movw	r3, #64519	; 0xfc07
 8003074:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003076:	2303      	movs	r3, #3
 8003078:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	4619      	mov	r1, r3
 8003080:	481c      	ldr	r0, [pc, #112]	; (80030f4 <MX_GPIO_Init+0x194>)
 8003082:	f001 fce3 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = key_enterC10_Pin|key_prev_Pin|key_next_Pin;
 8003086:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800308a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003094:	f107 0310 	add.w	r3, r7, #16
 8003098:	4619      	mov	r1, r3
 800309a:	4814      	ldr	r0, [pc, #80]	; (80030ec <MX_GPIO_Init+0x18c>)
 800309c:	f001 fcd6 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030a0:	2304      	movs	r3, #4
 80030a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030a4:	2303      	movs	r3, #3
 80030a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a8:	f107 0310 	add.w	r3, r7, #16
 80030ac:	4619      	mov	r1, r3
 80030ae:	4813      	ldr	r0, [pc, #76]	; (80030fc <MX_GPIO_Init+0x19c>)
 80030b0:	f001 fccc 	bl	8004a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 80030b4:	23f0      	movs	r3, #240	; 0xf0
 80030b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	4619      	mov	r1, r3
 80030ca:	480a      	ldr	r0, [pc, #40]	; (80030f4 <MX_GPIO_Init+0x194>)
 80030cc:	f001 fcbe 	bl	8004a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2100      	movs	r1, #0
 80030d4:	2028      	movs	r0, #40	; 0x28
 80030d6:	f001 fbd2 	bl	800487e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030da:	2028      	movs	r0, #40	; 0x28
 80030dc:	f001 fbeb 	bl	80048b6 <HAL_NVIC_EnableIRQ>

}
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40011000 	.word	0x40011000
 80030f0:	40010800 	.word	0x40010800
 80030f4:	40010c00 	.word	0x40010c00
 80030f8:	10110000 	.word	0x10110000
 80030fc:	40011400 	.word	0x40011400

08003100 <Read8>:
HMC5883L_t Hmc5883l;
/*
 * Function Read 8-bit data register
 */
uint8_t Read8(HMC5883L_t *hmc , uint8_t Register)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af04      	add	r7, sp, #16
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(hmc->hmc5883l_i2c, (hmc->Address)<<1, Register, 1, &Value, 1,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	791b      	ldrb	r3, [r3, #4]
 8003114:	b29b      	uxth	r3, r3
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	b299      	uxth	r1, r3
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	b29a      	uxth	r2, r3
 800311e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003122:	9302      	str	r3, [sp, #8]
 8003124:	2301      	movs	r3, #1
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	f107 030f 	add.w	r3, r7, #15
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2301      	movs	r3, #1
 8003130:	f002 f8b8 	bl	80052a4 <HAL_I2C_Mem_Read>
			HMC5883L_i2c_timeout);
	return Value;
 8003134:	7bfb      	ldrb	r3, [r7, #15]

}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HMC5883L_getHeadingX>:
	return ((Value[1] << 8) | Value[0]);
}
/*
 * Reads the X axis value register
 */
int16_t HMC5883L_getHeadingX(HMC5883L_t *hmc, uint8_t Register) {
 800313e:	b580      	push	{r7, lr}
 8003140:	b088      	sub	sp, #32
 8003142:	af04      	add	r7, sp, #16
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	70fb      	strb	r3, [r7, #3]

	uint8_t Value[6];
	HAL_I2C_Mem_Read(hmc->hmc5883l_i2c, (hmc->Address) << 1, Register, 1, Value,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	791b      	ldrb	r3, [r3, #4]
 8003152:	b29b      	uxth	r3, r3
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	b299      	uxth	r1, r3
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	b29a      	uxth	r2, r3
 800315c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003160:	9302      	str	r3, [sp, #8]
 8003162:	2306      	movs	r3, #6
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2301      	movs	r3, #1
 800316e:	f002 f899 	bl	80052a4 <HAL_I2C_Mem_Read>
			6, HMC5883L_i2c_timeout);

	return (((int16_t) Value[0]) << 8) | Value[1];
 8003172:	7a3b      	ldrb	r3, [r7, #8]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	b21a      	sxth	r2, r3
 8003178:	7a7b      	ldrb	r3, [r7, #9]
 800317a:	b21b      	sxth	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b21b      	sxth	r3, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HMC5883L_getHeadingZ>:
/*
 * Reads the Z axis value register
 */
int16_t HMC5883L_getHeadingZ(HMC5883L_t *hmc, uint8_t Register) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af04      	add	r7, sp, #16
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[6];
	HAL_I2C_Mem_Read(hmc->hmc5883l_i2c, (hmc->Address) << 1, Register, 1, Value,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	791b      	ldrb	r3, [r3, #4]
 800319c:	b29b      	uxth	r3, r3
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	b299      	uxth	r1, r3
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031aa:	9302      	str	r3, [sp, #8]
 80031ac:	2306      	movs	r3, #6
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2301      	movs	r3, #1
 80031b8:	f002 f874 	bl	80052a4 <HAL_I2C_Mem_Read>
			6, HMC5883L_i2c_timeout);

	return (((int16_t) Value[2]) << 8) | Value[3];
 80031bc:	7abb      	ldrb	r3, [r7, #10]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b21a      	sxth	r2, r3
 80031c2:	7afb      	ldrb	r3, [r7, #11]
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b21b      	sxth	r3, r3
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HMC5883L_getHeadingY>:
/*
 * Reads the Y axis value register
 */
int16_t HMC5883L_getHeadingY(HMC5883L_t *hmc, uint8_t Register) {
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b088      	sub	sp, #32
 80031d6:	af04      	add	r7, sp, #16
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[6];
	HAL_I2C_Mem_Read(hmc->hmc5883l_i2c, (hmc->Address) << 1, Register, 1, Value,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	791b      	ldrb	r3, [r3, #4]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	b299      	uxth	r1, r3
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f4:	9302      	str	r3, [sp, #8]
 80031f6:	2306      	movs	r3, #6
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	f107 0308 	add.w	r3, r7, #8
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2301      	movs	r3, #1
 8003202:	f002 f84f 	bl	80052a4 <HAL_I2C_Mem_Read>
			6, HMC5883L_i2c_timeout);

	return (((int16_t) Value[4]) << 8) | Value[5];
 8003206:	7b3b      	ldrb	r3, [r7, #12]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	b21a      	sxth	r2, r3
 800320c:	7b7b      	ldrb	r3, [r7, #13]
 800320e:	b21b      	sxth	r3, r3
 8003210:	4313      	orrs	r3, r2
 8003212:	b21b      	sxth	r3, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <Write8>:
/*
 * Writes 8 bit to register
 */
void Write8(HMC5883L_t *hmc , uint8_t Register , uint8_t Value)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af04      	add	r7, sp, #16
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
 8003228:	4613      	mov	r3, r2
 800322a:	70bb      	strb	r3, [r7, #2]

	HAL_I2C_Mem_Write(hmc->hmc5883l_i2c, (hmc->Address)<<1, Register, 1, &Value, 1,HMC5883L_i2c_timeout);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	791b      	ldrb	r3, [r3, #4]
 8003234:	b29b      	uxth	r3, r3
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	b299      	uxth	r1, r3
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	b29a      	uxth	r2, r3
 800323e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003242:	9302      	str	r3, [sp, #8]
 8003244:	2301      	movs	r3, #1
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	1cbb      	adds	r3, r7, #2
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2301      	movs	r3, #1
 800324e:	f001 ff2f 	bl	80050b0 <HAL_I2C_Mem_Write>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HMC5883L_MeasureMode>:
// Configuration register A for HMC5883L

void HMC5883L_MeasureMode(HMC5883L_t *hmc , uint8_t Mode)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;
	if(Mode>3) Mode =3;
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d901      	bls.n	8003270 <HMC5883L_MeasureMode+0x16>
 800326c:	2303      	movs	r3, #3
 800326e:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(hmc , HMC5883L_RA_CONFIG_A );
 8003270:	2100      	movs	r1, #0
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ff44 	bl	8003100 <Read8>
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]
	Tmp = Tmp |(Mode  << 0)	;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	4313      	orrs	r3, r2
 8003282:	73fb      	strb	r3, [r7, #15]
	//Tmp = Tmp & 0xFC;
	//Tmp |= Mode ;

	Write8(hmc , HMC5883L_RA_CONFIG_A  ,Tmp);
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	461a      	mov	r2, r3
 8003288:	2100      	movs	r1, #0
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ffc6 	bl	800321c <Write8>
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HMC5883L_DataOutputRate>:
 * 5     | 30
 * 6     | 75
 * 7     | Not used
 *
 */
void HMC5883L_DataOutputRate(HMC5883L_t *hmc , uint8_t Mode){
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;
	Tmp = Read8(hmc , HMC5883L_RA_CONFIG_A );
 80032a4:	2100      	movs	r1, #0
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ff2a 	bl	8003100 <Read8>
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]
	Tmp = Tmp |(Mode << 2 )	;			// a = a | (1 << 3)
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	b25a      	sxtb	r2, r3
 80032b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	73fb      	strb	r3, [r7, #15]

	Write8(hmc , HMC5883L_RA_CONFIG_A  ,Tmp);
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	461a      	mov	r2, r3
 80032c4:	2100      	movs	r1, #0
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ffa8 	bl	800321c <Write8>

}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HMC5883L_SamplesAveraged>:

void HMC5883L_SamplesAveraged(HMC5883L_t *hmc , uint8_t Mode){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;
	Tmp = Read8(hmc , HMC5883L_RA_CONFIG_A );
 80032e0:	2100      	movs	r1, #0
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff0c 	bl	8003100 <Read8>
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]
	Tmp = Tmp |(Mode << 5 )	;			// a = a | (1 << 3)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	015b      	lsls	r3, r3, #5
 80032f0:	b25a      	sxtb	r2, r3
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	73fb      	strb	r3, [r7, #15]

	Write8(hmc , HMC5883L_RA_CONFIG_A  ,Tmp);
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	461a      	mov	r2, r3
 8003300:	2100      	movs	r1, #0
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff8a 	bl	800321c <Write8>

}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HMC5883L_Gain>:
// Configuration register B for HMC5883L
void HMC5883L_Gain(HMC5883L_t *hmc , uint8_t Mode){
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;
	Tmp = Read8(hmc , HMC5883L_RA_CONFIG_B );
 800331c:	2101      	movs	r1, #1
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff feee 	bl	8003100 <Read8>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]
	Tmp = Tmp |(Mode << 5 )	;			// a = a | (1 << 3)
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	015b      	lsls	r3, r3, #5
 800332c:	b25a      	sxtb	r2, r3
 800332e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003332:	4313      	orrs	r3, r2
 8003334:	b25b      	sxtb	r3, r3
 8003336:	73fb      	strb	r3, [r7, #15]

	Write8(hmc , HMC5883L_RA_CONFIG_B  ,Tmp);
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	461a      	mov	r2, r3
 800333c:	2101      	movs	r1, #1
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff6c 	bl	800321c <Write8>

}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HMC5883L_OperatingMode>:
/*
 * 		HMC5883L_MODE_CONTINUOUS
 	 	HMC5883L_MODE_SINGLE
 	 	HMC5883L_MODE_IDLE
 */
void HMC5883L_OperatingMode(HMC5883L_t *hmc , uint8_t Mode){
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;
	Tmp = Read8(hmc , HMC5883L_RA_MODE  );
 8003358:	2102      	movs	r1, #2
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff fed0 	bl	8003100 <Read8>
 8003360:	4603      	mov	r3, r0
 8003362:	73fb      	strb	r3, [r7, #15]
	Tmp =  Mode	;			// a = a | (1 << 3)
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	73fb      	strb	r3, [r7, #15]

	Write8(hmc , HMC5883L_RA_MODE   ,Tmp);
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	461a      	mov	r2, r3
 800336c:	2102      	movs	r1, #2
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ff54 	bl	800321c <Write8>

}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	0000      	movs	r0, r0
	...

08003380 <Direction_Radians>:
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */


float Direction_Radians(HMC5883L_t *hmc) {
 8003380:	b5b0      	push	{r4, r5, r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	float X;
	float Y;
	float XY;
	float declinationAngle = (6.0 + (24.0 / 60.0)) / (180 / PI);
 8003388:	4b37      	ldr	r3, [pc, #220]	; (8003468 <Direction_Radians+0xe8>)
 800338a:	613b      	str	r3, [r7, #16]
	X = HMC5883L_getHeadingX(hmc, HMC5883L_RA_DATAX_H);
 800338c:	2103      	movs	r1, #3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fed5 	bl	800313e <HMC5883L_getHeadingX>
 8003394:	4603      	mov	r3, r0
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fcaa 	bl	8000cf0 <__aeabi_i2f>
 800339c:	4603      	mov	r3, r0
 800339e:	60fb      	str	r3, [r7, #12]
	Y = HMC5883L_getHeadingY(hmc, HMC5883L_RA_DATAX_H);
 80033a0:	2103      	movs	r1, #3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ff15 	bl	80031d2 <HMC5883L_getHeadingY>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fca0 	bl	8000cf0 <__aeabi_i2f>
 80033b0:	4603      	mov	r3, r0
 80033b2:	60bb      	str	r3, [r7, #8]
	XY = atan2(Y, X) ;
 80033b4:	68b8      	ldr	r0, [r7, #8]
 80033b6:	f7fd f841 	bl	800043c <__aeabi_f2d>
 80033ba:	4604      	mov	r4, r0
 80033bc:	460d      	mov	r5, r1
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7fd f83c 	bl	800043c <__aeabi_f2d>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4620      	mov	r0, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	f009 f832 	bl	800c434 <atan2>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7fd fb80 	bl	8000adc <__aeabi_d2f>
 80033dc:	4603      	mov	r3, r0
 80033de:	617b      	str	r3, [r7, #20]
	XY += declinationAngle;
 80033e0:	6939      	ldr	r1, [r7, #16]
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7fd fbd0 	bl	8000b88 <__addsf3>
 80033e8:	4603      	mov	r3, r0
 80033ea:	617b      	str	r3, [r7, #20]

	if (XY < 0)
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	6978      	ldr	r0, [r7, #20]
 80033f2:	f7fd fd1f 	bl	8000e34 <__aeabi_fcmplt>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00f      	beq.n	800341c <Direction_Radians+0x9c>
	  {
		XY += 2 * PI;
 80033fc:	6978      	ldr	r0, [r7, #20]
 80033fe:	f7fd f81d 	bl	800043c <__aeabi_f2d>
 8003402:	a317      	add	r3, pc, #92	; (adr r3, 8003460 <Direction_Radians+0xe0>)
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f7fc feba 	bl	8000180 <__adddf3>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	f7fd fb62 	bl	8000adc <__aeabi_d2f>
 8003418:	4603      	mov	r3, r0
 800341a:	617b      	str	r3, [r7, #20]
	  }

	  if (XY > 2 * PI)
 800341c:	6978      	ldr	r0, [r7, #20]
 800341e:	f7fd f80d 	bl	800043c <__aeabi_f2d>
 8003422:	a30f      	add	r3, pc, #60	; (adr r3, 8003460 <Direction_Radians+0xe0>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd faf0 	bl	8000a0c <__aeabi_dcmpgt>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00f      	beq.n	8003452 <Direction_Radians+0xd2>
	  {
		  XY -= 2 * PI;
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7fd f802 	bl	800043c <__aeabi_f2d>
 8003438:	a309      	add	r3, pc, #36	; (adr r3, 8003460 <Direction_Radians+0xe0>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f7fc fe9d 	bl	800017c <__aeabi_dsub>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	f7fd fb47 	bl	8000adc <__aeabi_d2f>
 800344e:	4603      	mov	r3, r0
 8003450:	617b      	str	r3, [r7, #20]
	  }
	return XY;
 8003452:	697b      	ldr	r3, [r7, #20]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bdb0      	pop	{r4, r5, r7, pc}
 800345c:	f3af 8000 	nop.w
 8003460:	53c8d4f1 	.word	0x53c8d4f1
 8003464:	401921fb 	.word	0x401921fb
 8003468:	3de4c388 	.word	0x3de4c388
 800346c:	00000000 	.word	0x00000000

08003470 <Direction_Degress>:

float Direction_Degress(HMC5883L_t *hmc) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	float Y;
	float s;
	Y = Direction_Radians(hmc);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff81 	bl	8003380 <Direction_Radians>
 800347e:	60f8      	str	r0, [r7, #12]
	s = Y * (180 / PI);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7fc ffdb 	bl	800043c <__aeabi_f2d>
 8003486:	a30a      	add	r3, pc, #40	; (adr r3, 80034b0 <Direction_Degress+0x40>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f7fd f82e 	bl	80004ec <__aeabi_dmul>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	f7fd fb20 	bl	8000adc <__aeabi_d2f>
 800349c:	4603      	mov	r3, r0
 800349e:	60bb      	str	r3, [r7, #8]
	return s;
 80034a0:	68bb      	ldr	r3, [r7, #8]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	f3af 8000 	nop.w
 80034b0:	1af05a77 	.word	0x1af05a77
 80034b4:	404ca5dc 	.word	0x404ca5dc

080034b8 <Compas_Degress>:

int16_t Compas_Degress(void) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
	TmpX = HMC5883L_getHeadingX(&Hmc5883l, HMC5883L_RA_DATAX_H);
 80034bc:	2103      	movs	r1, #3
 80034be:	4816      	ldr	r0, [pc, #88]	; (8003518 <Compas_Degress+0x60>)
 80034c0:	f7ff fe3d 	bl	800313e <HMC5883L_getHeadingX>
 80034c4:	4603      	mov	r3, r0
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <Compas_Degress+0x64>)
 80034ca:	801a      	strh	r2, [r3, #0]
	TmpY = HMC5883L_getHeadingY(&Hmc5883l, HMC5883L_RA_DATAX_H);
 80034cc:	2103      	movs	r1, #3
 80034ce:	4812      	ldr	r0, [pc, #72]	; (8003518 <Compas_Degress+0x60>)
 80034d0:	f7ff fe7f 	bl	80031d2 <HMC5883L_getHeadingY>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <Compas_Degress+0x68>)
 80034da:	801a      	strh	r2, [r3, #0]
	TmpZ = HMC5883L_getHeadingZ(&Hmc5883l, HMC5883L_RA_DATAX_H);
 80034dc:	2103      	movs	r1, #3
 80034de:	480e      	ldr	r0, [pc, #56]	; (8003518 <Compas_Degress+0x60>)
 80034e0:	f7ff fe52 	bl	8003188 <HMC5883L_getHeadingZ>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <Compas_Degress+0x6c>)
 80034ea:	801a      	strh	r2, [r3, #0]
	TmpXY = Direction_Radians(&Hmc5883l);				//angle in radians
 80034ec:	480a      	ldr	r0, [pc, #40]	; (8003518 <Compas_Degress+0x60>)
 80034ee:	f7ff ff47 	bl	8003380 <Direction_Radians>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <Compas_Degress+0x70>)
 80034f6:	6013      	str	r3, [r2, #0]
	Degress = Direction_Degress(&Hmc5883l);				//angle in degrees
 80034f8:	4807      	ldr	r0, [pc, #28]	; (8003518 <Compas_Degress+0x60>)
 80034fa:	f7ff ffb9 	bl	8003470 <Direction_Degress>
 80034fe:	4603      	mov	r3, r0
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd fcbf 	bl	8000e84 <__aeabi_f2iz>
 8003506:	4603      	mov	r3, r0
 8003508:	b21a      	sxth	r2, r3
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <Compas_Degress+0x74>)
 800350c:	801a      	strh	r2, [r3, #0]


	return Degress;
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <Compas_Degress+0x74>)
 8003510:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000630 	.word	0x20000630
 800351c:	2000062c 	.word	0x2000062c
 8003520:	20000624 	.word	0x20000624
 8003524:	20000638 	.word	0x20000638
 8003528:	20000628 	.word	0x20000628
 800352c:	20000626 	.word	0x20000626

08003530 <HMC5883L_Init>:




uint8_t HMC5883L_Init(HMC5883L_t *hmc, I2C_HandleTypeDef *i2c, uint8_t Address) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	71fb      	strb	r3, [r7, #7]
	hmc->hmc5883l_i2c = i2c;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	601a      	str	r2, [r3, #0]
	hmc->Address = Address;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	79fa      	ldrb	r2, [r7, #7]
 8003548:	711a      	strb	r2, [r3, #4]
	HMC5883L_SamplesAveraged(hmc, HMC5883L_AVERAGING_8);
 800354a:	2103      	movs	r1, #3
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7ff fec1 	bl	80032d4 <HMC5883L_SamplesAveraged>
	HMC5883L_DataOutputRate(hmc, HMC5883L_RATE_15);
 8003552:	2104      	movs	r1, #4
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff fe9f 	bl	8003298 <HMC5883L_DataOutputRate>
	HMC5883L_MeasureMode(hmc, HMC5883L_BIAS_NORMAL);
 800355a:	2100      	movs	r1, #0
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff fe7c 	bl	800325a <HMC5883L_MeasureMode>
	HMC5883L_Gain(hmc, HMC5883L_GAIN_1370);
 8003562:	2100      	movs	r1, #0
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f7ff fed3 	bl	8003310 <HMC5883L_Gain>
	HMC5883L_OperatingMode(hmc, 0x00);
 800356a:	2100      	movs	r1, #0
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff feed 	bl	800334c <HMC5883L_OperatingMode>
	return 0;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003580:	4b12      	ldr	r3, [pc, #72]	; (80035cc <MX_I2C1_Init+0x50>)
 8003582:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <MX_I2C1_Init+0x54>)
 8003584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <MX_I2C1_Init+0x50>)
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <MX_I2C1_Init+0x58>)
 800358a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <MX_I2C1_Init+0x50>)
 800358e:	2200      	movs	r2, #0
 8003590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003592:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <MX_I2C1_Init+0x50>)
 8003594:	2200      	movs	r2, #0
 8003596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <MX_I2C1_Init+0x50>)
 800359a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800359e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <MX_I2C1_Init+0x50>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <MX_I2C1_Init+0x50>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <MX_I2C1_Init+0x50>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <MX_I2C1_Init+0x50>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035b8:	4804      	ldr	r0, [pc, #16]	; (80035cc <MX_I2C1_Init+0x50>)
 80035ba:	f001 fc35 	bl	8004e28 <HAL_I2C_Init>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035c4:	f000 fa90 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	2000063c 	.word	0x2000063c
 80035d0:	40005400 	.word	0x40005400
 80035d4:	000186a0 	.word	0x000186a0

080035d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_I2C_MspInit+0x90>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d132      	bne.n	800365e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_I2C_MspInit+0x94>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_I2C_MspInit+0x94>)
 80035fe:	f043 0308 	orr.w	r3, r3, #8
 8003602:	6193      	str	r3, [r2, #24]
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_I2C_MspInit+0x94>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003616:	2312      	movs	r3, #18
 8003618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800361a:	2303      	movs	r3, #3
 800361c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	4619      	mov	r1, r3
 8003624:	4812      	ldr	r0, [pc, #72]	; (8003670 <HAL_I2C_MspInit+0x98>)
 8003626:	f001 fa11 	bl	8004a4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_I2C_MspInit+0x9c>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
 8003640:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_I2C_MspInit+0x9c>)
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_I2C_MspInit+0x94>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4a08      	ldr	r2, [pc, #32]	; (800366c <HAL_I2C_MspInit+0x94>)
 800364c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003650:	61d3      	str	r3, [r2, #28]
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_I2C_MspInit+0x94>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800365e:	bf00      	nop
 8003660:	3728      	adds	r7, #40	; 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40005400 	.word	0x40005400
 800366c:	40021000 	.word	0x40021000
 8003670:	40010c00 	.word	0x40010c00
 8003674:	40010000 	.word	0x40010000

08003678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800367e:	f000 ffa1 	bl	80045c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003682:	f000 f9dd 	bl	8003a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003686:	f7ff fc6b 	bl	8002f60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800368a:	f000 fec3 	bl	8004414 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800368e:	f7ff ff75 	bl	800357c <MX_I2C1_Init>
  MX_TIM2_Init();
 8003692:	f000 fd61 	bl	8004158 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003696:	f000 fdd5 	bl	8004244 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800369a:	f000 fe91 	bl	80043c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800369e:	48aa      	ldr	r0, [pc, #680]	; (8003948 <main+0x2d0>)
 80036a0:	f003 f82c 	bl	80066fc <HAL_TIM_Base_Start>
  	LCD_Init();
 80036a4:	f7fe fbd2 	bl	8001e4c <LCD_Init>
  	menu_refresh();
 80036a8:	f000 fa24 	bl	8003af4 <menu_refresh>
  	ButtonEnterInitKey(&Enter, key_enter_GPIO_Port, key_enter_Pin, 15);
 80036ac:	230f      	movs	r3, #15
 80036ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036b2:	49a6      	ldr	r1, [pc, #664]	; (800394c <main+0x2d4>)
 80036b4:	48a6      	ldr	r0, [pc, #664]	; (8003950 <main+0x2d8>)
 80036b6:	f7ff f9df 	bl	8002a78 <ButtonEnterInitKey>
  	ButtonEnterPressCallback(&Enter,key_enter_press);
 80036ba:	49a6      	ldr	r1, [pc, #664]	; (8003954 <main+0x2dc>)
 80036bc:	48a4      	ldr	r0, [pc, #656]	; (8003950 <main+0x2d8>)
 80036be:	f7ff fa66 	bl	8002b8e <ButtonEnterPressCallback>

  	ButtonNextInitKey(&Next, GPIOC, key_next_Pin, 20);
 80036c2:	2314      	movs	r3, #20
 80036c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036c8:	49a0      	ldr	r1, [pc, #640]	; (800394c <main+0x2d4>)
 80036ca:	48a3      	ldr	r0, [pc, #652]	; (8003958 <main+0x2e0>)
 80036cc:	f7ff fa1f 	bl	8002b0e <ButtonNextInitKey>
  	ButtonNextPressCallback(&Next,key_next_press);
 80036d0:	49a2      	ldr	r1, [pc, #648]	; (800395c <main+0x2e4>)
 80036d2:	48a1      	ldr	r0, [pc, #644]	; (8003958 <main+0x2e0>)
 80036d4:	f7ff fa41 	bl	8002b5a <ButtonNextPressCallback>

  	ButtonPrevInitKey(&Prev, GPIOC, key_prev_Pin, 20);
 80036d8:	2314      	movs	r3, #20
 80036da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036de:	499b      	ldr	r1, [pc, #620]	; (800394c <main+0x2d4>)
 80036e0:	489f      	ldr	r0, [pc, #636]	; (8003960 <main+0x2e8>)
 80036e2:	f7ff f9fb 	bl	8002adc <ButtonPrevInitKey>
  	ButtonPrevPressCallback(&Prev,key_prev_press);
 80036e6:	499f      	ldr	r1, [pc, #636]	; (8003964 <main+0x2ec>)
 80036e8:	489d      	ldr	r0, [pc, #628]	; (8003960 <main+0x2e8>)
 80036ea:	f7ff fa43 	bl	8002b74 <ButtonPrevPressCallback>

  	ButtonBackInitKey(&Back, GPIOC, key_enterC10_Pin, 20);
 80036ee:	2314      	movs	r3, #20
 80036f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f4:	4995      	ldr	r1, [pc, #596]	; (800394c <main+0x2d4>)
 80036f6:	489c      	ldr	r0, [pc, #624]	; (8003968 <main+0x2f0>)
 80036f8:	f7ff f9d7 	bl	8002aaa <ButtonBackInitKey>
  	ButtonBackPressCallback(&Back,key_back_press);
 80036fc:	499b      	ldr	r1, [pc, #620]	; (800396c <main+0x2f4>)
 80036fe:	489a      	ldr	r0, [pc, #616]	; (8003968 <main+0x2f0>)
 8003700:	f7ff fa1e 	bl	8002b40 <ButtonBackPressCallback>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003704:	2100      	movs	r1, #0
 8003706:	489a      	ldr	r0, [pc, #616]	; (8003970 <main+0x2f8>)
 8003708:	f003 f89a 	bl	8006840 <HAL_TIM_PWM_Start>
  	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, PWM);  // od  1 do 35
 800370c:	4b99      	ldr	r3, [pc, #612]	; (8003974 <main+0x2fc>)
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	4b97      	ldr	r3, [pc, #604]	; (8003970 <main+0x2f8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	635a      	str	r2, [r3, #52]	; 0x34
  	HMC5883L_Init(&Hmc5883l, &hi2c1, HMC5883L_ADDRESS);
 8003716:	221e      	movs	r2, #30
 8003718:	4997      	ldr	r1, [pc, #604]	; (8003978 <main+0x300>)
 800371a:	4898      	ldr	r0, [pc, #608]	; (800397c <main+0x304>)
 800371c:	f7ff ff08 	bl	8003530 <HMC5883L_Init>
  	NEO6_Init(&GpsState, &huart1);
 8003720:	4997      	ldr	r1, [pc, #604]	; (8003980 <main+0x308>)
 8003722:	4898      	ldr	r0, [pc, #608]	; (8003984 <main+0x30c>)
 8003724:	f7fe f90e 	bl	8001944 <NEO6_Init>
  	uint32_t Timer = HAL_GetTick();
 8003728:	f000 ffa4 	bl	8004674 <HAL_GetTick>
 800372c:	6078      	str	r0, [r7, #4]
	 				LCD_Char(0xff);
	 				i++;
	 			}
	 		}
	 */
	 	  NEO6_Task(&GpsState);
 800372e:	4895      	ldr	r0, [pc, #596]	; (8003984 <main+0x30c>)
 8003730:	f7fe f8f4 	bl	800191c <NEO6_Task>

	 	 	  	  if((HAL_GetTick() - Timer) > 1000)
 8003734:	f000 ff9e 	bl	8004674 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003742:	f240 8156 	bls.w	80039f2 <main+0x37a>
	 	 	  	  {
	 	 	  		  MessageLength = sprintf((char*)Message, "\033[2J\033[;H"); // Clear terminal and home cursor
 8003746:	4990      	ldr	r1, [pc, #576]	; (8003988 <main+0x310>)
 8003748:	4890      	ldr	r0, [pc, #576]	; (800398c <main+0x314>)
 800374a:	f005 f8b9 	bl	80088c0 <siprintf>
 800374e:	4603      	mov	r3, r0
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b8f      	ldr	r3, [pc, #572]	; (8003990 <main+0x318>)
 8003754:	701a      	strb	r2, [r3, #0]
	 	 	  		  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8003756:	4b8e      	ldr	r3, [pc, #568]	; (8003990 <main+0x318>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b29a      	uxth	r2, r3
 800375c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003760:	498a      	ldr	r1, [pc, #552]	; (800398c <main+0x314>)
 8003762:	488c      	ldr	r0, [pc, #560]	; (8003994 <main+0x31c>)
 8003764:	f003 ff27 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  		  if(NEO6_IsFix(&GpsState))
 8003768:	4886      	ldr	r0, [pc, #536]	; (8003984 <main+0x30c>)
 800376a:	f7fe f8cb 	bl	8001904 <NEO6_IsFix>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 812a 	beq.w	80039ca <main+0x352>
	 	 	  		  {
	 	 	  			  MessageLength = sprintf((char*)Message, "UTC Time: %02d:%02d:%02d\n\r", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8003776:	4b83      	ldr	r3, [pc, #524]	; (8003984 <main+0x30c>)
 8003778:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 800377c:	461a      	mov	r2, r3
 800377e:	4b81      	ldr	r3, [pc, #516]	; (8003984 <main+0x30c>)
 8003780:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8003784:	4619      	mov	r1, r3
 8003786:	4b7f      	ldr	r3, [pc, #508]	; (8003984 <main+0x30c>)
 8003788:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	460b      	mov	r3, r1
 8003790:	4981      	ldr	r1, [pc, #516]	; (8003998 <main+0x320>)
 8003792:	487e      	ldr	r0, [pc, #504]	; (800398c <main+0x314>)
 8003794:	f005 f894 	bl	80088c0 <siprintf>
 8003798:	4603      	mov	r3, r0
 800379a:	b2da      	uxtb	r2, r3
 800379c:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <main+0x318>)
 800379e:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 80037a0:	4b7b      	ldr	r3, [pc, #492]	; (8003990 <main+0x318>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037aa:	4978      	ldr	r1, [pc, #480]	; (800398c <main+0x314>)
 80037ac:	4879      	ldr	r0, [pc, #484]	; (8003994 <main+0x31c>)
 80037ae:	f003 ff02 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Date: %02d.%02d.20%02d\n\r", GpsState.Day, GpsState.Month, GpsState.Year);
 80037b2:	4b74      	ldr	r3, [pc, #464]	; (8003984 <main+0x30c>)
 80037b4:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b72      	ldr	r3, [pc, #456]	; (8003984 <main+0x30c>)
 80037bc:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 80037c0:	4619      	mov	r1, r3
 80037c2:	4b70      	ldr	r3, [pc, #448]	; (8003984 <main+0x30c>)
 80037c4:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	460b      	mov	r3, r1
 80037cc:	4973      	ldr	r1, [pc, #460]	; (800399c <main+0x324>)
 80037ce:	486f      	ldr	r0, [pc, #444]	; (800398c <main+0x314>)
 80037d0:	f005 f876 	bl	80088c0 <siprintf>
 80037d4:	4603      	mov	r3, r0
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	4b6d      	ldr	r3, [pc, #436]	; (8003990 <main+0x318>)
 80037da:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 80037dc:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <main+0x318>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e6:	4969      	ldr	r1, [pc, #420]	; (800398c <main+0x314>)
 80037e8:	486a      	ldr	r0, [pc, #424]	; (8003994 <main+0x31c>)
 80037ea:	f003 fee4 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Latitude: %.4f %c\n\r", GpsState.Latitude, GpsState.LatitudeDirection);
 80037ee:	4b65      	ldr	r3, [pc, #404]	; (8003984 <main+0x30c>)
 80037f0:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 80037f4:	4963      	ldr	r1, [pc, #396]	; (8003984 <main+0x30c>)
 80037f6:	f891 1198 	ldrb.w	r1, [r1, #408]	; 0x198
 80037fa:	9100      	str	r1, [sp, #0]
 80037fc:	4968      	ldr	r1, [pc, #416]	; (80039a0 <main+0x328>)
 80037fe:	4863      	ldr	r0, [pc, #396]	; (800398c <main+0x314>)
 8003800:	f005 f85e 	bl	80088c0 <siprintf>
 8003804:	4603      	mov	r3, r0
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b61      	ldr	r3, [pc, #388]	; (8003990 <main+0x318>)
 800380a:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 800380c:	4b60      	ldr	r3, [pc, #384]	; (8003990 <main+0x318>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b29a      	uxth	r2, r3
 8003812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003816:	495d      	ldr	r1, [pc, #372]	; (800398c <main+0x314>)
 8003818:	485e      	ldr	r0, [pc, #376]	; (8003994 <main+0x31c>)
 800381a:	f003 fecc 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Longitude: %.2f %c\n\r", GpsState.Longitude, GpsState.LongitudeDirection);
 800381e:	4b59      	ldr	r3, [pc, #356]	; (8003984 <main+0x30c>)
 8003820:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8003824:	4957      	ldr	r1, [pc, #348]	; (8003984 <main+0x30c>)
 8003826:	f891 11a8 	ldrb.w	r1, [r1, #424]	; 0x1a8
 800382a:	9100      	str	r1, [sp, #0]
 800382c:	495d      	ldr	r1, [pc, #372]	; (80039a4 <main+0x32c>)
 800382e:	4857      	ldr	r0, [pc, #348]	; (800398c <main+0x314>)
 8003830:	f005 f846 	bl	80088c0 <siprintf>
 8003834:	4603      	mov	r3, r0
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4b55      	ldr	r3, [pc, #340]	; (8003990 <main+0x318>)
 800383a:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 800383c:	4b54      	ldr	r3, [pc, #336]	; (8003990 <main+0x318>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b29a      	uxth	r2, r3
 8003842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003846:	4951      	ldr	r1, [pc, #324]	; (800398c <main+0x314>)
 8003848:	4852      	ldr	r0, [pc, #328]	; (8003994 <main+0x31c>)
 800384a:	f003 feb4 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Altitude: %.2f m above sea level\n\r", GpsState.Altitude);
 800384e:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <main+0x30c>)
 8003850:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8003854:	4954      	ldr	r1, [pc, #336]	; (80039a8 <main+0x330>)
 8003856:	484d      	ldr	r0, [pc, #308]	; (800398c <main+0x314>)
 8003858:	f005 f832 	bl	80088c0 <siprintf>
 800385c:	4603      	mov	r3, r0
 800385e:	b2da      	uxtb	r2, r3
 8003860:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <main+0x318>)
 8003862:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8003864:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <main+0x318>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b29a      	uxth	r2, r3
 800386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386e:	4947      	ldr	r1, [pc, #284]	; (800398c <main+0x314>)
 8003870:	4848      	ldr	r0, [pc, #288]	; (8003994 <main+0x31c>)
 8003872:	f003 fea0 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Speed: %.2f knots, %f km/h\n\r", GpsState.SpeedKnots, GpsState.SpeedKilometers);
 8003876:	4b43      	ldr	r3, [pc, #268]	; (8003984 <main+0x30c>)
 8003878:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 800387c:	4b41      	ldr	r3, [pc, #260]	; (8003984 <main+0x30c>)
 800387e:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003882:	e9cd 2300 	strd	r2, r3, [sp]
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4948      	ldr	r1, [pc, #288]	; (80039ac <main+0x334>)
 800388c:	483f      	ldr	r0, [pc, #252]	; (800398c <main+0x314>)
 800388e:	f005 f817 	bl	80088c0 <siprintf>
 8003892:	4603      	mov	r3, r0
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4b3e      	ldr	r3, [pc, #248]	; (8003990 <main+0x318>)
 8003898:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <main+0x318>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a4:	4939      	ldr	r1, [pc, #228]	; (800398c <main+0x314>)
 80038a6:	483b      	ldr	r0, [pc, #236]	; (8003994 <main+0x31c>)
 80038a8:	f003 fe85 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Satelites: %d\n\r", GpsState.SatelitesNumber);
 80038ac:	4b35      	ldr	r3, [pc, #212]	; (8003984 <main+0x30c>)
 80038ae:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80038b2:	461a      	mov	r2, r3
 80038b4:	493e      	ldr	r1, [pc, #248]	; (80039b0 <main+0x338>)
 80038b6:	4835      	ldr	r0, [pc, #212]	; (800398c <main+0x314>)
 80038b8:	f005 f802 	bl	80088c0 <siprintf>
 80038bc:	4603      	mov	r3, r0
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b33      	ldr	r3, [pc, #204]	; (8003990 <main+0x318>)
 80038c2:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 80038c4:	4b32      	ldr	r3, [pc, #200]	; (8003990 <main+0x318>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ce:	492f      	ldr	r1, [pc, #188]	; (800398c <main+0x314>)
 80038d0:	4830      	ldr	r0, [pc, #192]	; (8003994 <main+0x31c>)
 80038d2:	f003 fe70 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Dilution of precision: %.2f\n\r", GpsState.Dop);
 80038d6:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <main+0x30c>)
 80038d8:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 80038dc:	4935      	ldr	r1, [pc, #212]	; (80039b4 <main+0x33c>)
 80038de:	482b      	ldr	r0, [pc, #172]	; (800398c <main+0x314>)
 80038e0:	f004 ffee 	bl	80088c0 <siprintf>
 80038e4:	4603      	mov	r3, r0
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <main+0x318>)
 80038ea:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 80038ec:	4b28      	ldr	r3, [pc, #160]	; (8003990 <main+0x318>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038f6:	4925      	ldr	r1, [pc, #148]	; (800398c <main+0x314>)
 80038f8:	4826      	ldr	r0, [pc, #152]	; (8003994 <main+0x31c>)
 80038fa:	f003 fe5c 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Horizontal dilution of precision: %.2f\n\r", GpsState.Hdop);
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <main+0x30c>)
 8003900:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 8003904:	492c      	ldr	r1, [pc, #176]	; (80039b8 <main+0x340>)
 8003906:	4821      	ldr	r0, [pc, #132]	; (800398c <main+0x314>)
 8003908:	f004 ffda 	bl	80088c0 <siprintf>
 800390c:	4603      	mov	r3, r0
 800390e:	b2da      	uxtb	r2, r3
 8003910:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <main+0x318>)
 8003912:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <main+0x318>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b29a      	uxth	r2, r3
 800391a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800391e:	491b      	ldr	r1, [pc, #108]	; (800398c <main+0x314>)
 8003920:	481c      	ldr	r0, [pc, #112]	; (8003994 <main+0x31c>)
 8003922:	f003 fe48 	bl	80075b6 <HAL_UART_Transmit>

	 	 	  			  MessageLength = sprintf((char*)Message, "Vertical dilution of precision: %.2f\n\r", GpsState.Vdop);
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <main+0x30c>)
 8003928:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 800392c:	4923      	ldr	r1, [pc, #140]	; (80039bc <main+0x344>)
 800392e:	4817      	ldr	r0, [pc, #92]	; (800398c <main+0x314>)
 8003930:	f004 ffc6 	bl	80088c0 <siprintf>
 8003934:	4603      	mov	r3, r0
 8003936:	b2da      	uxtb	r2, r3
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <main+0x318>)
 800393a:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <main+0x318>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	b29a      	uxth	r2, r3
 8003942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003946:	e03b      	b.n	80039c0 <main+0x348>
 8003948:	20000740 	.word	0x20000740
 800394c:	40011000 	.word	0x40011000
 8003950:	20000694 	.word	0x20000694
 8003954:	08003cad 	.word	0x08003cad
 8003958:	200006ac 	.word	0x200006ac
 800395c:	08003c75 	.word	0x08003c75
 8003960:	200006c8 	.word	0x200006c8
 8003964:	08003c91 	.word	0x08003c91
 8003968:	20000720 	.word	0x20000720
 800396c:	08003cc9 	.word	0x08003cc9
 8003970:	20000788 	.word	0x20000788
 8003974:	20000000 	.word	0x20000000
 8003978:	2000063c 	.word	0x2000063c
 800397c:	20000630 	.word	0x20000630
 8003980:	200005e0 	.word	0x200005e0
 8003984:	200003f8 	.word	0x200003f8
 8003988:	0800ca34 	.word	0x0800ca34
 800398c:	200006e0 	.word	0x200006e0
 8003990:	20000690 	.word	0x20000690
 8003994:	200007d0 	.word	0x200007d0
 8003998:	0800ca40 	.word	0x0800ca40
 800399c:	0800ca5c 	.word	0x0800ca5c
 80039a0:	0800ca78 	.word	0x0800ca78
 80039a4:	0800ca8c 	.word	0x0800ca8c
 80039a8:	0800caa4 	.word	0x0800caa4
 80039ac:	0800cac8 	.word	0x0800cac8
 80039b0:	0800cae8 	.word	0x0800cae8
 80039b4:	0800caf8 	.word	0x0800caf8
 80039b8:	0800cb18 	.word	0x0800cb18
 80039bc:	0800cb44 	.word	0x0800cb44
 80039c0:	4916      	ldr	r1, [pc, #88]	; (8003a1c <main+0x3a4>)
 80039c2:	4817      	ldr	r0, [pc, #92]	; (8003a20 <main+0x3a8>)
 80039c4:	f003 fdf7 	bl	80075b6 <HAL_UART_Transmit>
 80039c8:	e010      	b.n	80039ec <main+0x374>
	 	 	  		  }
	 	 	  		  else
	 	 	  		  {
	 	 	  			  MessageLength = sprintf((char*)Message, "No Fix\n\r");
 80039ca:	4916      	ldr	r1, [pc, #88]	; (8003a24 <main+0x3ac>)
 80039cc:	4813      	ldr	r0, [pc, #76]	; (8003a1c <main+0x3a4>)
 80039ce:	f004 ff77 	bl	80088c0 <siprintf>
 80039d2:	4603      	mov	r3, r0
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <main+0x3b0>)
 80039d8:	701a      	strb	r2, [r3, #0]
	 	 	  			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <main+0x3b0>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b29a      	uxth	r2, r3
 80039e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e4:	490d      	ldr	r1, [pc, #52]	; (8003a1c <main+0x3a4>)
 80039e6:	480e      	ldr	r0, [pc, #56]	; (8003a20 <main+0x3a8>)
 80039e8:	f003 fde5 	bl	80075b6 <HAL_UART_Transmit>
	 	 	  		  }

	 	 	  		  Timer = HAL_GetTick();
 80039ec:	f000 fe42 	bl	8004674 <HAL_GetTick>
 80039f0:	6078      	str	r0, [r7, #4]
	 	 	  	  }



	 	  ButtonEnterTask(&Enter);
 80039f2:	480e      	ldr	r0, [pc, #56]	; (8003a2c <main+0x3b4>)
 80039f4:	f7ff f9a7 	bl	8002d46 <ButtonEnterTask>
	 	  ButtonNextTask(&Next);
 80039f8:	480d      	ldr	r0, [pc, #52]	; (8003a30 <main+0x3b8>)
 80039fa:	f7ff f92d 	bl	8002c58 <ButtonNextTask>
	 	  ButtonPrevTask(&Prev);
 80039fe:	480d      	ldr	r0, [pc, #52]	; (8003a34 <main+0x3bc>)
 8003a00:	f7ff fa8f 	bl	8002f22 <ButtonPrevTask>
	 	  ButtonBackTask(&Back);
 8003a04:	480c      	ldr	r0, [pc, #48]	; (8003a38 <main+0x3c0>)
 8003a06:	f7ff fa15 	bl	8002e34 <ButtonBackTask>
	 		key_prev_press();
	 		key_enter_press();
	 		key_back_press();
	 		*/
	 	  	  // Measurement end
	 	  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003a0a:	2120      	movs	r1, #32
 8003a0c:	480b      	ldr	r0, [pc, #44]	; (8003a3c <main+0x3c4>)
 8003a0e:	f001 f9d0 	bl	8004db2 <HAL_GPIO_TogglePin>
	 	  	  HAL_Delay(100);
 8003a12:	2064      	movs	r0, #100	; 0x64
 8003a14:	f000 fe38 	bl	8004688 <HAL_Delay>
	 	  NEO6_Task(&GpsState);
 8003a18:	e689      	b.n	800372e <main+0xb6>
 8003a1a:	bf00      	nop
 8003a1c:	200006e0 	.word	0x200006e0
 8003a20:	200007d0 	.word	0x200007d0
 8003a24:	0800cb6c 	.word	0x0800cb6c
 8003a28:	20000690 	.word	0x20000690
 8003a2c:	20000694 	.word	0x20000694
 8003a30:	200006ac 	.word	0x200006ac
 8003a34:	200006c8 	.word	0x200006c8
 8003a38:	20000720 	.word	0x20000720
 8003a3c:	40010800 	.word	0x40010800

08003a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b090      	sub	sp, #64	; 0x40
 8003a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a46:	f107 0318 	add.w	r3, r7, #24
 8003a4a:	2228      	movs	r2, #40	; 0x28
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 face 	bl	8007ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a62:	2302      	movs	r3, #2
 8003a64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a66:	2301      	movs	r3, #1
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a6a:	2310      	movs	r3, #16
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003a72:	2300      	movs	r3, #0
 8003a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003a76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a7c:	f107 0318 	add.w	r3, r7, #24
 8003a80:	4618      	mov	r0, r3
 8003a82:	f002 f9d1 	bl	8005e28 <HAL_RCC_OscConfig>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003a8c:	f000 f82c 	bl	8003ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a90:	230f      	movs	r3, #15
 8003a92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a94:	2302      	movs	r3, #2
 8003a96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fc3c 	bl	8006328 <HAL_RCC_ClockConfig>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003ab6:	f000 f817 	bl	8003ae8 <Error_Handler>
  }
}
 8003aba:	bf00      	nop
 8003abc:	3740      	adds	r7, #64	; 0x40
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	if(huart == GpsState.neo6_huart)
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_UART_RxCpltCallback+0x20>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d102      	bne.n	8003adc <HAL_UART_RxCpltCallback+0x18>
	{
		NEO6_ReceiveUartChar(&GpsState);
 8003ad6:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <HAL_UART_RxCpltCallback+0x20>)
 8003ad8:	f7fd fc46 	bl	8001368 <NEO6_ReceiveUartChar>
	}
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	200003f8 	.word	0x200003f8

08003ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003aec:	b672      	cpsid	i
}
 8003aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <Error_Handler+0x8>
	...

08003af4 <menu_refresh>:
void (*key_next_func)(void) = &menu_next;
void (*key_prev_func)(void) = &menu_prev;
void (*key_enter_func)(void) = &menu_enter;
void (*key_back_func)(void) = &menu_back;

void menu_refresh(void) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
	menu_t *temp;
	uint8_t i;
	uint8_t center;


	LCD_Cls();
 8003afa:	f7fe f9a0 	bl	8001e3e <LCD_Cls>

	//LCD_write(0, 0, "-   NAVI APP   -");

	if (currentPointer->parent){
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <menu_refresh+0xec>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d024      	beq.n	8003b52 <menu_refresh+0x5e>
		temp = (currentPointer->parent)->child;
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <menu_refresh+0xec>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	607b      	str	r3, [r7, #4]
		center = (LCD_X >>1 )-(strlen((temp->parent)->name)>>1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fc fb23 	bl	8000164 <strlen>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f1c3 0308 	rsb	r3, r3, #8
 8003b28:	70bb      	strb	r3, [r7, #2]
		LCD_Locate(center-1, 0);
 8003b2a:	78bb      	ldrb	r3, [r7, #2]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe f962 	bl	8001dfc <LCD_Locate>
		LCD_Char(' ');
 8003b38:	2020      	movs	r0, #32
 8003b3a:	f7fe f8df 	bl	8001cfc <LCD_Char>
		LCD_String((temp->parent)->name);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe f8f2 	bl	8001d2e <LCD_String>
		LCD_Char(' ');
 8003b4a:	2020      	movs	r0, #32
 8003b4c:	f7fe f8d6 	bl	8001cfc <LCD_Char>
 8003b50:	e001      	b.n	8003b56 <menu_refresh+0x62>
	}

	else
		temp = &menu1;
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <menu_refresh+0xf0>)
 8003b54:	607b      	str	r3, [r7, #4]

	for (i = 0; i != menu_index - lcd_row_pos; i++) {
 8003b56:	2300      	movs	r3, #0
 8003b58:	70fb      	strb	r3, [r7, #3]
 8003b5a:	e005      	b.n	8003b68 <menu_refresh+0x74>
		temp = temp->next;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	607b      	str	r3, [r7, #4]
	for (i = 0; i != menu_index - lcd_row_pos; i++) {
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	3301      	adds	r3, #1
 8003b66:	70fb      	strb	r3, [r7, #3]
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <menu_refresh+0xf4>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <menu_refresh+0xf8>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	1acb      	subs	r3, r1, r3
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d1f0      	bne.n	8003b5c <menu_refresh+0x68>
	}
	//LCD_Cls();
	LCD_Menu_Clear ();
 8003b7a:	f7fe f8ee 	bl	8001d5a <LCD_Menu_Clear>
	for (i = 1; i < LCD_Y ; i++) {
 8003b7e:	2301      	movs	r3, #1
 8003b80:	70fb      	strb	r3, [r7, #3]
 8003b82:	e023      	b.n	8003bcc <menu_refresh+0xd8>
		LCD_Locate(0, i);
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	4619      	mov	r1, r3
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f7fe f937 	bl	8001dfc <LCD_Locate>
		if (temp == currentPointer) LCD_Char(0x7E);
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <menu_refresh+0xec>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d103      	bne.n	8003ba0 <menu_refresh+0xac>
 8003b98:	207e      	movs	r0, #126	; 0x7e
 8003b9a:	f7fe f8af 	bl	8001cfc <LCD_Char>
 8003b9e:	e002      	b.n	8003ba6 <menu_refresh+0xb2>
		else LCD_Char(' ');
 8003ba0:	2020      	movs	r0, #32
 8003ba2:	f7fe f8ab 	bl	8001cfc <LCD_Char>

		LCD_Locate(2, i);
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	2002      	movs	r0, #2
 8003bac:	f7fe f926 	bl	8001dfc <LCD_Locate>
		LCD_String(temp->name);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe f8ba 	bl	8001d2e <LCD_String>

		temp = temp->next;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	607b      	str	r3, [r7, #4]
		if (!temp) break;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <menu_refresh+0xe0>
	for (i = 1; i < LCD_Y ; i++) {
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	70fb      	strb	r3, [r7, #3]
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d9d8      	bls.n	8003b84 <menu_refresh+0x90>

	}



}
 8003bd2:	e000      	b.n	8003bd6 <menu_refresh+0xe2>
		if (!temp) break;
 8003bd4:	bf00      	nop
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200001b4 	.word	0x200001b4
 8003be4:	20000004 	.word	0x20000004
 8003be8:	2000073b 	.word	0x2000073b
 8003bec:	2000073c 	.word	0x2000073c

08003bf0 <menu_get_index>:

	// lcd_refresh();



uint8_t menu_get_index(menu_t *q) {
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

	menu_t *temp;
	uint8_t i = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	72fb      	strb	r3, [r7, #11]

	if (q->parent) temp = (q->parent)->child;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <menu_get_index+0x1e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e008      	b.n	8003c20 <menu_get_index+0x30>
	else temp = &menu1;
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <menu_get_index+0x44>)
 8003c10:	60fb      	str	r3, [r7, #12]

	while (temp != q) {
 8003c12:	e005      	b.n	8003c20 <menu_get_index+0x30>
		temp = temp->next;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
		i++;
 8003c1a:	7afb      	ldrb	r3, [r7, #11]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	72fb      	strb	r3, [r7, #11]
	while (temp != q) {
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d1f5      	bne.n	8003c14 <menu_get_index+0x24>
	}

	return i;
 8003c28:	7afb      	ldrb	r3, [r7, #11]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	20000004 	.word	0x20000004

08003c38 <menu_get_level>:

uint8_t menu_get_level(menu_t *q) {
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

	menu_t *temp = q;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	72fb      	strb	r3, [r7, #11]

	if (!q->parent) return 0;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <menu_get_level+0x28>
 8003c50:	2300      	movs	r3, #0
 8003c52:	e00a      	b.n	8003c6a <menu_get_level+0x32>

	while (temp->parent != NULL) {
		temp = temp->parent;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	60fb      	str	r3, [r7, #12]
		i++;
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	72fb      	strb	r3, [r7, #11]
	while (temp->parent != NULL) {
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f5      	bne.n	8003c54 <menu_get_level+0x1c>
	}

	return i;
 8003c68:	7afb      	ldrb	r3, [r7, #11]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <key_next_press>:
void key_next_press(void) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0

	//menu_prev();
	if(key_next_func) (*key_next_func)();
 8003c78:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <key_next_press+0x18>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <key_next_press+0x12>
 8003c80:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <key_next_press+0x18>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4798      	blx	r3
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200001b8 	.word	0x200001b8

08003c90 <key_prev_press>:
void key_prev_press(void) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0

	//menu_next();
	if(key_prev_func) (*key_prev_func)();
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <key_prev_press+0x18>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <key_prev_press+0x12>
 8003c9c:	4b02      	ldr	r3, [pc, #8]	; (8003ca8 <key_prev_press+0x18>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4798      	blx	r3
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200001bc 	.word	0x200001bc

08003cac <key_enter_press>:
void key_enter_press(void) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0

	//menu_enter();
	if(key_enter_func) (*key_enter_func)();
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <key_enter_press+0x18>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <key_enter_press+0x12>
 8003cb8:	4b02      	ldr	r3, [pc, #8]	; (8003cc4 <key_enter_press+0x18>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4798      	blx	r3
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200001c0 	.word	0x200001c0

08003cc8 <key_back_press>:
void key_back_press(void) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0

	//menu_back();
	if(key_back_func) (*key_back_func)();
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <key_back_press+0x18>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <key_back_press+0x12>
 8003cd4:	4b02      	ldr	r3, [pc, #8]	; (8003ce0 <key_back_press+0x18>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4798      	blx	r3
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200001c4 	.word	0x200001c4

08003ce4 <menu_back>:

void menu_back(void) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0

	if (currentPointer->parent) {
 8003ce8:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <menu_back+0x5c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d024      	beq.n	8003d3c <menu_back+0x58>

		switch (menu_get_level(currentPointer)) {
 8003cf2:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <menu_back+0x5c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff ff9e 	bl	8003c38 <menu_get_level>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d002      	beq.n	8003d08 <menu_back+0x24>
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d005      	beq.n	8003d12 <menu_back+0x2e>
 8003d06:	e009      	b.n	8003d1c <menu_back+0x38>
		case 1:
			lcd_row_pos = lcd_row_pos_level_1;
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <menu_back+0x60>)
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <menu_back+0x64>)
 8003d0e:	701a      	strb	r2, [r3, #0]
			break;
 8003d10:	e004      	b.n	8003d1c <menu_back+0x38>

		case 2:
			lcd_row_pos = lcd_row_pos_level_2;
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <menu_back+0x68>)
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <menu_back+0x64>)
 8003d18:	701a      	strb	r2, [r3, #0]
			break;
 8003d1a:	bf00      	nop
		}

		currentPointer = currentPointer->parent;
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <menu_back+0x5c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <menu_back+0x5c>)
 8003d24:	6013      	str	r3, [r2, #0]
		menu_index = menu_get_index(currentPointer);
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <menu_back+0x5c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ff60 	bl	8003bf0 <menu_get_index>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <menu_back+0x6c>)
 8003d36:	701a      	strb	r2, [r3, #0]

		menu_refresh();
 8003d38:	f7ff fedc 	bl	8003af4 <menu_refresh>

	}
}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	200001b4 	.word	0x200001b4
 8003d44:	20000739 	.word	0x20000739
 8003d48:	2000073c 	.word	0x2000073c
 8003d4c:	2000073a 	.word	0x2000073a
 8003d50:	2000073b 	.word	0x2000073b

08003d54 <menu_enter>:


void menu_enter(void) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0

	if (currentPointer->menu_function) currentPointer->menu_function();
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <menu_enter+0x68>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <menu_enter+0x16>
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <menu_enter+0x68>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4798      	blx	r3

	if (currentPointer->child)
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <menu_enter+0x68>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d021      	beq.n	8003db8 <menu_enter+0x64>
	{

		switch (menu_get_level(currentPointer)) {
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <menu_enter+0x68>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ff5d 	bl	8003c38 <menu_get_level>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <menu_enter+0x36>
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d005      	beq.n	8003d94 <menu_enter+0x40>
 8003d88:	e009      	b.n	8003d9e <menu_enter+0x4a>
			case 0:
				lcd_row_pos_level_1 = lcd_row_pos;
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <menu_enter+0x6c>)
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <menu_enter+0x70>)
 8003d90:	701a      	strb	r2, [r3, #0]
				break;
 8003d92:	e004      	b.n	8003d9e <menu_enter+0x4a>

			case 1:
				lcd_row_pos_level_2 = lcd_row_pos;
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <menu_enter+0x6c>)
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <menu_enter+0x74>)
 8003d9a:	701a      	strb	r2, [r3, #0]
				break;
 8003d9c:	bf00      	nop
		}

		// switch...case can be replaced by:
		// lcd_row_pos_level[ menu_get_level(currentPointer) ] = lcd_row_pos;

		menu_index = 0;
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <menu_enter+0x78>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
		lcd_row_pos = 0;
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <menu_enter+0x6c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]

		currentPointer = currentPointer->child;
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <menu_enter+0x68>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a02      	ldr	r2, [pc, #8]	; (8003dbc <menu_enter+0x68>)
 8003db2:	6013      	str	r3, [r2, #0]

		menu_refresh();
 8003db4:	f7ff fe9e 	bl	8003af4 <menu_refresh>
	}
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	200001b4 	.word	0x200001b4
 8003dc0:	2000073c 	.word	0x2000073c
 8003dc4:	20000739 	.word	0x20000739
 8003dc8:	2000073a 	.word	0x2000073a
 8003dcc:	2000073b 	.word	0x2000073b

08003dd0 <menu_next>:

void menu_next(void) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0

	if (currentPointer->next)
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <menu_next+0x74>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d018      	beq.n	8003e10 <menu_next+0x40>
	{
		currentPointer = currentPointer->next;
 8003dde:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <menu_next+0x74>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <menu_next+0x74>)
 8003de6:	6013      	str	r3, [r2, #0]
		menu_index++;
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <menu_next+0x78>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <menu_next+0x78>)
 8003df2:	701a      	strb	r2, [r3, #0]
		if (++lcd_row_pos > LCD_Y - 2) lcd_row_pos = LCD_Y - 2;
 8003df4:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <menu_next+0x7c>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <menu_next+0x7c>)
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <menu_next+0x7c>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d018      	beq.n	8003e3a <menu_next+0x6a>
 8003e08:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <menu_next+0x7c>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e014      	b.n	8003e3a <menu_next+0x6a>
	}
	else
	{
		menu_index = 0;
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <menu_next+0x78>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
		lcd_row_pos = 0;
 8003e16:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <menu_next+0x7c>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]

		if (currentPointer->parent) currentPointer = (currentPointer->parent)->child;
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <menu_next+0x74>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <menu_next+0x64>
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <menu_next+0x74>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <menu_next+0x74>)
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e002      	b.n	8003e3a <menu_next+0x6a>
		else currentPointer = &menu1;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <menu_next+0x74>)
 8003e36:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <menu_next+0x80>)
 8003e38:	601a      	str	r2, [r3, #0]
	}

	menu_refresh();
 8003e3a:	f7ff fe5b 	bl	8003af4 <menu_refresh>

}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	200001b4 	.word	0x200001b4
 8003e48:	2000073b 	.word	0x2000073b
 8003e4c:	2000073c 	.word	0x2000073c
 8003e50:	20000004 	.word	0x20000004

08003e54 <menu_prev>:
void menu_prev(void){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	currentPointer = currentPointer -> prev;
 8003e58:	4b14      	ldr	r3, [pc, #80]	; (8003eac <menu_prev+0x58>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <menu_prev+0x58>)
 8003e60:	6013      	str	r3, [r2, #0]
	if (menu_index){
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <menu_prev+0x5c>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d010      	beq.n	8003e8c <menu_prev+0x38>
		menu_index--;
 8003e6a:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <menu_prev+0x5c>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <menu_prev+0x5c>)
 8003e74:	701a      	strb	r2, [r3, #0]
		if (lcd_row_pos > 0) lcd_row_pos--;
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <menu_prev+0x60>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d012      	beq.n	8003ea4 <menu_prev+0x50>
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <menu_prev+0x60>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <menu_prev+0x60>)
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e00b      	b.n	8003ea4 <menu_prev+0x50>
	}
	else{
		menu_index = menu_get_index(currentPointer);
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <menu_prev+0x58>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fead 	bl	8003bf0 <menu_get_index>
 8003e96:	4603      	mov	r3, r0
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <menu_prev+0x5c>)
 8003e9c:	701a      	strb	r2, [r3, #0]
		if (menu_index >= LCD_Y - 2) lcd_row_pos = LCD_Y - 2;
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <menu_prev+0x60>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
		else lcd_row_pos = menu_index;
	}
	menu_refresh();
 8003ea4:	f7ff fe26 	bl	8003af4 <menu_refresh>
}
 8003ea8:	bf00      	nop
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200001b4 	.word	0x200001b4
 8003eb0:	2000073b 	.word	0x2000073b
 8003eb4:	2000073c 	.word	0x2000073c

08003eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_MspInit+0x5c>)
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <HAL_MspInit+0x5c>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6193      	str	r3, [r2, #24]
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_MspInit+0x5c>)
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <HAL_MspInit+0x5c>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <HAL_MspInit+0x5c>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	61d3      	str	r3, [r2, #28]
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <HAL_MspInit+0x5c>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_MspInit+0x60>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <HAL_MspInit+0x60>)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40010000 	.word	0x40010000

08003f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f20:	e7fe      	b.n	8003f20 <NMI_Handler+0x4>

08003f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f22:	b480      	push	{r7}
 8003f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f26:	e7fe      	b.n	8003f26 <HardFault_Handler+0x4>

08003f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f2c:	e7fe      	b.n	8003f2c <MemManage_Handler+0x4>

08003f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f32:	e7fe      	b.n	8003f32 <BusFault_Handler+0x4>

08003f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f38:	e7fe      	b.n	8003f38 <UsageFault_Handler+0x4>

08003f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f62:	f000 fb75 	bl	8004650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <TIM2_IRQHandler+0x10>)
 8003f72:	f002 fd07 	bl	8006984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000788 	.word	0x20000788

08003f80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <TIM3_IRQHandler+0x10>)
 8003f86:	f002 fcfd 	bl	8006984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000740 	.word	0x20000740

08003f94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <USART1_IRQHandler+0x10>)
 8003f9a:	f003 fbcf 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200005e0 	.word	0x200005e0

08003fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fac:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <USART2_IRQHandler+0x10>)
 8003fae:	f003 fbc5 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200007d0 	.word	0x200007d0

08003fbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(key_enter_Pin);
 8003fc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fc4:	f000 ff0e 	bl	8004de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
	return 1;
 8003fd0:	2301      	movs	r3, #1
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <_kill>:

int _kill(int pid, int sig)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003fe4:	f003 ffda 	bl	8007f9c <__errno>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2216      	movs	r2, #22
 8003fec:	601a      	str	r2, [r3, #0]
	return -1;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_exit>:

void _exit (int status)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004002:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ffe7 	bl	8003fda <_kill>
	while (1) {}		/* Make sure we hang here */
 800400c:	e7fe      	b.n	800400c <_exit+0x12>

0800400e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e00a      	b.n	8004036 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004020:	f3af 8000 	nop.w
 8004024:	4601      	mov	r1, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	60ba      	str	r2, [r7, #8]
 800402c:	b2ca      	uxtb	r2, r1
 800402e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3301      	adds	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	429a      	cmp	r2, r3
 800403c:	dbf0      	blt.n	8004020 <_read+0x12>
	}

return len;
 800403e:	687b      	ldr	r3, [r7, #4]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e009      	b.n	800406e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	60ba      	str	r2, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	3301      	adds	r3, #1
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	dbf1      	blt.n	800405a <_write+0x12>
	}
	return len;
 8004076:	687b      	ldr	r3, [r7, #4]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <_close>:

int _close(int file)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	return -1;
 8004088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040a6:	605a      	str	r2, [r3, #4]
	return 0;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <_isatty>:

int _isatty(int file)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	return 1;
 80040bc:	2301      	movs	r3, #1
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
	return 0;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <_sbrk+0x5c>)
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <_sbrk+0x60>)
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <_sbrk+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <_sbrk+0x64>)
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <_sbrk+0x68>)
 8004100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <_sbrk+0x64>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4413      	add	r3, r2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	429a      	cmp	r2, r3
 800410e:	d207      	bcs.n	8004120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004110:	f003 ff44 	bl	8007f9c <__errno>
 8004114:	4603      	mov	r3, r0
 8004116:	220c      	movs	r2, #12
 8004118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800411a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800411e:	e009      	b.n	8004134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <_sbrk+0x64>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <_sbrk+0x64>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	4a05      	ldr	r2, [pc, #20]	; (8004144 <_sbrk+0x64>)
 8004130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20005000 	.word	0x20005000
 8004140:	00000400 	.word	0x00000400
 8004144:	200003cc 	.word	0x200003cc
 8004148:	20000828 	.word	0x20000828

0800414c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	; 0x38
 800415c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416c:	f107 0320 	add.w	r3, r7, #32
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	60da      	str	r2, [r3, #12]
 8004182:	611a      	str	r2, [r3, #16]
 8004184:	615a      	str	r2, [r3, #20]
 8004186:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004188:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <MX_TIM2_Init+0xe8>)
 800418a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800418e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000;
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <MX_TIM2_Init+0xe8>)
 8004192:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004196:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004198:	4b29      	ldr	r3, [pc, #164]	; (8004240 <MX_TIM2_Init+0xe8>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 800419e:	4b28      	ldr	r3, [pc, #160]	; (8004240 <MX_TIM2_Init+0xe8>)
 80041a0:	225a      	movs	r2, #90	; 0x5a
 80041a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a4:	4b26      	ldr	r3, [pc, #152]	; (8004240 <MX_TIM2_Init+0xe8>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041aa:	4b25      	ldr	r3, [pc, #148]	; (8004240 <MX_TIM2_Init+0xe8>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041b0:	4823      	ldr	r0, [pc, #140]	; (8004240 <MX_TIM2_Init+0xe8>)
 80041b2:	f002 fa53 	bl	800665c <HAL_TIM_Base_Init>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80041bc:	f7ff fc94 	bl	8003ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ca:	4619      	mov	r1, r3
 80041cc:	481c      	ldr	r0, [pc, #112]	; (8004240 <MX_TIM2_Init+0xe8>)
 80041ce:	f002 fd9f 	bl	8006d10 <HAL_TIM_ConfigClockSource>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80041d8:	f7ff fc86 	bl	8003ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041dc:	4818      	ldr	r0, [pc, #96]	; (8004240 <MX_TIM2_Init+0xe8>)
 80041de:	f002 fad7 	bl	8006790 <HAL_TIM_PWM_Init>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80041e8:	f7ff fc7e 	bl	8003ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041f4:	f107 0320 	add.w	r3, r7, #32
 80041f8:	4619      	mov	r1, r3
 80041fa:	4811      	ldr	r0, [pc, #68]	; (8004240 <MX_TIM2_Init+0xe8>)
 80041fc:	f003 f91e 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004206:	f7ff fc6f 	bl	8003ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800420a:	2360      	movs	r3, #96	; 0x60
 800420c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	2200      	movs	r2, #0
 800421e:	4619      	mov	r1, r3
 8004220:	4807      	ldr	r0, [pc, #28]	; (8004240 <MX_TIM2_Init+0xe8>)
 8004222:	f002 fcb7 	bl	8006b94 <HAL_TIM_PWM_ConfigChannel>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800422c:	f7ff fc5c 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004230:	4803      	ldr	r0, [pc, #12]	; (8004240 <MX_TIM2_Init+0xe8>)
 8004232:	f000 f895 	bl	8004360 <HAL_TIM_MspPostInit>

}
 8004236:	bf00      	nop
 8004238:	3738      	adds	r7, #56	; 0x38
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000788 	.word	0x20000788

08004244 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800424a:	f107 0308 	add.w	r3, r7, #8
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004258:	463b      	mov	r3, r7
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <MX_TIM3_Init+0x94>)
 8004262:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <MX_TIM3_Init+0x98>)
 8004264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8004266:	4b1c      	ldr	r3, [pc, #112]	; (80042d8 <MX_TIM3_Init+0x94>)
 8004268:	223f      	movs	r2, #63	; 0x3f
 800426a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <MX_TIM3_Init+0x94>)
 800426e:	2200      	movs	r2, #0
 8004270:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004272:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <MX_TIM3_Init+0x94>)
 8004274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004278:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <MX_TIM3_Init+0x94>)
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004280:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <MX_TIM3_Init+0x94>)
 8004282:	2200      	movs	r2, #0
 8004284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004286:	4814      	ldr	r0, [pc, #80]	; (80042d8 <MX_TIM3_Init+0x94>)
 8004288:	f002 f9e8 	bl	800665c <HAL_TIM_Base_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004292:	f7ff fc29 	bl	8003ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800429a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800429c:	f107 0308 	add.w	r3, r7, #8
 80042a0:	4619      	mov	r1, r3
 80042a2:	480d      	ldr	r0, [pc, #52]	; (80042d8 <MX_TIM3_Init+0x94>)
 80042a4:	f002 fd34 	bl	8006d10 <HAL_TIM_ConfigClockSource>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80042ae:	f7ff fc1b 	bl	8003ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042ba:	463b      	mov	r3, r7
 80042bc:	4619      	mov	r1, r3
 80042be:	4806      	ldr	r0, [pc, #24]	; (80042d8 <MX_TIM3_Init+0x94>)
 80042c0:	f003 f8bc 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80042ca:	f7ff fc0d 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000740 	.word	0x20000740
 80042dc:	40000400 	.word	0x40000400

080042e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f0:	d114      	bne.n	800431c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_TIM_Base_MspInit+0x78>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_TIM_Base_MspInit+0x78>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	61d3      	str	r3, [r2, #28]
 80042fe:	4b16      	ldr	r3, [pc, #88]	; (8004358 <HAL_TIM_Base_MspInit+0x78>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	201c      	movs	r0, #28
 8004310:	f000 fab5 	bl	800487e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004314:	201c      	movs	r0, #28
 8004316:	f000 face 	bl	80048b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800431a:	e018      	b.n	800434e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0e      	ldr	r2, [pc, #56]	; (800435c <HAL_TIM_Base_MspInit+0x7c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d113      	bne.n	800434e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_TIM_Base_MspInit+0x78>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <HAL_TIM_Base_MspInit+0x78>)
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	61d3      	str	r3, [r2, #28]
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_TIM_Base_MspInit+0x78>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	201d      	movs	r0, #29
 8004344:	f000 fa9b 	bl	800487e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004348:	201d      	movs	r0, #29
 800434a:	f000 fab4 	bl	80048b6 <HAL_NVIC_EnableIRQ>
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	40000400 	.word	0x40000400

08004360 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437e:	d117      	bne.n	80043b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <HAL_TIM_MspPostInit+0x58>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	4a0c      	ldr	r2, [pc, #48]	; (80043b8 <HAL_TIM_MspPostInit+0x58>)
 8004386:	f043 0304 	orr.w	r3, r3, #4
 800438a:	6193      	str	r3, [r2, #24]
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_TIM_MspPostInit+0x58>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_Brightness_Pin;
 8004398:	2301      	movs	r3, #1
 800439a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439c:	2302      	movs	r3, #2
 800439e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a0:	2302      	movs	r3, #2
 80043a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_Brightness_GPIO_Port, &GPIO_InitStruct);
 80043a4:	f107 0310 	add.w	r3, r7, #16
 80043a8:	4619      	mov	r1, r3
 80043aa:	4804      	ldr	r0, [pc, #16]	; (80043bc <HAL_TIM_MspPostInit+0x5c>)
 80043ac:	f000 fb4e 	bl	8004a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80043b0:	bf00      	nop
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40010800 	.word	0x40010800

080043c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <MX_USART1_UART_Init+0x50>)
 80043c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80043d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043da:	2200      	movs	r2, #0
 80043dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043e6:	220c      	movs	r2, #12
 80043e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ea:	4b08      	ldr	r3, [pc, #32]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043f6:	4805      	ldr	r0, [pc, #20]	; (800440c <MX_USART1_UART_Init+0x4c>)
 80043f8:	f003 f890 	bl	800751c <HAL_UART_Init>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004402:	f7ff fb71 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200005e0 	.word	0x200005e0
 8004410:	40013800 	.word	0x40013800

08004414 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <MX_USART2_UART_Init+0x50>)
 800441c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 8004420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 800442e:	2200      	movs	r2, #0
 8004430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 800443a:	220c      	movs	r2, #12
 800443c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800444a:	4805      	ldr	r0, [pc, #20]	; (8004460 <MX_USART2_UART_Init+0x4c>)
 800444c:	f003 f866 	bl	800751c <HAL_UART_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004456:	f7ff fb47 	bl	8003ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200007d0 	.word	0x200007d0
 8004464:	40004400 	.word	0x40004400

08004468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004470:	f107 0318 	add.w	r3, r7, #24
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a39      	ldr	r2, [pc, #228]	; (8004568 <HAL_UART_MspInit+0x100>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d13a      	bne.n	80044fe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004488:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_UART_MspInit+0x104>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	4a37      	ldr	r2, [pc, #220]	; (800456c <HAL_UART_MspInit+0x104>)
 800448e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004492:	6193      	str	r3, [r2, #24]
 8004494:	4b35      	ldr	r3, [pc, #212]	; (800456c <HAL_UART_MspInit+0x104>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a0:	4b32      	ldr	r3, [pc, #200]	; (800456c <HAL_UART_MspInit+0x104>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	4a31      	ldr	r2, [pc, #196]	; (800456c <HAL_UART_MspInit+0x104>)
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	6193      	str	r3, [r2, #24]
 80044ac:	4b2f      	ldr	r3, [pc, #188]	; (800456c <HAL_UART_MspInit+0x104>)
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044be:	2302      	movs	r3, #2
 80044c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044c2:	2303      	movs	r3, #3
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c6:	f107 0318 	add.w	r3, r7, #24
 80044ca:	4619      	mov	r1, r3
 80044cc:	4828      	ldr	r0, [pc, #160]	; (8004570 <HAL_UART_MspInit+0x108>)
 80044ce:	f000 fabd 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e0:	f107 0318 	add.w	r3, r7, #24
 80044e4:	4619      	mov	r1, r3
 80044e6:	4822      	ldr	r0, [pc, #136]	; (8004570 <HAL_UART_MspInit+0x108>)
 80044e8:	f000 fab0 	bl	8004a4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	2025      	movs	r0, #37	; 0x25
 80044f2:	f000 f9c4 	bl	800487e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044f6:	2025      	movs	r0, #37	; 0x25
 80044f8:	f000 f9dd 	bl	80048b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80044fc:	e030      	b.n	8004560 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1c      	ldr	r2, [pc, #112]	; (8004574 <HAL_UART_MspInit+0x10c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d12b      	bne.n	8004560 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_UART_MspInit+0x104>)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <HAL_UART_MspInit+0x104>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004512:	61d3      	str	r3, [r2, #28]
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <HAL_UART_MspInit+0x104>)
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_UART_MspInit+0x104>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4a11      	ldr	r2, [pc, #68]	; (800456c <HAL_UART_MspInit+0x104>)
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	6193      	str	r3, [r2, #24]
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_UART_MspInit+0x104>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004538:	230c      	movs	r3, #12
 800453a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453c:	2302      	movs	r3, #2
 800453e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004540:	2302      	movs	r3, #2
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004544:	f107 0318 	add.w	r3, r7, #24
 8004548:	4619      	mov	r1, r3
 800454a:	4809      	ldr	r0, [pc, #36]	; (8004570 <HAL_UART_MspInit+0x108>)
 800454c:	f000 fa7e 	bl	8004a4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004550:	2200      	movs	r2, #0
 8004552:	2100      	movs	r1, #0
 8004554:	2026      	movs	r0, #38	; 0x26
 8004556:	f000 f992 	bl	800487e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800455a:	2026      	movs	r0, #38	; 0x26
 800455c:	f000 f9ab 	bl	80048b6 <HAL_NVIC_EnableIRQ>
}
 8004560:	bf00      	nop
 8004562:	3728      	adds	r7, #40	; 0x28
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40013800 	.word	0x40013800
 800456c:	40021000 	.word	0x40021000
 8004570:	40010800 	.word	0x40010800
 8004574:	40004400 	.word	0x40004400

08004578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004578:	480c      	ldr	r0, [pc, #48]	; (80045ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800457a:	490d      	ldr	r1, [pc, #52]	; (80045b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800457c:	4a0d      	ldr	r2, [pc, #52]	; (80045b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004580:	e002      	b.n	8004588 <LoopCopyDataInit>

08004582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004586:	3304      	adds	r3, #4

08004588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800458a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800458c:	d3f9      	bcc.n	8004582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800458e:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004590:	4c0a      	ldr	r4, [pc, #40]	; (80045bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004594:	e001      	b.n	800459a <LoopFillZerobss>

08004596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004598:	3204      	adds	r2, #4

0800459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800459a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800459c:	d3fb      	bcc.n	8004596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800459e:	f7ff fdd5 	bl	800414c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045a2:	f003 fd01 	bl	8007fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045a6:	f7ff f867 	bl	8003678 <main>
  bx lr
 80045aa:	4770      	bx	lr
  ldr r0, =_sdata
 80045ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b0:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 80045b4:	0800d180 	.word	0x0800d180
  ldr r2, =_sbss
 80045b8:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 80045bc:	20000828 	.word	0x20000828

080045c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045c0:	e7fe      	b.n	80045c0 <ADC1_2_IRQHandler>
	...

080045c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_Init+0x28>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a07      	ldr	r2, [pc, #28]	; (80045ec <HAL_Init+0x28>)
 80045ce:	f043 0310 	orr.w	r3, r3, #16
 80045d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d4:	2003      	movs	r0, #3
 80045d6:	f000 f947 	bl	8004868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045da:	2000      	movs	r0, #0
 80045dc:	f000 f808 	bl	80045f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045e0:	f7ff fc6a 	bl	8003eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40022000 	.word	0x40022000

080045f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_InitTick+0x54>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <HAL_InitTick+0x58>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	4619      	mov	r1, r3
 8004602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004606:	fbb3 f3f1 	udiv	r3, r3, r1
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f95f 	bl	80048d2 <HAL_SYSTICK_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e00e      	b.n	800463c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b0f      	cmp	r3, #15
 8004622:	d80a      	bhi.n	800463a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004624:	2200      	movs	r2, #0
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800462c:	f000 f927 	bl	800487e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004630:	4a06      	ldr	r2, [pc, #24]	; (800464c <HAL_InitTick+0x5c>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200001c8 	.word	0x200001c8
 8004648:	200001d0 	.word	0x200001d0
 800464c:	200001cc 	.word	0x200001cc

08004650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_IncTick+0x1c>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_IncTick+0x20>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4413      	add	r3, r2
 8004660:	4a03      	ldr	r2, [pc, #12]	; (8004670 <HAL_IncTick+0x20>)
 8004662:	6013      	str	r3, [r2, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	200001d0 	.word	0x200001d0
 8004670:	20000814 	.word	0x20000814

08004674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return uwTick;
 8004678:	4b02      	ldr	r3, [pc, #8]	; (8004684 <HAL_GetTick+0x10>)
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr
 8004684:	20000814 	.word	0x20000814

08004688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004690:	f7ff fff0 	bl	8004674 <HAL_GetTick>
 8004694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a0:	d005      	beq.n	80046ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046a2:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <HAL_Delay+0x44>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046ae:	bf00      	nop
 80046b0:	f7ff ffe0 	bl	8004674 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d8f7      	bhi.n	80046b0 <HAL_Delay+0x28>
  {
  }
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200001d0 	.word	0x200001d0

080046d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <__NVIC_SetPriorityGrouping+0x44>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046ec:	4013      	ands	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004702:	4a04      	ldr	r2, [pc, #16]	; (8004714 <__NVIC_SetPriorityGrouping+0x44>)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	60d3      	str	r3, [r2, #12]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <__NVIC_GetPriorityGrouping+0x18>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	f003 0307 	and.w	r3, r3, #7
}
 8004726:	4618      	mov	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	2b00      	cmp	r3, #0
 8004744:	db0b      	blt.n	800475e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	f003 021f 	and.w	r2, r3, #31
 800474c:	4906      	ldr	r1, [pc, #24]	; (8004768 <__NVIC_EnableIRQ+0x34>)
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2001      	movs	r0, #1
 8004756:	fa00 f202 	lsl.w	r2, r0, r2
 800475a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	e000e100 	.word	0xe000e100

0800476c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477c:	2b00      	cmp	r3, #0
 800477e:	db0a      	blt.n	8004796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	b2da      	uxtb	r2, r3
 8004784:	490c      	ldr	r1, [pc, #48]	; (80047b8 <__NVIC_SetPriority+0x4c>)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	0112      	lsls	r2, r2, #4
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	440b      	add	r3, r1
 8004790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004794:	e00a      	b.n	80047ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	4908      	ldr	r1, [pc, #32]	; (80047bc <__NVIC_SetPriority+0x50>)
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	3b04      	subs	r3, #4
 80047a4:	0112      	lsls	r2, r2, #4
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	440b      	add	r3, r1
 80047aa:	761a      	strb	r2, [r3, #24]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000e100 	.word	0xe000e100
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f1c3 0307 	rsb	r3, r3, #7
 80047da:	2b04      	cmp	r3, #4
 80047dc:	bf28      	it	cs
 80047de:	2304      	movcs	r3, #4
 80047e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d902      	bls.n	80047f0 <NVIC_EncodePriority+0x30>
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3b03      	subs	r3, #3
 80047ee:	e000      	b.n	80047f2 <NVIC_EncodePriority+0x32>
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43da      	mvns	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	401a      	ands	r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	43d9      	mvns	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004818:	4313      	orrs	r3, r2
         );
}
 800481a:	4618      	mov	r0, r3
 800481c:	3724      	adds	r7, #36	; 0x24
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3b01      	subs	r3, #1
 8004830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004834:	d301      	bcc.n	800483a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004836:	2301      	movs	r3, #1
 8004838:	e00f      	b.n	800485a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800483a:	4a0a      	ldr	r2, [pc, #40]	; (8004864 <SysTick_Config+0x40>)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3b01      	subs	r3, #1
 8004840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004842:	210f      	movs	r1, #15
 8004844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004848:	f7ff ff90 	bl	800476c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <SysTick_Config+0x40>)
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004852:	4b04      	ldr	r3, [pc, #16]	; (8004864 <SysTick_Config+0x40>)
 8004854:	2207      	movs	r2, #7
 8004856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	e000e010 	.word	0xe000e010

08004868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff ff2d 	bl	80046d0 <__NVIC_SetPriorityGrouping>
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800487e:	b580      	push	{r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	4603      	mov	r3, r0
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
 800488a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004890:	f7ff ff42 	bl	8004718 <__NVIC_GetPriorityGrouping>
 8004894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	6978      	ldr	r0, [r7, #20]
 800489c:	f7ff ff90 	bl	80047c0 <NVIC_EncodePriority>
 80048a0:	4602      	mov	r2, r0
 80048a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a6:	4611      	mov	r1, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff ff5f 	bl	800476c <__NVIC_SetPriority>
}
 80048ae:	bf00      	nop
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	4603      	mov	r3, r0
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff ff35 	bl	8004734 <__NVIC_EnableIRQ>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ffa2 	bl	8004824 <SysTick_Config>
 80048e0:	4603      	mov	r3, r0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d008      	beq.n	8004912 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2204      	movs	r2, #4
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e020      	b.n	8004954 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 020e 	bic.w	r2, r2, #14
 8004920:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	2101      	movs	r1, #1
 800493c:	fa01 f202 	lsl.w	r2, r1, r2
 8004940:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004952:	7bfb      	ldrb	r3, [r7, #15]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
	...

08004960 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004972:	2b02      	cmp	r3, #2
 8004974:	d005      	beq.n	8004982 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2204      	movs	r2, #4
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e051      	b.n	8004a26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 020e 	bic.w	r2, r2, #14
 8004990:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <HAL_DMA_Abort_IT+0xd0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d029      	beq.n	8004a00 <HAL_DMA_Abort_IT+0xa0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a20      	ldr	r2, [pc, #128]	; (8004a34 <HAL_DMA_Abort_IT+0xd4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <HAL_DMA_Abort_IT+0x9c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <HAL_DMA_Abort_IT+0xd8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01a      	beq.n	80049f6 <HAL_DMA_Abort_IT+0x96>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1d      	ldr	r2, [pc, #116]	; (8004a3c <HAL_DMA_Abort_IT+0xdc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d012      	beq.n	80049f0 <HAL_DMA_Abort_IT+0x90>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <HAL_DMA_Abort_IT+0xe0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00a      	beq.n	80049ea <HAL_DMA_Abort_IT+0x8a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <HAL_DMA_Abort_IT+0xe4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d102      	bne.n	80049e4 <HAL_DMA_Abort_IT+0x84>
 80049de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049e2:	e00e      	b.n	8004a02 <HAL_DMA_Abort_IT+0xa2>
 80049e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e8:	e00b      	b.n	8004a02 <HAL_DMA_Abort_IT+0xa2>
 80049ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049ee:	e008      	b.n	8004a02 <HAL_DMA_Abort_IT+0xa2>
 80049f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f4:	e005      	b.n	8004a02 <HAL_DMA_Abort_IT+0xa2>
 80049f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049fa:	e002      	b.n	8004a02 <HAL_DMA_Abort_IT+0xa2>
 80049fc:	2310      	movs	r3, #16
 80049fe:	e000      	b.n	8004a02 <HAL_DMA_Abort_IT+0xa2>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4a11      	ldr	r2, [pc, #68]	; (8004a48 <HAL_DMA_Abort_IT+0xe8>)
 8004a04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
    } 
  }
  return status;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40020008 	.word	0x40020008
 8004a34:	4002001c 	.word	0x4002001c
 8004a38:	40020030 	.word	0x40020030
 8004a3c:	40020044 	.word	0x40020044
 8004a40:	40020058 	.word	0x40020058
 8004a44:	4002006c 	.word	0x4002006c
 8004a48:	40020000 	.word	0x40020000

08004a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b08b      	sub	sp, #44	; 0x2c
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a5e:	e169      	b.n	8004d34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a60:	2201      	movs	r2, #1
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	f040 8158 	bne.w	8004d2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4a9a      	ldr	r2, [pc, #616]	; (8004cec <HAL_GPIO_Init+0x2a0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d05e      	beq.n	8004b46 <HAL_GPIO_Init+0xfa>
 8004a88:	4a98      	ldr	r2, [pc, #608]	; (8004cec <HAL_GPIO_Init+0x2a0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d875      	bhi.n	8004b7a <HAL_GPIO_Init+0x12e>
 8004a8e:	4a98      	ldr	r2, [pc, #608]	; (8004cf0 <HAL_GPIO_Init+0x2a4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d058      	beq.n	8004b46 <HAL_GPIO_Init+0xfa>
 8004a94:	4a96      	ldr	r2, [pc, #600]	; (8004cf0 <HAL_GPIO_Init+0x2a4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d86f      	bhi.n	8004b7a <HAL_GPIO_Init+0x12e>
 8004a9a:	4a96      	ldr	r2, [pc, #600]	; (8004cf4 <HAL_GPIO_Init+0x2a8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d052      	beq.n	8004b46 <HAL_GPIO_Init+0xfa>
 8004aa0:	4a94      	ldr	r2, [pc, #592]	; (8004cf4 <HAL_GPIO_Init+0x2a8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d869      	bhi.n	8004b7a <HAL_GPIO_Init+0x12e>
 8004aa6:	4a94      	ldr	r2, [pc, #592]	; (8004cf8 <HAL_GPIO_Init+0x2ac>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d04c      	beq.n	8004b46 <HAL_GPIO_Init+0xfa>
 8004aac:	4a92      	ldr	r2, [pc, #584]	; (8004cf8 <HAL_GPIO_Init+0x2ac>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d863      	bhi.n	8004b7a <HAL_GPIO_Init+0x12e>
 8004ab2:	4a92      	ldr	r2, [pc, #584]	; (8004cfc <HAL_GPIO_Init+0x2b0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d046      	beq.n	8004b46 <HAL_GPIO_Init+0xfa>
 8004ab8:	4a90      	ldr	r2, [pc, #576]	; (8004cfc <HAL_GPIO_Init+0x2b0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d85d      	bhi.n	8004b7a <HAL_GPIO_Init+0x12e>
 8004abe:	2b12      	cmp	r3, #18
 8004ac0:	d82a      	bhi.n	8004b18 <HAL_GPIO_Init+0xcc>
 8004ac2:	2b12      	cmp	r3, #18
 8004ac4:	d859      	bhi.n	8004b7a <HAL_GPIO_Init+0x12e>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <HAL_GPIO_Init+0x80>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004b47 	.word	0x08004b47
 8004ad0:	08004b21 	.word	0x08004b21
 8004ad4:	08004b33 	.word	0x08004b33
 8004ad8:	08004b75 	.word	0x08004b75
 8004adc:	08004b7b 	.word	0x08004b7b
 8004ae0:	08004b7b 	.word	0x08004b7b
 8004ae4:	08004b7b 	.word	0x08004b7b
 8004ae8:	08004b7b 	.word	0x08004b7b
 8004aec:	08004b7b 	.word	0x08004b7b
 8004af0:	08004b7b 	.word	0x08004b7b
 8004af4:	08004b7b 	.word	0x08004b7b
 8004af8:	08004b7b 	.word	0x08004b7b
 8004afc:	08004b7b 	.word	0x08004b7b
 8004b00:	08004b7b 	.word	0x08004b7b
 8004b04:	08004b7b 	.word	0x08004b7b
 8004b08:	08004b7b 	.word	0x08004b7b
 8004b0c:	08004b7b 	.word	0x08004b7b
 8004b10:	08004b29 	.word	0x08004b29
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	4a79      	ldr	r2, [pc, #484]	; (8004d00 <HAL_GPIO_Init+0x2b4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b1e:	e02c      	b.n	8004b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	623b      	str	r3, [r7, #32]
          break;
 8004b26:	e029      	b.n	8004b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	623b      	str	r3, [r7, #32]
          break;
 8004b30:	e024      	b.n	8004b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	3308      	adds	r3, #8
 8004b38:	623b      	str	r3, [r7, #32]
          break;
 8004b3a:	e01f      	b.n	8004b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	330c      	adds	r3, #12
 8004b42:	623b      	str	r3, [r7, #32]
          break;
 8004b44:	e01a      	b.n	8004b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b4e:	2304      	movs	r3, #4
 8004b50:	623b      	str	r3, [r7, #32]
          break;
 8004b52:	e013      	b.n	8004b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	611a      	str	r2, [r3, #16]
          break;
 8004b66:	e009      	b.n	8004b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b68:	2308      	movs	r3, #8
 8004b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	615a      	str	r2, [r3, #20]
          break;
 8004b72:	e003      	b.n	8004b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b74:	2300      	movs	r3, #0
 8004b76:	623b      	str	r3, [r7, #32]
          break;
 8004b78:	e000      	b.n	8004b7c <HAL_GPIO_Init+0x130>
          break;
 8004b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2bff      	cmp	r3, #255	; 0xff
 8004b80:	d801      	bhi.n	8004b86 <HAL_GPIO_Init+0x13a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	e001      	b.n	8004b8a <HAL_GPIO_Init+0x13e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2bff      	cmp	r3, #255	; 0xff
 8004b90:	d802      	bhi.n	8004b98 <HAL_GPIO_Init+0x14c>
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	e002      	b.n	8004b9e <HAL_GPIO_Init+0x152>
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	3b08      	subs	r3, #8
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	210f      	movs	r1, #15
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	401a      	ands	r2, r3
 8004bb0:	6a39      	ldr	r1, [r7, #32]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80b1 	beq.w	8004d2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004bcc:	4b4d      	ldr	r3, [pc, #308]	; (8004d04 <HAL_GPIO_Init+0x2b8>)
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	4a4c      	ldr	r2, [pc, #304]	; (8004d04 <HAL_GPIO_Init+0x2b8>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	6193      	str	r3, [r2, #24]
 8004bd8:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <HAL_GPIO_Init+0x2b8>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004be4:	4a48      	ldr	r2, [pc, #288]	; (8004d08 <HAL_GPIO_Init+0x2bc>)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	3302      	adds	r3, #2
 8004bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	220f      	movs	r2, #15
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4013      	ands	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a40      	ldr	r2, [pc, #256]	; (8004d0c <HAL_GPIO_Init+0x2c0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d013      	beq.n	8004c38 <HAL_GPIO_Init+0x1ec>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a3f      	ldr	r2, [pc, #252]	; (8004d10 <HAL_GPIO_Init+0x2c4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00d      	beq.n	8004c34 <HAL_GPIO_Init+0x1e8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a3e      	ldr	r2, [pc, #248]	; (8004d14 <HAL_GPIO_Init+0x2c8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d007      	beq.n	8004c30 <HAL_GPIO_Init+0x1e4>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a3d      	ldr	r2, [pc, #244]	; (8004d18 <HAL_GPIO_Init+0x2cc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d101      	bne.n	8004c2c <HAL_GPIO_Init+0x1e0>
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e006      	b.n	8004c3a <HAL_GPIO_Init+0x1ee>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	e004      	b.n	8004c3a <HAL_GPIO_Init+0x1ee>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e002      	b.n	8004c3a <HAL_GPIO_Init+0x1ee>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_GPIO_Init+0x1ee>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3c:	f002 0203 	and.w	r2, r2, #3
 8004c40:	0092      	lsls	r2, r2, #2
 8004c42:	4093      	lsls	r3, r2
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004c4a:	492f      	ldr	r1, [pc, #188]	; (8004d08 <HAL_GPIO_Init+0x2bc>)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	3302      	adds	r3, #2
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c64:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	492c      	ldr	r1, [pc, #176]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	600b      	str	r3, [r1, #0]
 8004c70:	e006      	b.n	8004c80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c72:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	4928      	ldr	r1, [pc, #160]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d006      	beq.n	8004c9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c8c:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	4922      	ldr	r1, [pc, #136]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	604b      	str	r3, [r1, #4]
 8004c98:	e006      	b.n	8004ca8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c9a:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	491e      	ldr	r1, [pc, #120]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d006      	beq.n	8004cc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004cb4:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	4918      	ldr	r1, [pc, #96]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
 8004cc0:	e006      	b.n	8004cd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	4914      	ldr	r1, [pc, #80]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d021      	beq.n	8004d20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	490e      	ldr	r1, [pc, #56]	; (8004d1c <HAL_GPIO_Init+0x2d0>)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60cb      	str	r3, [r1, #12]
 8004ce8:	e021      	b.n	8004d2e <HAL_GPIO_Init+0x2e2>
 8004cea:	bf00      	nop
 8004cec:	10320000 	.word	0x10320000
 8004cf0:	10310000 	.word	0x10310000
 8004cf4:	10220000 	.word	0x10220000
 8004cf8:	10210000 	.word	0x10210000
 8004cfc:	10120000 	.word	0x10120000
 8004d00:	10110000 	.word	0x10110000
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	40010800 	.word	0x40010800
 8004d10:	40010c00 	.word	0x40010c00
 8004d14:	40011000 	.word	0x40011000
 8004d18:	40011400 	.word	0x40011400
 8004d1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_GPIO_Init+0x304>)
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	4909      	ldr	r1, [pc, #36]	; (8004d50 <HAL_GPIO_Init+0x304>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	3301      	adds	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f47f ae8e 	bne.w	8004a60 <HAL_GPIO_Init+0x14>
  }
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	372c      	adds	r7, #44	; 0x2c
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	40010400 	.word	0x40010400

08004d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	887b      	ldrh	r3, [r7, #2]
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
 8004d70:	e001      	b.n	8004d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	807b      	strh	r3, [r7, #2]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d92:	787b      	ldrb	r3, [r7, #1]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d98:	887a      	ldrh	r2, [r7, #2]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004d9e:	e003      	b.n	8004da8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004da0:	887b      	ldrh	r3, [r7, #2]
 8004da2:	041a      	lsls	r2, r3, #16
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	611a      	str	r2, [r3, #16]
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dc4:	887a      	ldrh	r2, [r7, #2]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	041a      	lsls	r2, r3, #16
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	43d9      	mvns	r1, r3
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	400b      	ands	r3, r1
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	611a      	str	r2, [r3, #16]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr

08004de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d006      	beq.n	8004e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dfa:	4a05      	ldr	r2, [pc, #20]	; (8004e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
 8004dfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f806 	bl	8004e14 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e08:	bf00      	nop
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40010400 	.word	0x40010400

08004e14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e12b      	b.n	8005092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fe fbc2 	bl	80035d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	; 0x24
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e8c:	f001 fba0 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 8004e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4a81      	ldr	r2, [pc, #516]	; (800509c <HAL_I2C_Init+0x274>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d807      	bhi.n	8004eac <HAL_I2C_Init+0x84>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a80      	ldr	r2, [pc, #512]	; (80050a0 <HAL_I2C_Init+0x278>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	bf94      	ite	ls
 8004ea4:	2301      	movls	r3, #1
 8004ea6:	2300      	movhi	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	e006      	b.n	8004eba <HAL_I2C_Init+0x92>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a7d      	ldr	r2, [pc, #500]	; (80050a4 <HAL_I2C_Init+0x27c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	bf94      	ite	ls
 8004eb4:	2301      	movls	r3, #1
 8004eb6:	2300      	movhi	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0e7      	b.n	8005092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a78      	ldr	r2, [pc, #480]	; (80050a8 <HAL_I2C_Init+0x280>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	0c9b      	lsrs	r3, r3, #18
 8004ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4a6a      	ldr	r2, [pc, #424]	; (800509c <HAL_I2C_Init+0x274>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d802      	bhi.n	8004efc <HAL_I2C_Init+0xd4>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	e009      	b.n	8004f10 <HAL_I2C_Init+0xe8>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	4a69      	ldr	r2, [pc, #420]	; (80050ac <HAL_I2C_Init+0x284>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	099b      	lsrs	r3, r3, #6
 8004f0e:	3301      	adds	r3, #1
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	495c      	ldr	r1, [pc, #368]	; (800509c <HAL_I2C_Init+0x274>)
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	d819      	bhi.n	8004f64 <HAL_I2C_Init+0x13c>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1e59      	subs	r1, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f3e:	1c59      	adds	r1, r3, #1
 8004f40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f44:	400b      	ands	r3, r1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_I2C_Init+0x138>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1e59      	subs	r1, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f5e:	e051      	b.n	8005004 <HAL_I2C_Init+0x1dc>
 8004f60:	2304      	movs	r3, #4
 8004f62:	e04f      	b.n	8005004 <HAL_I2C_Init+0x1dc>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d111      	bne.n	8004f90 <HAL_I2C_Init+0x168>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1e58      	subs	r0, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	440b      	add	r3, r1
 8004f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e012      	b.n	8004fb6 <HAL_I2C_Init+0x18e>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1e58      	subs	r0, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	0099      	lsls	r1, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Init+0x196>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e022      	b.n	8005004 <HAL_I2C_Init+0x1dc>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_I2C_Init+0x1bc>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1e58      	subs	r0, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	440b      	add	r3, r1
 8004fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe2:	e00f      	b.n	8005004 <HAL_I2C_Init+0x1dc>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1e58      	subs	r0, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	0099      	lsls	r1, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	6809      	ldr	r1, [r1, #0]
 8005008:	4313      	orrs	r3, r2
 800500a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69da      	ldr	r2, [r3, #28]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6911      	ldr	r1, [r2, #16]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68d2      	ldr	r2, [r2, #12]
 800503e:	4311      	orrs	r1, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	430b      	orrs	r3, r1
 8005046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	000186a0 	.word	0x000186a0
 80050a0:	001e847f 	.word	0x001e847f
 80050a4:	003d08ff 	.word	0x003d08ff
 80050a8:	431bde83 	.word	0x431bde83
 80050ac:	10624dd3 	.word	0x10624dd3

080050b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	817b      	strh	r3, [r7, #10]
 80050c2:	460b      	mov	r3, r1
 80050c4:	813b      	strh	r3, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050ca:	f7ff fad3 	bl	8004674 <HAL_GetTick>
 80050ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b20      	cmp	r3, #32
 80050da:	f040 80d9 	bne.w	8005290 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	2319      	movs	r3, #25
 80050e4:	2201      	movs	r2, #1
 80050e6:	496d      	ldr	r1, [pc, #436]	; (800529c <HAL_I2C_Mem_Write+0x1ec>)
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fcc1 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
 80050f6:	e0cc      	b.n	8005292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_I2C_Mem_Write+0x56>
 8005102:	2302      	movs	r3, #2
 8005104:	e0c5      	b.n	8005292 <HAL_I2C_Mem_Write+0x1e2>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d007      	beq.n	800512c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800513a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2221      	movs	r2, #33	; 0x21
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2240      	movs	r2, #64	; 0x40
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800515c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4a4d      	ldr	r2, [pc, #308]	; (80052a0 <HAL_I2C_Mem_Write+0x1f0>)
 800516c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800516e:	88f8      	ldrh	r0, [r7, #6]
 8005170:	893a      	ldrh	r2, [r7, #8]
 8005172:	8979      	ldrh	r1, [r7, #10]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	4603      	mov	r3, r0
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 faf8 	bl	8005774 <I2C_RequestMemoryWrite>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d052      	beq.n	8005230 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e081      	b.n	8005292 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fd42 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00d      	beq.n	80051ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d107      	bne.n	80051b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e06b      	b.n	8005292 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d11b      	bne.n	8005230 <HAL_I2C_Mem_Write+0x180>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d017      	beq.n	8005230 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	781a      	ldrb	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1aa      	bne.n	800518e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fd2e 	bl	8005c9e <I2C_WaitOnBTFFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	2b04      	cmp	r3, #4
 800524e:	d107      	bne.n	8005260 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e016      	b.n	8005292 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	00100002 	.word	0x00100002
 80052a0:	ffff0000 	.word	0xffff0000

080052a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	4608      	mov	r0, r1
 80052ae:	4611      	mov	r1, r2
 80052b0:	461a      	mov	r2, r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	817b      	strh	r3, [r7, #10]
 80052b6:	460b      	mov	r3, r1
 80052b8:	813b      	strh	r3, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052c2:	f7ff f9d7 	bl	8004674 <HAL_GetTick>
 80052c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	f040 8244 	bne.w	800575e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2319      	movs	r3, #25
 80052dc:	2201      	movs	r2, #1
 80052de:	4982      	ldr	r1, [pc, #520]	; (80054e8 <HAL_I2C_Mem_Read+0x244>)
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fbc5 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
 80052ee:	e237      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_I2C_Mem_Read+0x5a>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e230      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b01      	cmp	r3, #1
 8005312:	d007      	beq.n	8005324 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2222      	movs	r2, #34	; 0x22
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2240      	movs	r2, #64	; 0x40
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a62      	ldr	r2, [pc, #392]	; (80054ec <HAL_I2C_Mem_Read+0x248>)
 8005364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005366:	88f8      	ldrh	r0, [r7, #6]
 8005368:	893a      	ldrh	r2, [r7, #8]
 800536a:	8979      	ldrh	r1, [r7, #10]
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	4603      	mov	r3, r0
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fa92 	bl	80058a0 <I2C_RequestMemoryRead>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e1ec      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d113      	bne.n	80053b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e1c0      	b.n	8005738 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d11e      	bne.n	80053fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053ce:	b672      	cpsid	i
}
 80053d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053f8:	b662      	cpsie	i
}
 80053fa:	e035      	b.n	8005468 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	2b02      	cmp	r3, #2
 8005402:	d11e      	bne.n	8005442 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005412:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005414:	b672      	cpsid	i
}
 8005416:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800543e:	b662      	cpsie	i
}
 8005440:	e012      	b.n	8005468 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005450:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005452:	2300      	movs	r3, #0
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005468:	e166      	b.n	8005738 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	2b03      	cmp	r3, #3
 8005470:	f200 811f 	bhi.w	80056b2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005478:	2b01      	cmp	r3, #1
 800547a:	d123      	bne.n	80054c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fc4d 	bl	8005d20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e167      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054c2:	e139      	b.n	8005738 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d152      	bne.n	8005572 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	2200      	movs	r2, #0
 80054d4:	4906      	ldr	r1, [pc, #24]	; (80054f0 <HAL_I2C_Mem_Read+0x24c>)
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 faca 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e13c      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
 80054e6:	bf00      	nop
 80054e8:	00100002 	.word	0x00100002
 80054ec:	ffff0000 	.word	0xffff0000
 80054f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80054f4:	b672      	cpsid	i
}
 80054f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800553a:	b662      	cpsie	i
}
 800553c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005570:	e0e2      	b.n	8005738 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	2200      	movs	r2, #0
 800557a:	497b      	ldr	r1, [pc, #492]	; (8005768 <HAL_I2C_Mem_Read+0x4c4>)
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fa77 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0e9      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800559c:	b672      	cpsid	i
}
 800559e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055d2:	4b66      	ldr	r3, [pc, #408]	; (800576c <HAL_I2C_Mem_Read+0x4c8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	08db      	lsrs	r3, r3, #3
 80055d8:	4a65      	ldr	r2, [pc, #404]	; (8005770 <HAL_I2C_Mem_Read+0x4cc>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	0a1a      	lsrs	r2, r3, #8
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	00da      	lsls	r2, r3, #3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d118      	bne.n	800562a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800561a:	b662      	cpsie	i
}
 800561c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e09a      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b04      	cmp	r3, #4
 8005636:	d1d9      	bne.n	80055ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800567a:	b662      	cpsie	i
}
 800567c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056b0:	e042      	b.n	8005738 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fb32 	bl	8005d20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e04c      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d118      	bne.n	8005738 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	2b00      	cmp	r3, #0
 800573e:	f47f ae94 	bne.w	800546a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	e000      	b.n	8005760 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800575e:	2302      	movs	r3, #2
  }
}
 8005760:	4618      	mov	r0, r3
 8005762:	3728      	adds	r7, #40	; 0x28
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	00010004 	.word	0x00010004
 800576c:	200001c8 	.word	0x200001c8
 8005770:	14f8b589 	.word	0x14f8b589

08005774 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	4608      	mov	r0, r1
 800577e:	4611      	mov	r1, r2
 8005780:	461a      	mov	r2, r3
 8005782:	4603      	mov	r3, r0
 8005784:	817b      	strh	r3, [r7, #10]
 8005786:	460b      	mov	r3, r1
 8005788:	813b      	strh	r3, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f960 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00d      	beq.n	80057d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c4:	d103      	bne.n	80057ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e05f      	b.n	8005892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	492d      	ldr	r1, [pc, #180]	; (800589c <I2C_RequestMemoryWrite+0x128>)
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f998 	bl	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e04c      	b.n	8005892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	6a39      	ldr	r1, [r7, #32]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 fa02 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	2b04      	cmp	r3, #4
 8005824:	d107      	bne.n	8005836 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005834:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e02b      	b.n	8005892 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d105      	bne.n	800584c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005840:	893b      	ldrh	r3, [r7, #8]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	611a      	str	r2, [r3, #16]
 800584a:	e021      	b.n	8005890 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800584c:	893b      	ldrh	r3, [r7, #8]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	b29b      	uxth	r3, r3
 8005852:	b2da      	uxtb	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	6a39      	ldr	r1, [r7, #32]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f9dc 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00d      	beq.n	8005886 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b04      	cmp	r3, #4
 8005870:	d107      	bne.n	8005882 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005880:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e005      	b.n	8005892 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005886:	893b      	ldrh	r3, [r7, #8]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	00010002 	.word	0x00010002

080058a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	4608      	mov	r0, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	817b      	strh	r3, [r7, #10]
 80058b2:	460b      	mov	r3, r1
 80058b4:	813b      	strh	r3, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f8c2 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00d      	beq.n	800590e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005900:	d103      	bne.n	800590a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e0aa      	b.n	8005a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800590e:	897b      	ldrh	r3, [r7, #10]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800591c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	6a3a      	ldr	r2, [r7, #32]
 8005922:	4952      	ldr	r1, [pc, #328]	; (8005a6c <I2C_RequestMemoryRead+0x1cc>)
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f8fa 	bl	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e097      	b.n	8005a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800594a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594c:	6a39      	ldr	r1, [r7, #32]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f964 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	2b04      	cmp	r3, #4
 8005960:	d107      	bne.n	8005972 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005970:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e076      	b.n	8005a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005976:	88fb      	ldrh	r3, [r7, #6]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d105      	bne.n	8005988 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800597c:	893b      	ldrh	r3, [r7, #8]
 800597e:	b2da      	uxtb	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	611a      	str	r2, [r3, #16]
 8005986:	e021      	b.n	80059cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005988:	893b      	ldrh	r3, [r7, #8]
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	b29b      	uxth	r3, r3
 800598e:	b2da      	uxtb	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005998:	6a39      	ldr	r1, [r7, #32]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f93e 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d107      	bne.n	80059be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e050      	b.n	8005a64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059c2:	893b      	ldrh	r3, [r7, #8]
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ce:	6a39      	ldr	r1, [r7, #32]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f923 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00d      	beq.n	80059f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d107      	bne.n	80059f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e035      	b.n	8005a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f82b 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2e:	d103      	bne.n	8005a38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e013      	b.n	8005a64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a3c:	897b      	ldrh	r3, [r7, #10]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f043 0301 	orr.w	r3, r3, #1
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	6a3a      	ldr	r2, [r7, #32]
 8005a50:	4906      	ldr	r1, [pc, #24]	; (8005a6c <I2C_RequestMemoryRead+0x1cc>)
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f863 	bl	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	00010002 	.word	0x00010002

08005a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a80:	e025      	b.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a88:	d021      	beq.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fe fdf3 	bl	8004674 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d116      	bne.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f043 0220 	orr.w	r2, r3, #32
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e023      	b.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d10d      	bne.n	8005af4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	e00c      	b.n	8005b0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	43da      	mvns	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4013      	ands	r3, r2
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d0b6      	beq.n	8005a82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b2c:	e051      	b.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3c:	d123      	bne.n	8005b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f043 0204 	orr.w	r2, r3, #4
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e046      	b.n	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b8c:	d021      	beq.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8e:	f7fe fd71 	bl	8004674 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d302      	bcc.n	8005ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d116      	bne.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e020      	b.n	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d10c      	bne.n	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	43da      	mvns	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4013      	ands	r3, r2
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bf14      	ite	ne
 8005bee:	2301      	movne	r3, #1
 8005bf0:	2300      	moveq	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	e00b      	b.n	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	43da      	mvns	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4013      	ands	r3, r2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d18d      	bne.n	8005b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c28:	e02d      	b.n	8005c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f8ce 	bl	8005dcc <I2C_IsAcknowledgeFailed>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e02d      	b.n	8005c96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c40:	d021      	beq.n	8005c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c42:	f7fe fd17 	bl	8004674 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d116      	bne.n	8005c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e007      	b.n	8005c96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d1ca      	bne.n	8005c2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005caa:	e02d      	b.n	8005d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f88d 	bl	8005dcc <I2C_IsAcknowledgeFailed>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e02d      	b.n	8005d18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cc2:	d021      	beq.n	8005d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc4:	f7fe fcd6 	bl	8004674 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d302      	bcc.n	8005cda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d116      	bne.n	8005d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	f043 0220 	orr.w	r2, r3, #32
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e007      	b.n	8005d18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d1ca      	bne.n	8005cac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d2c:	e042      	b.n	8005db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d119      	bne.n	8005d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0210 	mvn.w	r2, #16
 8005d44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e029      	b.n	8005dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d70:	f7fe fc80 	bl	8004674 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d302      	bcc.n	8005d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d116      	bne.n	8005db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	f043 0220 	orr.w	r2, r3, #32
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e007      	b.n	8005dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d1b5      	bne.n	8005d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de2:	d11b      	bne.n	8005e1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f043 0204 	orr.w	r2, r3, #4
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e26c      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8087 	beq.w	8005f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e48:	4b92      	ldr	r3, [pc, #584]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 030c 	and.w	r3, r3, #12
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d00c      	beq.n	8005e6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e54:	4b8f      	ldr	r3, [pc, #572]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d112      	bne.n	8005e86 <HAL_RCC_OscConfig+0x5e>
 8005e60:	4b8c      	ldr	r3, [pc, #560]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6c:	d10b      	bne.n	8005e86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6e:	4b89      	ldr	r3, [pc, #548]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d06c      	beq.n	8005f54 <HAL_RCC_OscConfig+0x12c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d168      	bne.n	8005f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e246      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8e:	d106      	bne.n	8005e9e <HAL_RCC_OscConfig+0x76>
 8005e90:	4b80      	ldr	r3, [pc, #512]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a7f      	ldr	r2, [pc, #508]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e02e      	b.n	8005efc <HAL_RCC_OscConfig+0xd4>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x98>
 8005ea6:	4b7b      	ldr	r3, [pc, #492]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a7a      	ldr	r2, [pc, #488]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b78      	ldr	r3, [pc, #480]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a77      	ldr	r2, [pc, #476]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e01d      	b.n	8005efc <HAL_RCC_OscConfig+0xd4>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0xbc>
 8005eca:	4b72      	ldr	r3, [pc, #456]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a71      	ldr	r2, [pc, #452]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4b6f      	ldr	r3, [pc, #444]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a6e      	ldr	r2, [pc, #440]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e00b      	b.n	8005efc <HAL_RCC_OscConfig+0xd4>
 8005ee4:	4b6b      	ldr	r3, [pc, #428]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a6a      	ldr	r2, [pc, #424]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	4b68      	ldr	r3, [pc, #416]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a67      	ldr	r2, [pc, #412]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005efa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d013      	beq.n	8005f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f04:	f7fe fbb6 	bl	8004674 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fe fbb2 	bl	8004674 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	; 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e1fa      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1e:	4b5d      	ldr	r3, [pc, #372]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe4>
 8005f2a:	e014      	b.n	8005f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2c:	f7fe fba2 	bl	8004674 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f34:	f7fe fb9e 	bl	8004674 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b64      	cmp	r3, #100	; 0x64
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e1e6      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f46:	4b53      	ldr	r3, [pc, #332]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x10c>
 8005f52:	e000      	b.n	8005f56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d063      	beq.n	800602a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f62:	4b4c      	ldr	r3, [pc, #304]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00b      	beq.n	8005f86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f6e:	4b49      	ldr	r3, [pc, #292]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d11c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x18c>
 8005f7a:	4b46      	ldr	r3, [pc, #280]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d116      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f86:	4b43      	ldr	r3, [pc, #268]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_RCC_OscConfig+0x176>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d001      	beq.n	8005f9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e1ba      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9e:	4b3d      	ldr	r3, [pc, #244]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4939      	ldr	r1, [pc, #228]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fb2:	e03a      	b.n	800602a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d020      	beq.n	8005ffe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fbc:	4b36      	ldr	r3, [pc, #216]	; (8006098 <HAL_RCC_OscConfig+0x270>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc2:	f7fe fb57 	bl	8004674 <HAL_GetTick>
 8005fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fca:	f7fe fb53 	bl	8004674 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e19b      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fdc:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0f0      	beq.n	8005fca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe8:	4b2a      	ldr	r3, [pc, #168]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	4927      	ldr	r1, [pc, #156]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	600b      	str	r3, [r1, #0]
 8005ffc:	e015      	b.n	800602a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ffe:	4b26      	ldr	r3, [pc, #152]	; (8006098 <HAL_RCC_OscConfig+0x270>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006004:	f7fe fb36 	bl	8004674 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600c:	f7fe fb32 	bl	8004674 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e17a      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800601e:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d03a      	beq.n	80060ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d019      	beq.n	8006072 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800603e:	4b17      	ldr	r3, [pc, #92]	; (800609c <HAL_RCC_OscConfig+0x274>)
 8006040:	2201      	movs	r2, #1
 8006042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006044:	f7fe fb16 	bl	8004674 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800604c:	f7fe fb12 	bl	8004674 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e15a      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <HAL_RCC_OscConfig+0x26c>)
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800606a:	2001      	movs	r0, #1
 800606c:	f000 fad8 	bl	8006620 <RCC_Delay>
 8006070:	e01c      	b.n	80060ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_RCC_OscConfig+0x274>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006078:	f7fe fafc 	bl	8004674 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800607e:	e00f      	b.n	80060a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006080:	f7fe faf8 	bl	8004674 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d908      	bls.n	80060a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e140      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
 8006092:	bf00      	nop
 8006094:	40021000 	.word	0x40021000
 8006098:	42420000 	.word	0x42420000
 800609c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a0:	4b9e      	ldr	r3, [pc, #632]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e9      	bne.n	8006080 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80a6 	beq.w	8006206 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ba:	2300      	movs	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060be:	4b97      	ldr	r3, [pc, #604]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10d      	bne.n	80060e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ca:	4b94      	ldr	r3, [pc, #592]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	4a93      	ldr	r2, [pc, #588]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80060d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d4:	61d3      	str	r3, [r2, #28]
 80060d6:	4b91      	ldr	r3, [pc, #580]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060e2:	2301      	movs	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e6:	4b8e      	ldr	r3, [pc, #568]	; (8006320 <HAL_RCC_OscConfig+0x4f8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d118      	bne.n	8006124 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060f2:	4b8b      	ldr	r3, [pc, #556]	; (8006320 <HAL_RCC_OscConfig+0x4f8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a8a      	ldr	r2, [pc, #552]	; (8006320 <HAL_RCC_OscConfig+0x4f8>)
 80060f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060fe:	f7fe fab9 	bl	8004674 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006106:	f7fe fab5 	bl	8004674 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b64      	cmp	r3, #100	; 0x64
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e0fd      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006118:	4b81      	ldr	r3, [pc, #516]	; (8006320 <HAL_RCC_OscConfig+0x4f8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d106      	bne.n	800613a <HAL_RCC_OscConfig+0x312>
 800612c:	4b7b      	ldr	r3, [pc, #492]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	4a7a      	ldr	r2, [pc, #488]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6213      	str	r3, [r2, #32]
 8006138:	e02d      	b.n	8006196 <HAL_RCC_OscConfig+0x36e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10c      	bne.n	800615c <HAL_RCC_OscConfig+0x334>
 8006142:	4b76      	ldr	r3, [pc, #472]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	4a75      	ldr	r2, [pc, #468]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	6213      	str	r3, [r2, #32]
 800614e:	4b73      	ldr	r3, [pc, #460]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	4a72      	ldr	r2, [pc, #456]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006154:	f023 0304 	bic.w	r3, r3, #4
 8006158:	6213      	str	r3, [r2, #32]
 800615a:	e01c      	b.n	8006196 <HAL_RCC_OscConfig+0x36e>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b05      	cmp	r3, #5
 8006162:	d10c      	bne.n	800617e <HAL_RCC_OscConfig+0x356>
 8006164:	4b6d      	ldr	r3, [pc, #436]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	4a6c      	ldr	r2, [pc, #432]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	6213      	str	r3, [r2, #32]
 8006170:	4b6a      	ldr	r3, [pc, #424]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	4a69      	ldr	r2, [pc, #420]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6213      	str	r3, [r2, #32]
 800617c:	e00b      	b.n	8006196 <HAL_RCC_OscConfig+0x36e>
 800617e:	4b67      	ldr	r3, [pc, #412]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	4a66      	ldr	r2, [pc, #408]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	6213      	str	r3, [r2, #32]
 800618a:	4b64      	ldr	r3, [pc, #400]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	4a63      	ldr	r2, [pc, #396]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006190:	f023 0304 	bic.w	r3, r3, #4
 8006194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d015      	beq.n	80061ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800619e:	f7fe fa69 	bl	8004674 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a4:	e00a      	b.n	80061bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a6:	f7fe fa65 	bl	8004674 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e0ab      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061bc:	4b57      	ldr	r3, [pc, #348]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0ee      	beq.n	80061a6 <HAL_RCC_OscConfig+0x37e>
 80061c8:	e014      	b.n	80061f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ca:	f7fe fa53 	bl	8004674 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d0:	e00a      	b.n	80061e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d2:	f7fe fa4f 	bl	8004674 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e095      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061e8:	4b4c      	ldr	r3, [pc, #304]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ee      	bne.n	80061d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d105      	bne.n	8006206 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061fa:	4b48      	ldr	r3, [pc, #288]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	4a47      	ldr	r2, [pc, #284]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006204:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8081 	beq.w	8006312 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006210:	4b42      	ldr	r3, [pc, #264]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b08      	cmp	r3, #8
 800621a:	d061      	beq.n	80062e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d146      	bne.n	80062b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006224:	4b3f      	ldr	r3, [pc, #252]	; (8006324 <HAL_RCC_OscConfig+0x4fc>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622a:	f7fe fa23 	bl	8004674 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006232:	f7fe fa1f 	bl	8004674 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e067      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006244:	4b35      	ldr	r3, [pc, #212]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006258:	d108      	bne.n	800626c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800625a:	4b30      	ldr	r3, [pc, #192]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	492d      	ldr	r1, [pc, #180]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006268:	4313      	orrs	r3, r2
 800626a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800626c:	4b2b      	ldr	r3, [pc, #172]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a19      	ldr	r1, [r3, #32]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	430b      	orrs	r3, r1
 800627e:	4927      	ldr	r1, [pc, #156]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 8006280:	4313      	orrs	r3, r2
 8006282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006284:	4b27      	ldr	r3, [pc, #156]	; (8006324 <HAL_RCC_OscConfig+0x4fc>)
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628a:	f7fe f9f3 	bl	8004674 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006292:	f7fe f9ef 	bl	8004674 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e037      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062a4:	4b1d      	ldr	r3, [pc, #116]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f0      	beq.n	8006292 <HAL_RCC_OscConfig+0x46a>
 80062b0:	e02f      	b.n	8006312 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <HAL_RCC_OscConfig+0x4fc>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fe f9dc 	bl	8004674 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fe f9d8 	bl	8004674 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e020      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x498>
 80062de:	e018      	b.n	8006312 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e013      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_RCC_OscConfig+0x4f4>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d106      	bne.n	800630e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800630a:	429a      	cmp	r2, r3
 800630c:	d001      	beq.n	8006312 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40021000 	.word	0x40021000
 8006320:	40007000 	.word	0x40007000
 8006324:	42420060 	.word	0x42420060

08006328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0d0      	b.n	80064de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800633c:	4b6a      	ldr	r3, [pc, #424]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d910      	bls.n	800636c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634a:	4b67      	ldr	r3, [pc, #412]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 0207 	bic.w	r2, r3, #7
 8006352:	4965      	ldr	r1, [pc, #404]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	4b63      	ldr	r3, [pc, #396]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e0b8      	b.n	80064de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d020      	beq.n	80063ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006384:	4b59      	ldr	r3, [pc, #356]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	4a58      	ldr	r2, [pc, #352]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 800638a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800638e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800639c:	4b53      	ldr	r3, [pc, #332]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4a52      	ldr	r2, [pc, #328]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80063a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80063a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063a8:	4b50      	ldr	r3, [pc, #320]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	494d      	ldr	r1, [pc, #308]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d040      	beq.n	8006448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d107      	bne.n	80063de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	4b47      	ldr	r3, [pc, #284]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d115      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e07f      	b.n	80064de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d107      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e6:	4b41      	ldr	r3, [pc, #260]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e073      	b.n	80064de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f6:	4b3d      	ldr	r3, [pc, #244]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e06b      	b.n	80064de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006406:	4b39      	ldr	r3, [pc, #228]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f023 0203 	bic.w	r2, r3, #3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4936      	ldr	r1, [pc, #216]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 8006414:	4313      	orrs	r3, r2
 8006416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006418:	f7fe f92c 	bl	8004674 <HAL_GetTick>
 800641c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641e:	e00a      	b.n	8006436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006420:	f7fe f928 	bl	8004674 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	f241 3288 	movw	r2, #5000	; 0x1388
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e053      	b.n	80064de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006436:	4b2d      	ldr	r3, [pc, #180]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f003 020c 	and.w	r2, r3, #12
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	429a      	cmp	r2, r3
 8006446:	d1eb      	bne.n	8006420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006448:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d210      	bcs.n	8006478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 0207 	bic.w	r2, r3, #7
 800645e:	4922      	ldr	r1, [pc, #136]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	4313      	orrs	r3, r2
 8006464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e032      	b.n	80064de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4916      	ldr	r1, [pc, #88]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 8006492:	4313      	orrs	r3, r2
 8006494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064a2:	4b12      	ldr	r3, [pc, #72]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	490e      	ldr	r1, [pc, #56]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064b6:	f000 f821 	bl	80064fc <HAL_RCC_GetSysClockFreq>
 80064ba:	4602      	mov	r2, r0
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	490a      	ldr	r1, [pc, #40]	; (80064f0 <HAL_RCC_ClockConfig+0x1c8>)
 80064c8:	5ccb      	ldrb	r3, [r1, r3]
 80064ca:	fa22 f303 	lsr.w	r3, r2, r3
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <HAL_RCC_ClockConfig+0x1cc>)
 80064d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <HAL_RCC_ClockConfig+0x1d0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe f88a 	bl	80045f0 <HAL_InitTick>

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40022000 	.word	0x40022000
 80064ec:	40021000 	.word	0x40021000
 80064f0:	0800cc3c 	.word	0x0800cc3c
 80064f4:	200001c8 	.word	0x200001c8
 80064f8:	200001cc 	.word	0x200001cc

080064fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064fc:	b490      	push	{r4, r7}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006502:	4b2a      	ldr	r3, [pc, #168]	; (80065ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8006504:	1d3c      	adds	r4, r7, #4
 8006506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800650c:	f240 2301 	movw	r3, #513	; 0x201
 8006510:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	2300      	movs	r3, #0
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006526:	4b22      	ldr	r3, [pc, #136]	; (80065b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	2b04      	cmp	r3, #4
 8006534:	d002      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0x40>
 8006536:	2b08      	cmp	r3, #8
 8006538:	d003      	beq.n	8006542 <HAL_RCC_GetSysClockFreq+0x46>
 800653a:	e02d      	b.n	8006598 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800653c:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800653e:	623b      	str	r3, [r7, #32]
      break;
 8006540:	e02d      	b.n	800659e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	0c9b      	lsrs	r3, r3, #18
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800654e:	4413      	add	r3, r2
 8006550:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006554:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d013      	beq.n	8006588 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006560:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	0c5b      	lsrs	r3, r3, #17
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800656e:	4413      	add	r3, r2
 8006570:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006574:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	4a0e      	ldr	r2, [pc, #56]	; (80065b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800657a:	fb02 f203 	mul.w	r2, r2, r3
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
 8006586:	e004      	b.n	8006592 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	4a0b      	ldr	r2, [pc, #44]	; (80065b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	623b      	str	r3, [r7, #32]
      break;
 8006596:	e002      	b.n	800659e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006598:	4b06      	ldr	r3, [pc, #24]	; (80065b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800659a:	623b      	str	r3, [r7, #32]
      break;
 800659c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800659e:	6a3b      	ldr	r3, [r7, #32]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	; 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc90      	pop	{r4, r7}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	0800cc2c 	.word	0x0800cc2c
 80065b0:	40021000 	.word	0x40021000
 80065b4:	007a1200 	.word	0x007a1200
 80065b8:	003d0900 	.word	0x003d0900

080065bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c0:	4b02      	ldr	r3, [pc, #8]	; (80065cc <HAL_RCC_GetHCLKFreq+0x10>)
 80065c2:	681b      	ldr	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr
 80065cc:	200001c8 	.word	0x200001c8

080065d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065d4:	f7ff fff2 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 80065d8:	4602      	mov	r2, r0
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	4903      	ldr	r1, [pc, #12]	; (80065f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e6:	5ccb      	ldrb	r3, [r1, r3]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40021000 	.word	0x40021000
 80065f4:	0800cc4c 	.word	0x0800cc4c

080065f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065fc:	f7ff ffde 	bl	80065bc <HAL_RCC_GetHCLKFreq>
 8006600:	4602      	mov	r2, r0
 8006602:	4b05      	ldr	r3, [pc, #20]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	0adb      	lsrs	r3, r3, #11
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	4903      	ldr	r1, [pc, #12]	; (800661c <HAL_RCC_GetPCLK2Freq+0x24>)
 800660e:	5ccb      	ldrb	r3, [r1, r3]
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40021000 	.word	0x40021000
 800661c:	0800cc4c 	.word	0x0800cc4c

08006620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <RCC_Delay+0x34>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a0a      	ldr	r2, [pc, #40]	; (8006658 <RCC_Delay+0x38>)
 800662e:	fba2 2303 	umull	r2, r3, r2, r3
 8006632:	0a5b      	lsrs	r3, r3, #9
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800663c:	bf00      	nop
  }
  while (Delay --);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1e5a      	subs	r2, r3, #1
 8006642:	60fa      	str	r2, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1f9      	bne.n	800663c <RCC_Delay+0x1c>
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr
 8006654:	200001c8 	.word	0x200001c8
 8006658:	10624dd3 	.word	0x10624dd3

0800665c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e041      	b.n	80066f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fd fe2c 	bl	80042e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f000 fc2a 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	d001      	beq.n	8006714 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e032      	b.n	800677a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a18      	ldr	r2, [pc, #96]	; (8006784 <HAL_TIM_Base_Start+0x88>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00e      	beq.n	8006744 <HAL_TIM_Base_Start+0x48>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672e:	d009      	beq.n	8006744 <HAL_TIM_Base_Start+0x48>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a14      	ldr	r2, [pc, #80]	; (8006788 <HAL_TIM_Base_Start+0x8c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <HAL_TIM_Base_Start+0x48>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a13      	ldr	r2, [pc, #76]	; (800678c <HAL_TIM_Base_Start+0x90>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d111      	bne.n	8006768 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b06      	cmp	r3, #6
 8006754:	d010      	beq.n	8006778 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006766:	e007      	b.n	8006778 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800

08006790 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e041      	b.n	8006826 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f839 	bl	800682e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f000 fb90 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr

08006840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <HAL_TIM_PWM_Start+0x24>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b01      	cmp	r3, #1
 800685a:	bf14      	ite	ne
 800685c:	2301      	movne	r3, #1
 800685e:	2300      	moveq	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	e022      	b.n	80068aa <HAL_TIM_PWM_Start+0x6a>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b04      	cmp	r3, #4
 8006868:	d109      	bne.n	800687e <HAL_TIM_PWM_Start+0x3e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b01      	cmp	r3, #1
 8006874:	bf14      	ite	ne
 8006876:	2301      	movne	r3, #1
 8006878:	2300      	moveq	r3, #0
 800687a:	b2db      	uxtb	r3, r3
 800687c:	e015      	b.n	80068aa <HAL_TIM_PWM_Start+0x6a>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b08      	cmp	r3, #8
 8006882:	d109      	bne.n	8006898 <HAL_TIM_PWM_Start+0x58>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	e008      	b.n	80068aa <HAL_TIM_PWM_Start+0x6a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	bf14      	ite	ne
 80068a4:	2301      	movne	r3, #1
 80068a6:	2300      	moveq	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e05e      	b.n	8006970 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_PWM_Start+0x82>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c0:	e013      	b.n	80068ea <HAL_TIM_PWM_Start+0xaa>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_PWM_Start+0x92>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d0:	e00b      	b.n	80068ea <HAL_TIM_PWM_Start+0xaa>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d104      	bne.n	80068e2 <HAL_TIM_PWM_Start+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e0:	e003      	b.n	80068ea <HAL_TIM_PWM_Start+0xaa>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fd7e 	bl	80073f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <HAL_TIM_PWM_Start+0x138>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d107      	bne.n	8006912 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006910:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a18      	ldr	r2, [pc, #96]	; (8006978 <HAL_TIM_PWM_Start+0x138>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_TIM_PWM_Start+0xfa>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006924:	d009      	beq.n	800693a <HAL_TIM_PWM_Start+0xfa>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a14      	ldr	r2, [pc, #80]	; (800697c <HAL_TIM_PWM_Start+0x13c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_TIM_PWM_Start+0xfa>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a12      	ldr	r2, [pc, #72]	; (8006980 <HAL_TIM_PWM_Start+0x140>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d111      	bne.n	800695e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b06      	cmp	r3, #6
 800694a:	d010      	beq.n	800696e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695c:	e007      	b.n	800696e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40000400 	.word	0x40000400
 8006980:	40000800 	.word	0x40000800

08006984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b02      	cmp	r3, #2
 8006998:	d122      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d11b      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0202 	mvn.w	r2, #2
 80069b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa78 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 80069cc:	e005      	b.n	80069da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa6b 	bl	8006eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fa7a 	bl	8006ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d122      	bne.n	8006a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d11b      	bne.n	8006a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0204 	mvn.w	r2, #4
 8006a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa4e 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa41 	bl	8006eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fa50 	bl	8006ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d122      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d11b      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0208 	mvn.w	r2, #8
 8006a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2204      	movs	r2, #4
 8006a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa24 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006a74:	e005      	b.n	8006a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa17 	bl	8006eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa26 	bl	8006ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b10      	cmp	r3, #16
 8006a94:	d122      	bne.n	8006adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d11b      	bne.n	8006adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0210 	mvn.w	r2, #16
 8006aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f9fa 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006ac8:	e005      	b.n	8006ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f9ed 	bl	8006eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f9fc 	bl	8006ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d10e      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d107      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f06f 0201 	mvn.w	r2, #1
 8006b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f9c8 	bl	8006e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d10e      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b80      	cmp	r3, #128	; 0x80
 8006b22:	d107      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fceb 	bl	800750a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d10e      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b40      	cmp	r3, #64	; 0x40
 8006b4e:	d107      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f9c0 	bl	8006ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d10e      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d107      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0220 	mvn.w	r2, #32
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fcb6 	bl	80074f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e0ac      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b0c      	cmp	r3, #12
 8006bba:	f200 809f 	bhi.w	8006cfc <HAL_TIM_PWM_ConfigChannel+0x168>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006bf9 	.word	0x08006bf9
 8006bc8:	08006cfd 	.word	0x08006cfd
 8006bcc:	08006cfd 	.word	0x08006cfd
 8006bd0:	08006cfd 	.word	0x08006cfd
 8006bd4:	08006c39 	.word	0x08006c39
 8006bd8:	08006cfd 	.word	0x08006cfd
 8006bdc:	08006cfd 	.word	0x08006cfd
 8006be0:	08006cfd 	.word	0x08006cfd
 8006be4:	08006c7b 	.word	0x08006c7b
 8006be8:	08006cfd 	.word	0x08006cfd
 8006bec:	08006cfd 	.word	0x08006cfd
 8006bf0:	08006cfd 	.word	0x08006cfd
 8006bf4:	08006cbb 	.word	0x08006cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 f9da 	bl	8006fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0208 	orr.w	r2, r2, #8
 8006c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0204 	bic.w	r2, r2, #4
 8006c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6999      	ldr	r1, [r3, #24]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	691a      	ldr	r2, [r3, #16]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	619a      	str	r2, [r3, #24]
      break;
 8006c36:	e062      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fa20 	bl	8007084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6999      	ldr	r1, [r3, #24]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	021a      	lsls	r2, r3, #8
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	619a      	str	r2, [r3, #24]
      break;
 8006c78:	e041      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fa69 	bl	8007158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0208 	orr.w	r2, r2, #8
 8006c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69da      	ldr	r2, [r3, #28]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0204 	bic.w	r2, r2, #4
 8006ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69d9      	ldr	r1, [r3, #28]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	691a      	ldr	r2, [r3, #16]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	61da      	str	r2, [r3, #28]
      break;
 8006cb8:	e021      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fab3 	bl	800722c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69d9      	ldr	r1, [r3, #28]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	021a      	lsls	r2, r3, #8
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	61da      	str	r2, [r3, #28]
      break;
 8006cfa:	e000      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_TIM_ConfigClockSource+0x18>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e0b3      	b.n	8006e90 <HAL_TIM_ConfigClockSource+0x180>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d60:	d03e      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0xd0>
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d66:	f200 8087 	bhi.w	8006e78 <HAL_TIM_ConfigClockSource+0x168>
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6e:	f000 8085 	beq.w	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d76:	d87f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x168>
 8006d78:	2b70      	cmp	r3, #112	; 0x70
 8006d7a:	d01a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0xa2>
 8006d7c:	2b70      	cmp	r3, #112	; 0x70
 8006d7e:	d87b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x168>
 8006d80:	2b60      	cmp	r3, #96	; 0x60
 8006d82:	d050      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x116>
 8006d84:	2b60      	cmp	r3, #96	; 0x60
 8006d86:	d877      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x168>
 8006d88:	2b50      	cmp	r3, #80	; 0x50
 8006d8a:	d03c      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xf6>
 8006d8c:	2b50      	cmp	r3, #80	; 0x50
 8006d8e:	d873      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x168>
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d058      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0x136>
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d86f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x168>
 8006d98:	2b30      	cmp	r3, #48	; 0x30
 8006d9a:	d064      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x156>
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d86b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x168>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d060      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x156>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d867      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x168>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d05c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x156>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d05a      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006db0:	e062      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6899      	ldr	r1, [r3, #8]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f000 faf8 	bl	80073b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	609a      	str	r2, [r3, #8]
      break;
 8006dde:	e04e      	b.n	8006e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6899      	ldr	r1, [r3, #8]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f000 fae1 	bl	80073b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e02:	609a      	str	r2, [r3, #8]
      break;
 8006e04:	e03b      	b.n	8006e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6859      	ldr	r1, [r3, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f000 fa58 	bl	80072c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2150      	movs	r1, #80	; 0x50
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 faaf 	bl	8007382 <TIM_ITRx_SetConfig>
      break;
 8006e24:	e02b      	b.n	8006e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f000 fa76 	bl	8007324 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2160      	movs	r1, #96	; 0x60
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fa9f 	bl	8007382 <TIM_ITRx_SetConfig>
      break;
 8006e44:	e01b      	b.n	8006e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f000 fa38 	bl	80072c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2140      	movs	r1, #64	; 0x40
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fa8f 	bl	8007382 <TIM_ITRx_SetConfig>
      break;
 8006e64:	e00b      	b.n	8006e7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f000 fa86 	bl	8007382 <TIM_ITRx_SetConfig>
        break;
 8006e76:	e002      	b.n	8006e7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e78:	bf00      	nop
 8006e7a:	e000      	b.n	8006e7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr

08006eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bc80      	pop	{r7}
 8006ecc:	4770      	bx	lr

08006ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
	...

08006ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a29      	ldr	r2, [pc, #164]	; (8006fac <TIM_Base_SetConfig+0xb8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00b      	beq.n	8006f24 <TIM_Base_SetConfig+0x30>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f12:	d007      	beq.n	8006f24 <TIM_Base_SetConfig+0x30>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <TIM_Base_SetConfig+0xbc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_Base_SetConfig+0x30>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a25      	ldr	r2, [pc, #148]	; (8006fb4 <TIM_Base_SetConfig+0xc0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d108      	bne.n	8006f36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <TIM_Base_SetConfig+0xb8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00b      	beq.n	8006f56 <TIM_Base_SetConfig+0x62>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f44:	d007      	beq.n	8006f56 <TIM_Base_SetConfig+0x62>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <TIM_Base_SetConfig+0xbc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d003      	beq.n	8006f56 <TIM_Base_SetConfig+0x62>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <TIM_Base_SetConfig+0xc0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d108      	bne.n	8006f68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a07      	ldr	r2, [pc, #28]	; (8006fac <TIM_Base_SetConfig+0xb8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d103      	bne.n	8006f9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	615a      	str	r2, [r3, #20]
}
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bc80      	pop	{r7}
 8006faa:	4770      	bx	lr
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800

08006fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f023 0201 	bic.w	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0302 	bic.w	r3, r3, #2
 8007000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a1c      	ldr	r2, [pc, #112]	; (8007080 <TIM_OC1_SetConfig+0xc8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d10c      	bne.n	800702e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f023 0308 	bic.w	r3, r3, #8
 800701a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f023 0304 	bic.w	r3, r3, #4
 800702c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a13      	ldr	r2, [pc, #76]	; (8007080 <TIM_OC1_SetConfig+0xc8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d111      	bne.n	800705a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800703c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	621a      	str	r2, [r3, #32]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40012c00 	.word	0x40012c00

08007084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0210 	bic.w	r2, r3, #16
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 0320 	bic.w	r3, r3, #32
 80070ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a1d      	ldr	r2, [pc, #116]	; (8007154 <TIM_OC2_SetConfig+0xd0>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10d      	bne.n	8007100 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a14      	ldr	r2, [pc, #80]	; (8007154 <TIM_OC2_SetConfig+0xd0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d113      	bne.n	8007130 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800710e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007116:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	621a      	str	r2, [r3, #32]
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr
 8007154:	40012c00 	.word	0x40012c00

08007158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <TIM_OC3_SetConfig+0xd0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d10d      	bne.n	80071d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a14      	ldr	r2, [pc, #80]	; (8007228 <TIM_OC3_SetConfig+0xd0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d113      	bne.n	8007202 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	621a      	str	r2, [r3, #32]
}
 800721c:	bf00      	nop
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40012c00 	.word	0x40012c00

0800722c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a0f      	ldr	r2, [pc, #60]	; (80072c4 <TIM_OC4_SetConfig+0x98>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d109      	bne.n	80072a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	019b      	lsls	r3, r3, #6
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr
 80072c4:	40012c00 	.word	0x40012c00

080072c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0201 	bic.w	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 030a 	bic.w	r3, r3, #10
 8007304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f023 0210 	bic.w	r2, r3, #16
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800734e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	031b      	lsls	r3, r3, #12
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007360:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	621a      	str	r2, [r3, #32]
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr

08007382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	f043 0307 	orr.w	r3, r3, #7
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	609a      	str	r2, [r3, #8]
}
 80073ac:	bf00      	nop
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b087      	sub	sp, #28
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	021a      	lsls	r2, r3, #8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	431a      	orrs	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4313      	orrs	r3, r2
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	609a      	str	r2, [r3, #8]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bc80      	pop	{r7}
 80073f2:	4770      	bx	lr

080073f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2201      	movs	r2, #1
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1a      	ldr	r2, [r3, #32]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	43db      	mvns	r3, r3
 8007416:	401a      	ands	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
}
 8007432:	bf00      	nop
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007450:	2302      	movs	r3, #2
 8007452:	e046      	b.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a16      	ldr	r2, [pc, #88]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a0:	d009      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a12      	ldr	r2, [pc, #72]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10c      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800

080074f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr

0800750a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr

0800751c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e03f      	b.n	80075ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fc ff90 	bl	8004468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2224      	movs	r2, #36	; 0x24
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800755e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fc85 	bl	8007e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b08a      	sub	sp, #40	; 0x28
 80075ba:	af02      	add	r7, sp, #8
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	4613      	mov	r3, r2
 80075c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b20      	cmp	r3, #32
 80075d4:	d17c      	bne.n	80076d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_UART_Transmit+0x2c>
 80075dc:	88fb      	ldrh	r3, [r7, #6]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e075      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Transmit+0x3e>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e06e      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2221      	movs	r2, #33	; 0x21
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800760a:	f7fd f833 	bl	8004674 <HAL_GetTick>
 800760e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007624:	d108      	bne.n	8007638 <HAL_UART_Transmit+0x82>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	e003      	b.n	8007640 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007648:	e02a      	b.n	80076a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2200      	movs	r2, #0
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fa38 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e036      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10b      	bne.n	8007682 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	3302      	adds	r3, #2
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	e007      	b.n	8007692 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	781a      	ldrb	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	3301      	adds	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1cf      	bne.n	800764a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2200      	movs	r2, #0
 80076b2:	2140      	movs	r1, #64	; 0x40
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fa08 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e006      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	e000      	b.n	80076d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076d0:	2302      	movs	r3, #2
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d11d      	bne.n	8007730 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_UART_Receive_IT+0x26>
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e016      	b.n	8007732 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <HAL_UART_Receive_IT+0x38>
 800770e:	2302      	movs	r3, #2
 8007710:	e00f      	b.n	8007732 <HAL_UART_Receive_IT+0x58>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007720:	88fb      	ldrh	r3, [r7, #6]
 8007722:	461a      	mov	r2, r3
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fa19 	bl	8007b5e <UART_Start_Receive_IT>
 800772c:	4603      	mov	r3, r0
 800772e:	e000      	b.n	8007732 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007730:	2302      	movs	r3, #2
  }
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800775c:	2300      	movs	r3, #0
 800775e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10d      	bne.n	800778e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d008      	beq.n	800778e <HAL_UART_IRQHandler+0x52>
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	f003 0320 	and.w	r3, r3, #32
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fac9 	bl	8007d1e <UART_Receive_IT>
      return;
 800778c:	e17b      	b.n	8007a86 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80b1 	beq.w	80078f8 <HAL_UART_IRQHandler+0x1bc>
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <HAL_UART_IRQHandler+0x70>
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 80a6 	beq.w	80078f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <HAL_UART_IRQHandler+0x90>
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c4:	f043 0201 	orr.w	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <HAL_UART_IRQHandler+0xb0>
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	f043 0202 	orr.w	r2, r3, #2
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <HAL_UART_IRQHandler+0xd0>
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	f043 0204 	orr.w	r2, r3, #4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00f      	beq.n	8007836 <HAL_UART_IRQHandler+0xfa>
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <HAL_UART_IRQHandler+0xee>
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f043 0208 	orr.w	r2, r3, #8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 811e 	beq.w	8007a7c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d007      	beq.n	800785a <HAL_UART_IRQHandler+0x11e>
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fa62 	bl	8007d1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	bf14      	ite	ne
 8007868:	2301      	movne	r3, #1
 800786a:	2300      	moveq	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <HAL_UART_IRQHandler+0x146>
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d031      	beq.n	80078e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f9a4 	bl	8007bd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d023      	beq.n	80078de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695a      	ldr	r2, [r3, #20]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d013      	beq.n	80078d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	4a76      	ldr	r2, [pc, #472]	; (8007a8c <HAL_UART_IRQHandler+0x350>)
 80078b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fd f850 	bl	8004960 <HAL_DMA_Abort_IT>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d016      	beq.n	80078f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d4:	e00e      	b.n	80078f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f8e3 	bl	8007aa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	e00a      	b.n	80078f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f8df 	bl	8007aa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	e006      	b.n	80078f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f8db 	bl	8007aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078f2:	e0c3      	b.n	8007a7c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f4:	bf00      	nop
    return;
 80078f6:	e0c1      	b.n	8007a7c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	f040 80a1 	bne.w	8007a44 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	f003 0310 	and.w	r3, r3, #16
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 809b 	beq.w	8007a44 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 8095 	beq.w	8007a44 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	60fb      	str	r3, [r7, #12]
 800792e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d04e      	beq.n	80079dc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007948:	8a3b      	ldrh	r3, [r7, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8098 	beq.w	8007a80 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007954:	8a3a      	ldrh	r2, [r7, #16]
 8007956:	429a      	cmp	r2, r3
 8007958:	f080 8092 	bcs.w	8007a80 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	8a3a      	ldrh	r2, [r7, #16]
 8007960:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	2b20      	cmp	r3, #32
 800796a:	d02b      	beq.n	80079c4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800797a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695a      	ldr	r2, [r3, #20]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0201 	bic.w	r2, r2, #1
 800798a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695a      	ldr	r2, [r3, #20]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800799a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0210 	bic.w	r2, r2, #16
 80079b8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fc ff93 	bl	80048ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f86d 	bl	8007ab4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80079da:	e051      	b.n	8007a80 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d047      	beq.n	8007a84 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80079f4:	8a7b      	ldrh	r3, [r7, #18]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d044      	beq.n	8007a84 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a08:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0201 	bic.w	r2, r2, #1
 8007a18:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0210 	bic.w	r2, r2, #16
 8007a36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a38:	8a7b      	ldrh	r3, [r7, #18]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f839 	bl	8007ab4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a42:	e01f      	b.n	8007a84 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d008      	beq.n	8007a60 <HAL_UART_IRQHandler+0x324>
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f8f9 	bl	8007c50 <UART_Transmit_IT>
    return;
 8007a5e:	e012      	b.n	8007a86 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00d      	beq.n	8007a86 <HAL_UART_IRQHandler+0x34a>
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d008      	beq.n	8007a86 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f93a 	bl	8007cee <UART_EndTransmit_IT>
    return;
 8007a7a:	e004      	b.n	8007a86 <HAL_UART_IRQHandler+0x34a>
    return;
 8007a7c:	bf00      	nop
 8007a7e:	e002      	b.n	8007a86 <HAL_UART_IRQHandler+0x34a>
      return;
 8007a80:	bf00      	nop
 8007a82:	e000      	b.n	8007a86 <HAL_UART_IRQHandler+0x34a>
      return;
 8007a84:	bf00      	nop
  }
}
 8007a86:	3728      	adds	r7, #40	; 0x28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08007c29 	.word	0x08007c29

08007a90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr

08007aca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ada:	e02c      	b.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ae2:	d028      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d007      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0x30>
 8007aea:	f7fc fdc3 	bl	8004674 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d21d      	bcs.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0201 	bic.w	r2, r2, #1
 8007b18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e00f      	b.n	8007b56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	bf0c      	ite	eq
 8007b46:	2301      	moveq	r3, #1
 8007b48:	2300      	movne	r3, #0
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d0c3      	beq.n	8007adc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	88fa      	ldrh	r2, [r7, #6]
 8007b7c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2222      	movs	r2, #34	; 0x22
 8007b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ba2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695a      	ldr	r2, [r3, #20]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0220 	orr.w	r2, r2, #32
 8007bc2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007be6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	695a      	ldr	r2, [r3, #20]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0201 	bic.w	r2, r2, #1
 8007bf6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d107      	bne.n	8007c10 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0210 	bic.w	r2, r2, #16
 8007c0e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7ff ff2d 	bl	8007aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b21      	cmp	r3, #33	; 0x21
 8007c62:	d13e      	bne.n	8007ce2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6c:	d114      	bne.n	8007c98 <UART_Transmit_IT+0x48>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d110      	bne.n	8007c98 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	1c9a      	adds	r2, r3, #2
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	621a      	str	r2, [r3, #32]
 8007c96:	e008      	b.n	8007caa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	1c59      	adds	r1, r3, #1
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6211      	str	r1, [r2, #32]
 8007ca2:	781a      	ldrb	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10f      	bne.n	8007cde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ccc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e000      	b.n	8007ce4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
  }
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr

08007cee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff febe 	bl	8007a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b086      	sub	sp, #24
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b22      	cmp	r3, #34	; 0x22
 8007d30:	f040 8099 	bne.w	8007e66 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3c:	d117      	bne.n	8007d6e <UART_Receive_IT+0x50>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d113      	bne.n	8007d6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d66:	1c9a      	adds	r2, r3, #2
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8007d6c:	e026      	b.n	8007dbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d80:	d007      	beq.n	8007d92 <UART_Receive_IT+0x74>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <UART_Receive_IT+0x82>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	e008      	b.n	8007db2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d148      	bne.n	8007e62 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0220 	bic.w	r2, r2, #32
 8007dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 0201 	bic.w	r2, r2, #1
 8007dfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d123      	bne.n	8007e58 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0210 	bic.w	r2, r2, #16
 8007e24:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d10a      	bne.n	8007e4a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff fe2f 	bl	8007ab4 <HAL_UARTEx_RxEventCallback>
 8007e56:	e002      	b.n	8007e5e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7fb fe33 	bl	8003ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e002      	b.n	8007e68 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007e66:	2302      	movs	r3, #2
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007eaa:	f023 030c 	bic.w	r3, r3, #12
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a2c      	ldr	r2, [pc, #176]	; (8007f84 <UART_SetConfig+0x114>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d103      	bne.n	8007ee0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ed8:	f7fe fb8e 	bl	80065f8 <HAL_RCC_GetPCLK2Freq>
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	e002      	b.n	8007ee6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ee0:	f7fe fb76 	bl	80065d0 <HAL_RCC_GetPCLK1Freq>
 8007ee4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	009a      	lsls	r2, r3, #2
 8007ef0:	441a      	add	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	4a22      	ldr	r2, [pc, #136]	; (8007f88 <UART_SetConfig+0x118>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	0119      	lsls	r1, r3, #4
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009a      	lsls	r2, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <UART_SetConfig+0x118>)
 8007f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	2064      	movs	r0, #100	; 0x64
 8007f26:	fb00 f303 	mul.w	r3, r0, r3
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	3332      	adds	r3, #50	; 0x32
 8007f30:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <UART_SetConfig+0x118>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f3c:	4419      	add	r1, r3
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4613      	mov	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	009a      	lsls	r2, r3, #2
 8007f48:	441a      	add	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f54:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <UART_SetConfig+0x118>)
 8007f56:	fba3 0302 	umull	r0, r3, r3, r2
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	2064      	movs	r0, #100	; 0x64
 8007f5e:	fb00 f303 	mul.w	r3, r0, r3
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	3332      	adds	r3, #50	; 0x32
 8007f68:	4a07      	ldr	r2, [pc, #28]	; (8007f88 <UART_SetConfig+0x118>)
 8007f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6e:	095b      	lsrs	r3, r3, #5
 8007f70:	f003 020f 	and.w	r2, r3, #15
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	440a      	add	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40013800 	.word	0x40013800
 8007f88:	51eb851f 	.word	0x51eb851f

08007f8c <atof>:
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	f001 bae7 	b.w	8009560 <strtod>

08007f92 <atoi>:
 8007f92:	220a      	movs	r2, #10
 8007f94:	2100      	movs	r1, #0
 8007f96:	f001 bb75 	b.w	8009684 <strtol>
	...

08007f9c <__errno>:
 8007f9c:	4b01      	ldr	r3, [pc, #4]	; (8007fa4 <__errno+0x8>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200001d4 	.word	0x200001d4

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	2600      	movs	r6, #0
 8007fac:	4d0c      	ldr	r5, [pc, #48]	; (8007fe0 <__libc_init_array+0x38>)
 8007fae:	4c0d      	ldr	r4, [pc, #52]	; (8007fe4 <__libc_init_array+0x3c>)
 8007fb0:	1b64      	subs	r4, r4, r5
 8007fb2:	10a4      	asrs	r4, r4, #2
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	f004 fca0 	bl	800c8fc <_init>
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	4d0a      	ldr	r5, [pc, #40]	; (8007fe8 <__libc_init_array+0x40>)
 8007fc0:	4c0a      	ldr	r4, [pc, #40]	; (8007fec <__libc_init_array+0x44>)
 8007fc2:	1b64      	subs	r4, r4, r5
 8007fc4:	10a4      	asrs	r4, r4, #2
 8007fc6:	42a6      	cmp	r6, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd0:	4798      	blx	r3
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fda:	4798      	blx	r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	0800d178 	.word	0x0800d178
 8007fe4:	0800d178 	.word	0x0800d178
 8007fe8:	0800d178 	.word	0x0800d178
 8007fec:	0800d17c 	.word	0x0800d17c

08007ff0 <memset>:
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	4402      	add	r2, r0
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d100      	bne.n	8007ffa <memset+0xa>
 8007ff8:	4770      	bx	lr
 8007ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffe:	e7f9      	b.n	8007ff4 <memset+0x4>

08008000 <__cvt>:
 8008000:	2b00      	cmp	r3, #0
 8008002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008006:	461f      	mov	r7, r3
 8008008:	bfbb      	ittet	lt
 800800a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800800e:	461f      	movlt	r7, r3
 8008010:	2300      	movge	r3, #0
 8008012:	232d      	movlt	r3, #45	; 0x2d
 8008014:	b088      	sub	sp, #32
 8008016:	4614      	mov	r4, r2
 8008018:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800801a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800801c:	7013      	strb	r3, [r2, #0]
 800801e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008020:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008024:	f023 0820 	bic.w	r8, r3, #32
 8008028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800802c:	d005      	beq.n	800803a <__cvt+0x3a>
 800802e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008032:	d100      	bne.n	8008036 <__cvt+0x36>
 8008034:	3501      	adds	r5, #1
 8008036:	2302      	movs	r3, #2
 8008038:	e000      	b.n	800803c <__cvt+0x3c>
 800803a:	2303      	movs	r3, #3
 800803c:	aa07      	add	r2, sp, #28
 800803e:	9204      	str	r2, [sp, #16]
 8008040:	aa06      	add	r2, sp, #24
 8008042:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008046:	e9cd 3500 	strd	r3, r5, [sp]
 800804a:	4622      	mov	r2, r4
 800804c:	463b      	mov	r3, r7
 800804e:	f001 fbb3 	bl	80097b8 <_dtoa_r>
 8008052:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008056:	4606      	mov	r6, r0
 8008058:	d102      	bne.n	8008060 <__cvt+0x60>
 800805a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800805c:	07db      	lsls	r3, r3, #31
 800805e:	d522      	bpl.n	80080a6 <__cvt+0xa6>
 8008060:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008064:	eb06 0905 	add.w	r9, r6, r5
 8008068:	d110      	bne.n	800808c <__cvt+0x8c>
 800806a:	7833      	ldrb	r3, [r6, #0]
 800806c:	2b30      	cmp	r3, #48	; 0x30
 800806e:	d10a      	bne.n	8008086 <__cvt+0x86>
 8008070:	2200      	movs	r2, #0
 8008072:	2300      	movs	r3, #0
 8008074:	4620      	mov	r0, r4
 8008076:	4639      	mov	r1, r7
 8008078:	f7f8 fca0 	bl	80009bc <__aeabi_dcmpeq>
 800807c:	b918      	cbnz	r0, 8008086 <__cvt+0x86>
 800807e:	f1c5 0501 	rsb	r5, r5, #1
 8008082:	f8ca 5000 	str.w	r5, [sl]
 8008086:	f8da 3000 	ldr.w	r3, [sl]
 800808a:	4499      	add	r9, r3
 800808c:	2200      	movs	r2, #0
 800808e:	2300      	movs	r3, #0
 8008090:	4620      	mov	r0, r4
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 fc92 	bl	80009bc <__aeabi_dcmpeq>
 8008098:	b108      	cbz	r0, 800809e <__cvt+0x9e>
 800809a:	f8cd 901c 	str.w	r9, [sp, #28]
 800809e:	2230      	movs	r2, #48	; 0x30
 80080a0:	9b07      	ldr	r3, [sp, #28]
 80080a2:	454b      	cmp	r3, r9
 80080a4:	d307      	bcc.n	80080b6 <__cvt+0xb6>
 80080a6:	4630      	mov	r0, r6
 80080a8:	9b07      	ldr	r3, [sp, #28]
 80080aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080ac:	1b9b      	subs	r3, r3, r6
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	b008      	add	sp, #32
 80080b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b6:	1c59      	adds	r1, r3, #1
 80080b8:	9107      	str	r1, [sp, #28]
 80080ba:	701a      	strb	r2, [r3, #0]
 80080bc:	e7f0      	b.n	80080a0 <__cvt+0xa0>

080080be <__exponent>:
 80080be:	4603      	mov	r3, r0
 80080c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080c2:	2900      	cmp	r1, #0
 80080c4:	f803 2b02 	strb.w	r2, [r3], #2
 80080c8:	bfb6      	itet	lt
 80080ca:	222d      	movlt	r2, #45	; 0x2d
 80080cc:	222b      	movge	r2, #43	; 0x2b
 80080ce:	4249      	neglt	r1, r1
 80080d0:	2909      	cmp	r1, #9
 80080d2:	7042      	strb	r2, [r0, #1]
 80080d4:	dd2b      	ble.n	800812e <__exponent+0x70>
 80080d6:	f10d 0407 	add.w	r4, sp, #7
 80080da:	46a4      	mov	ip, r4
 80080dc:	270a      	movs	r7, #10
 80080de:	fb91 f6f7 	sdiv	r6, r1, r7
 80080e2:	460a      	mov	r2, r1
 80080e4:	46a6      	mov	lr, r4
 80080e6:	fb07 1516 	mls	r5, r7, r6, r1
 80080ea:	2a63      	cmp	r2, #99	; 0x63
 80080ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80080f0:	4631      	mov	r1, r6
 80080f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80080f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080fa:	dcf0      	bgt.n	80080de <__exponent+0x20>
 80080fc:	3130      	adds	r1, #48	; 0x30
 80080fe:	f1ae 0502 	sub.w	r5, lr, #2
 8008102:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008106:	4629      	mov	r1, r5
 8008108:	1c44      	adds	r4, r0, #1
 800810a:	4561      	cmp	r1, ip
 800810c:	d30a      	bcc.n	8008124 <__exponent+0x66>
 800810e:	f10d 0209 	add.w	r2, sp, #9
 8008112:	eba2 020e 	sub.w	r2, r2, lr
 8008116:	4565      	cmp	r5, ip
 8008118:	bf88      	it	hi
 800811a:	2200      	movhi	r2, #0
 800811c:	4413      	add	r3, r2
 800811e:	1a18      	subs	r0, r3, r0
 8008120:	b003      	add	sp, #12
 8008122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008124:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008128:	f804 2f01 	strb.w	r2, [r4, #1]!
 800812c:	e7ed      	b.n	800810a <__exponent+0x4c>
 800812e:	2330      	movs	r3, #48	; 0x30
 8008130:	3130      	adds	r1, #48	; 0x30
 8008132:	7083      	strb	r3, [r0, #2]
 8008134:	70c1      	strb	r1, [r0, #3]
 8008136:	1d03      	adds	r3, r0, #4
 8008138:	e7f1      	b.n	800811e <__exponent+0x60>
	...

0800813c <_printf_float>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	b091      	sub	sp, #68	; 0x44
 8008142:	460c      	mov	r4, r1
 8008144:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008148:	4616      	mov	r6, r2
 800814a:	461f      	mov	r7, r3
 800814c:	4605      	mov	r5, r0
 800814e:	f002 fc87 	bl	800aa60 <_localeconv_r>
 8008152:	6803      	ldr	r3, [r0, #0]
 8008154:	4618      	mov	r0, r3
 8008156:	9309      	str	r3, [sp, #36]	; 0x24
 8008158:	f7f8 f804 	bl	8000164 <strlen>
 800815c:	2300      	movs	r3, #0
 800815e:	930e      	str	r3, [sp, #56]	; 0x38
 8008160:	f8d8 3000 	ldr.w	r3, [r8]
 8008164:	900a      	str	r0, [sp, #40]	; 0x28
 8008166:	3307      	adds	r3, #7
 8008168:	f023 0307 	bic.w	r3, r3, #7
 800816c:	f103 0208 	add.w	r2, r3, #8
 8008170:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008174:	f8d4 b000 	ldr.w	fp, [r4]
 8008178:	f8c8 2000 	str.w	r2, [r8]
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008184:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008188:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800818c:	930b      	str	r3, [sp, #44]	; 0x2c
 800818e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008192:	4640      	mov	r0, r8
 8008194:	4b9c      	ldr	r3, [pc, #624]	; (8008408 <_printf_float+0x2cc>)
 8008196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008198:	f7f8 fc42 	bl	8000a20 <__aeabi_dcmpun>
 800819c:	bb70      	cbnz	r0, 80081fc <_printf_float+0xc0>
 800819e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081a2:	4640      	mov	r0, r8
 80081a4:	4b98      	ldr	r3, [pc, #608]	; (8008408 <_printf_float+0x2cc>)
 80081a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081a8:	f7f8 fc1c 	bl	80009e4 <__aeabi_dcmple>
 80081ac:	bb30      	cbnz	r0, 80081fc <_printf_float+0xc0>
 80081ae:	2200      	movs	r2, #0
 80081b0:	2300      	movs	r3, #0
 80081b2:	4640      	mov	r0, r8
 80081b4:	4651      	mov	r1, sl
 80081b6:	f7f8 fc0b 	bl	80009d0 <__aeabi_dcmplt>
 80081ba:	b110      	cbz	r0, 80081c2 <_printf_float+0x86>
 80081bc:	232d      	movs	r3, #45	; 0x2d
 80081be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c2:	4b92      	ldr	r3, [pc, #584]	; (800840c <_printf_float+0x2d0>)
 80081c4:	4892      	ldr	r0, [pc, #584]	; (8008410 <_printf_float+0x2d4>)
 80081c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80081ca:	bf94      	ite	ls
 80081cc:	4698      	movls	r8, r3
 80081ce:	4680      	movhi	r8, r0
 80081d0:	2303      	movs	r3, #3
 80081d2:	f04f 0a00 	mov.w	sl, #0
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f02b 0304 	bic.w	r3, fp, #4
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	4633      	mov	r3, r6
 80081e0:	4621      	mov	r1, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	9700      	str	r7, [sp, #0]
 80081e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80081e8:	f000 f9d4 	bl	8008594 <_printf_common>
 80081ec:	3001      	adds	r0, #1
 80081ee:	f040 8090 	bne.w	8008312 <_printf_float+0x1d6>
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081f6:	b011      	add	sp, #68	; 0x44
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	4642      	mov	r2, r8
 80081fe:	4653      	mov	r3, sl
 8008200:	4640      	mov	r0, r8
 8008202:	4651      	mov	r1, sl
 8008204:	f7f8 fc0c 	bl	8000a20 <__aeabi_dcmpun>
 8008208:	b148      	cbz	r0, 800821e <_printf_float+0xe2>
 800820a:	f1ba 0f00 	cmp.w	sl, #0
 800820e:	bfb8      	it	lt
 8008210:	232d      	movlt	r3, #45	; 0x2d
 8008212:	4880      	ldr	r0, [pc, #512]	; (8008414 <_printf_float+0x2d8>)
 8008214:	bfb8      	it	lt
 8008216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800821a:	4b7f      	ldr	r3, [pc, #508]	; (8008418 <_printf_float+0x2dc>)
 800821c:	e7d3      	b.n	80081c6 <_printf_float+0x8a>
 800821e:	6863      	ldr	r3, [r4, #4]
 8008220:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	d142      	bne.n	80082ae <_printf_float+0x172>
 8008228:	2306      	movs	r3, #6
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	9206      	str	r2, [sp, #24]
 8008230:	aa0e      	add	r2, sp, #56	; 0x38
 8008232:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008236:	aa0d      	add	r2, sp, #52	; 0x34
 8008238:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800823c:	9203      	str	r2, [sp, #12]
 800823e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008242:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	6863      	ldr	r3, [r4, #4]
 800824a:	4642      	mov	r2, r8
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4628      	mov	r0, r5
 8008250:	4653      	mov	r3, sl
 8008252:	910b      	str	r1, [sp, #44]	; 0x2c
 8008254:	f7ff fed4 	bl	8008000 <__cvt>
 8008258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800825a:	4680      	mov	r8, r0
 800825c:	2947      	cmp	r1, #71	; 0x47
 800825e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008260:	d108      	bne.n	8008274 <_printf_float+0x138>
 8008262:	1cc8      	adds	r0, r1, #3
 8008264:	db02      	blt.n	800826c <_printf_float+0x130>
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	4299      	cmp	r1, r3
 800826a:	dd40      	ble.n	80082ee <_printf_float+0x1b2>
 800826c:	f1a9 0902 	sub.w	r9, r9, #2
 8008270:	fa5f f989 	uxtb.w	r9, r9
 8008274:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008278:	d81f      	bhi.n	80082ba <_printf_float+0x17e>
 800827a:	464a      	mov	r2, r9
 800827c:	3901      	subs	r1, #1
 800827e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008282:	910d      	str	r1, [sp, #52]	; 0x34
 8008284:	f7ff ff1b 	bl	80080be <__exponent>
 8008288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800828a:	4682      	mov	sl, r0
 800828c:	1813      	adds	r3, r2, r0
 800828e:	2a01      	cmp	r2, #1
 8008290:	6123      	str	r3, [r4, #16]
 8008292:	dc02      	bgt.n	800829a <_printf_float+0x15e>
 8008294:	6822      	ldr	r2, [r4, #0]
 8008296:	07d2      	lsls	r2, r2, #31
 8008298:	d501      	bpl.n	800829e <_printf_float+0x162>
 800829a:	3301      	adds	r3, #1
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d09b      	beq.n	80081de <_printf_float+0xa2>
 80082a6:	232d      	movs	r3, #45	; 0x2d
 80082a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ac:	e797      	b.n	80081de <_printf_float+0xa2>
 80082ae:	2947      	cmp	r1, #71	; 0x47
 80082b0:	d1bc      	bne.n	800822c <_printf_float+0xf0>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1ba      	bne.n	800822c <_printf_float+0xf0>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e7b7      	b.n	800822a <_printf_float+0xee>
 80082ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80082be:	d118      	bne.n	80082f2 <_printf_float+0x1b6>
 80082c0:	2900      	cmp	r1, #0
 80082c2:	6863      	ldr	r3, [r4, #4]
 80082c4:	dd0b      	ble.n	80082de <_printf_float+0x1a2>
 80082c6:	6121      	str	r1, [r4, #16]
 80082c8:	b913      	cbnz	r3, 80082d0 <_printf_float+0x194>
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	07d0      	lsls	r0, r2, #31
 80082ce:	d502      	bpl.n	80082d6 <_printf_float+0x19a>
 80082d0:	3301      	adds	r3, #1
 80082d2:	440b      	add	r3, r1
 80082d4:	6123      	str	r3, [r4, #16]
 80082d6:	f04f 0a00 	mov.w	sl, #0
 80082da:	65a1      	str	r1, [r4, #88]	; 0x58
 80082dc:	e7df      	b.n	800829e <_printf_float+0x162>
 80082de:	b913      	cbnz	r3, 80082e6 <_printf_float+0x1aa>
 80082e0:	6822      	ldr	r2, [r4, #0]
 80082e2:	07d2      	lsls	r2, r2, #31
 80082e4:	d501      	bpl.n	80082ea <_printf_float+0x1ae>
 80082e6:	3302      	adds	r3, #2
 80082e8:	e7f4      	b.n	80082d4 <_printf_float+0x198>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e7f2      	b.n	80082d4 <_printf_float+0x198>
 80082ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80082f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082f4:	4299      	cmp	r1, r3
 80082f6:	db05      	blt.n	8008304 <_printf_float+0x1c8>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	6121      	str	r1, [r4, #16]
 80082fc:	07d8      	lsls	r0, r3, #31
 80082fe:	d5ea      	bpl.n	80082d6 <_printf_float+0x19a>
 8008300:	1c4b      	adds	r3, r1, #1
 8008302:	e7e7      	b.n	80082d4 <_printf_float+0x198>
 8008304:	2900      	cmp	r1, #0
 8008306:	bfcc      	ite	gt
 8008308:	2201      	movgt	r2, #1
 800830a:	f1c1 0202 	rsble	r2, r1, #2
 800830e:	4413      	add	r3, r2
 8008310:	e7e0      	b.n	80082d4 <_printf_float+0x198>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	055a      	lsls	r2, r3, #21
 8008316:	d407      	bmi.n	8008328 <_printf_float+0x1ec>
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	4642      	mov	r2, r8
 800831c:	4631      	mov	r1, r6
 800831e:	4628      	mov	r0, r5
 8008320:	47b8      	blx	r7
 8008322:	3001      	adds	r0, #1
 8008324:	d12b      	bne.n	800837e <_printf_float+0x242>
 8008326:	e764      	b.n	80081f2 <_printf_float+0xb6>
 8008328:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800832c:	f240 80dd 	bls.w	80084ea <_printf_float+0x3ae>
 8008330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008334:	2200      	movs	r2, #0
 8008336:	2300      	movs	r3, #0
 8008338:	f7f8 fb40 	bl	80009bc <__aeabi_dcmpeq>
 800833c:	2800      	cmp	r0, #0
 800833e:	d033      	beq.n	80083a8 <_printf_float+0x26c>
 8008340:	2301      	movs	r3, #1
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	4a35      	ldr	r2, [pc, #212]	; (800841c <_printf_float+0x2e0>)
 8008348:	47b8      	blx	r7
 800834a:	3001      	adds	r0, #1
 800834c:	f43f af51 	beq.w	80081f2 <_printf_float+0xb6>
 8008350:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008354:	429a      	cmp	r2, r3
 8008356:	db02      	blt.n	800835e <_printf_float+0x222>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	07d8      	lsls	r0, r3, #31
 800835c:	d50f      	bpl.n	800837e <_printf_float+0x242>
 800835e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008362:	4631      	mov	r1, r6
 8008364:	4628      	mov	r0, r5
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f af42 	beq.w	80081f2 <_printf_float+0xb6>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	f104 091a 	add.w	r9, r4, #26
 8008376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008378:	3b01      	subs	r3, #1
 800837a:	4543      	cmp	r3, r8
 800837c:	dc09      	bgt.n	8008392 <_printf_float+0x256>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	079b      	lsls	r3, r3, #30
 8008382:	f100 8102 	bmi.w	800858a <_printf_float+0x44e>
 8008386:	68e0      	ldr	r0, [r4, #12]
 8008388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800838a:	4298      	cmp	r0, r3
 800838c:	bfb8      	it	lt
 800838e:	4618      	movlt	r0, r3
 8008390:	e731      	b.n	80081f6 <_printf_float+0xba>
 8008392:	2301      	movs	r3, #1
 8008394:	464a      	mov	r2, r9
 8008396:	4631      	mov	r1, r6
 8008398:	4628      	mov	r0, r5
 800839a:	47b8      	blx	r7
 800839c:	3001      	adds	r0, #1
 800839e:	f43f af28 	beq.w	80081f2 <_printf_float+0xb6>
 80083a2:	f108 0801 	add.w	r8, r8, #1
 80083a6:	e7e6      	b.n	8008376 <_printf_float+0x23a>
 80083a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dc38      	bgt.n	8008420 <_printf_float+0x2e4>
 80083ae:	2301      	movs	r3, #1
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	4a19      	ldr	r2, [pc, #100]	; (800841c <_printf_float+0x2e0>)
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	f43f af1a 	beq.w	80081f2 <_printf_float+0xb6>
 80083be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083c2:	4313      	orrs	r3, r2
 80083c4:	d102      	bne.n	80083cc <_printf_float+0x290>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	07d9      	lsls	r1, r3, #31
 80083ca:	d5d8      	bpl.n	800837e <_printf_float+0x242>
 80083cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	f43f af0b 	beq.w	80081f2 <_printf_float+0xb6>
 80083dc:	f04f 0900 	mov.w	r9, #0
 80083e0:	f104 0a1a 	add.w	sl, r4, #26
 80083e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083e6:	425b      	negs	r3, r3
 80083e8:	454b      	cmp	r3, r9
 80083ea:	dc01      	bgt.n	80083f0 <_printf_float+0x2b4>
 80083ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ee:	e794      	b.n	800831a <_printf_float+0x1de>
 80083f0:	2301      	movs	r3, #1
 80083f2:	4652      	mov	r2, sl
 80083f4:	4631      	mov	r1, r6
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b8      	blx	r7
 80083fa:	3001      	adds	r0, #1
 80083fc:	f43f aef9 	beq.w	80081f2 <_printf_float+0xb6>
 8008400:	f109 0901 	add.w	r9, r9, #1
 8008404:	e7ee      	b.n	80083e4 <_printf_float+0x2a8>
 8008406:	bf00      	nop
 8008408:	7fefffff 	.word	0x7fefffff
 800840c:	0800cc58 	.word	0x0800cc58
 8008410:	0800cc5c 	.word	0x0800cc5c
 8008414:	0800cc64 	.word	0x0800cc64
 8008418:	0800cc60 	.word	0x0800cc60
 800841c:	0800cc68 	.word	0x0800cc68
 8008420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008424:	429a      	cmp	r2, r3
 8008426:	bfa8      	it	ge
 8008428:	461a      	movge	r2, r3
 800842a:	2a00      	cmp	r2, #0
 800842c:	4691      	mov	r9, r2
 800842e:	dc37      	bgt.n	80084a0 <_printf_float+0x364>
 8008430:	f04f 0b00 	mov.w	fp, #0
 8008434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008438:	f104 021a 	add.w	r2, r4, #26
 800843c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008440:	ebaa 0309 	sub.w	r3, sl, r9
 8008444:	455b      	cmp	r3, fp
 8008446:	dc33      	bgt.n	80084b0 <_printf_float+0x374>
 8008448:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800844c:	429a      	cmp	r2, r3
 800844e:	db3b      	blt.n	80084c8 <_printf_float+0x38c>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	07da      	lsls	r2, r3, #31
 8008454:	d438      	bmi.n	80084c8 <_printf_float+0x38c>
 8008456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008458:	990d      	ldr	r1, [sp, #52]	; 0x34
 800845a:	eba2 030a 	sub.w	r3, r2, sl
 800845e:	eba2 0901 	sub.w	r9, r2, r1
 8008462:	4599      	cmp	r9, r3
 8008464:	bfa8      	it	ge
 8008466:	4699      	movge	r9, r3
 8008468:	f1b9 0f00 	cmp.w	r9, #0
 800846c:	dc34      	bgt.n	80084d8 <_printf_float+0x39c>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008476:	f104 0a1a 	add.w	sl, r4, #26
 800847a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	eba3 0309 	sub.w	r3, r3, r9
 8008484:	4543      	cmp	r3, r8
 8008486:	f77f af7a 	ble.w	800837e <_printf_float+0x242>
 800848a:	2301      	movs	r3, #1
 800848c:	4652      	mov	r2, sl
 800848e:	4631      	mov	r1, r6
 8008490:	4628      	mov	r0, r5
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	f43f aeac 	beq.w	80081f2 <_printf_float+0xb6>
 800849a:	f108 0801 	add.w	r8, r8, #1
 800849e:	e7ec      	b.n	800847a <_printf_float+0x33e>
 80084a0:	4613      	mov	r3, r2
 80084a2:	4631      	mov	r1, r6
 80084a4:	4642      	mov	r2, r8
 80084a6:	4628      	mov	r0, r5
 80084a8:	47b8      	blx	r7
 80084aa:	3001      	adds	r0, #1
 80084ac:	d1c0      	bne.n	8008430 <_printf_float+0x2f4>
 80084ae:	e6a0      	b.n	80081f2 <_printf_float+0xb6>
 80084b0:	2301      	movs	r3, #1
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f ae99 	beq.w	80081f2 <_printf_float+0xb6>
 80084c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084c2:	f10b 0b01 	add.w	fp, fp, #1
 80084c6:	e7b9      	b.n	800843c <_printf_float+0x300>
 80084c8:	4631      	mov	r1, r6
 80084ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	d1bf      	bne.n	8008456 <_printf_float+0x31a>
 80084d6:	e68c      	b.n	80081f2 <_printf_float+0xb6>
 80084d8:	464b      	mov	r3, r9
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	eb08 020a 	add.w	r2, r8, sl
 80084e2:	47b8      	blx	r7
 80084e4:	3001      	adds	r0, #1
 80084e6:	d1c2      	bne.n	800846e <_printf_float+0x332>
 80084e8:	e683      	b.n	80081f2 <_printf_float+0xb6>
 80084ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084ec:	2a01      	cmp	r2, #1
 80084ee:	dc01      	bgt.n	80084f4 <_printf_float+0x3b8>
 80084f0:	07db      	lsls	r3, r3, #31
 80084f2:	d537      	bpl.n	8008564 <_printf_float+0x428>
 80084f4:	2301      	movs	r3, #1
 80084f6:	4642      	mov	r2, r8
 80084f8:	4631      	mov	r1, r6
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f ae77 	beq.w	80081f2 <_printf_float+0xb6>
 8008504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f ae6f 	beq.w	80081f2 <_printf_float+0xb6>
 8008514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008518:	2200      	movs	r2, #0
 800851a:	2300      	movs	r3, #0
 800851c:	f7f8 fa4e 	bl	80009bc <__aeabi_dcmpeq>
 8008520:	b9d8      	cbnz	r0, 800855a <_printf_float+0x41e>
 8008522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008524:	f108 0201 	add.w	r2, r8, #1
 8008528:	3b01      	subs	r3, #1
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	d10e      	bne.n	8008552 <_printf_float+0x416>
 8008534:	e65d      	b.n	80081f2 <_printf_float+0xb6>
 8008536:	2301      	movs	r3, #1
 8008538:	464a      	mov	r2, r9
 800853a:	4631      	mov	r1, r6
 800853c:	4628      	mov	r0, r5
 800853e:	47b8      	blx	r7
 8008540:	3001      	adds	r0, #1
 8008542:	f43f ae56 	beq.w	80081f2 <_printf_float+0xb6>
 8008546:	f108 0801 	add.w	r8, r8, #1
 800854a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800854c:	3b01      	subs	r3, #1
 800854e:	4543      	cmp	r3, r8
 8008550:	dcf1      	bgt.n	8008536 <_printf_float+0x3fa>
 8008552:	4653      	mov	r3, sl
 8008554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008558:	e6e0      	b.n	800831c <_printf_float+0x1e0>
 800855a:	f04f 0800 	mov.w	r8, #0
 800855e:	f104 091a 	add.w	r9, r4, #26
 8008562:	e7f2      	b.n	800854a <_printf_float+0x40e>
 8008564:	2301      	movs	r3, #1
 8008566:	4642      	mov	r2, r8
 8008568:	e7df      	b.n	800852a <_printf_float+0x3ee>
 800856a:	2301      	movs	r3, #1
 800856c:	464a      	mov	r2, r9
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f ae3c 	beq.w	80081f2 <_printf_float+0xb6>
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	4543      	cmp	r3, r8
 8008586:	dcf0      	bgt.n	800856a <_printf_float+0x42e>
 8008588:	e6fd      	b.n	8008386 <_printf_float+0x24a>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	f104 0919 	add.w	r9, r4, #25
 8008592:	e7f4      	b.n	800857e <_printf_float+0x442>

08008594 <_printf_common>:
 8008594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	4616      	mov	r6, r2
 800859a:	4699      	mov	r9, r3
 800859c:	688a      	ldr	r2, [r1, #8]
 800859e:	690b      	ldr	r3, [r1, #16]
 80085a0:	4607      	mov	r7, r0
 80085a2:	4293      	cmp	r3, r2
 80085a4:	bfb8      	it	lt
 80085a6:	4613      	movlt	r3, r2
 80085a8:	6033      	str	r3, [r6, #0]
 80085aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085ae:	460c      	mov	r4, r1
 80085b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085b4:	b10a      	cbz	r2, 80085ba <_printf_common+0x26>
 80085b6:	3301      	adds	r3, #1
 80085b8:	6033      	str	r3, [r6, #0]
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	0699      	lsls	r1, r3, #26
 80085be:	bf42      	ittt	mi
 80085c0:	6833      	ldrmi	r3, [r6, #0]
 80085c2:	3302      	addmi	r3, #2
 80085c4:	6033      	strmi	r3, [r6, #0]
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	f015 0506 	ands.w	r5, r5, #6
 80085cc:	d106      	bne.n	80085dc <_printf_common+0x48>
 80085ce:	f104 0a19 	add.w	sl, r4, #25
 80085d2:	68e3      	ldr	r3, [r4, #12]
 80085d4:	6832      	ldr	r2, [r6, #0]
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dc28      	bgt.n	800862e <_printf_common+0x9a>
 80085dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085e0:	1e13      	subs	r3, r2, #0
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	bf18      	it	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	0692      	lsls	r2, r2, #26
 80085ea:	d42d      	bmi.n	8008648 <_printf_common+0xb4>
 80085ec:	4649      	mov	r1, r9
 80085ee:	4638      	mov	r0, r7
 80085f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085f4:	47c0      	blx	r8
 80085f6:	3001      	adds	r0, #1
 80085f8:	d020      	beq.n	800863c <_printf_common+0xa8>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	68e5      	ldr	r5, [r4, #12]
 80085fe:	f003 0306 	and.w	r3, r3, #6
 8008602:	2b04      	cmp	r3, #4
 8008604:	bf18      	it	ne
 8008606:	2500      	movne	r5, #0
 8008608:	6832      	ldr	r2, [r6, #0]
 800860a:	f04f 0600 	mov.w	r6, #0
 800860e:	68a3      	ldr	r3, [r4, #8]
 8008610:	bf08      	it	eq
 8008612:	1aad      	subeq	r5, r5, r2
 8008614:	6922      	ldr	r2, [r4, #16]
 8008616:	bf08      	it	eq
 8008618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800861c:	4293      	cmp	r3, r2
 800861e:	bfc4      	itt	gt
 8008620:	1a9b      	subgt	r3, r3, r2
 8008622:	18ed      	addgt	r5, r5, r3
 8008624:	341a      	adds	r4, #26
 8008626:	42b5      	cmp	r5, r6
 8008628:	d11a      	bne.n	8008660 <_printf_common+0xcc>
 800862a:	2000      	movs	r0, #0
 800862c:	e008      	b.n	8008640 <_printf_common+0xac>
 800862e:	2301      	movs	r3, #1
 8008630:	4652      	mov	r2, sl
 8008632:	4649      	mov	r1, r9
 8008634:	4638      	mov	r0, r7
 8008636:	47c0      	blx	r8
 8008638:	3001      	adds	r0, #1
 800863a:	d103      	bne.n	8008644 <_printf_common+0xb0>
 800863c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008644:	3501      	adds	r5, #1
 8008646:	e7c4      	b.n	80085d2 <_printf_common+0x3e>
 8008648:	2030      	movs	r0, #48	; 0x30
 800864a:	18e1      	adds	r1, r4, r3
 800864c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008656:	4422      	add	r2, r4
 8008658:	3302      	adds	r3, #2
 800865a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800865e:	e7c5      	b.n	80085ec <_printf_common+0x58>
 8008660:	2301      	movs	r3, #1
 8008662:	4622      	mov	r2, r4
 8008664:	4649      	mov	r1, r9
 8008666:	4638      	mov	r0, r7
 8008668:	47c0      	blx	r8
 800866a:	3001      	adds	r0, #1
 800866c:	d0e6      	beq.n	800863c <_printf_common+0xa8>
 800866e:	3601      	adds	r6, #1
 8008670:	e7d9      	b.n	8008626 <_printf_common+0x92>
	...

08008674 <_printf_i>:
 8008674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008678:	460c      	mov	r4, r1
 800867a:	7e27      	ldrb	r7, [r4, #24]
 800867c:	4691      	mov	r9, r2
 800867e:	2f78      	cmp	r7, #120	; 0x78
 8008680:	4680      	mov	r8, r0
 8008682:	469a      	mov	sl, r3
 8008684:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800868a:	d807      	bhi.n	800869c <_printf_i+0x28>
 800868c:	2f62      	cmp	r7, #98	; 0x62
 800868e:	d80a      	bhi.n	80086a6 <_printf_i+0x32>
 8008690:	2f00      	cmp	r7, #0
 8008692:	f000 80d9 	beq.w	8008848 <_printf_i+0x1d4>
 8008696:	2f58      	cmp	r7, #88	; 0x58
 8008698:	f000 80a4 	beq.w	80087e4 <_printf_i+0x170>
 800869c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086a4:	e03a      	b.n	800871c <_printf_i+0xa8>
 80086a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086aa:	2b15      	cmp	r3, #21
 80086ac:	d8f6      	bhi.n	800869c <_printf_i+0x28>
 80086ae:	a001      	add	r0, pc, #4	; (adr r0, 80086b4 <_printf_i+0x40>)
 80086b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80086b4:	0800870d 	.word	0x0800870d
 80086b8:	08008721 	.word	0x08008721
 80086bc:	0800869d 	.word	0x0800869d
 80086c0:	0800869d 	.word	0x0800869d
 80086c4:	0800869d 	.word	0x0800869d
 80086c8:	0800869d 	.word	0x0800869d
 80086cc:	08008721 	.word	0x08008721
 80086d0:	0800869d 	.word	0x0800869d
 80086d4:	0800869d 	.word	0x0800869d
 80086d8:	0800869d 	.word	0x0800869d
 80086dc:	0800869d 	.word	0x0800869d
 80086e0:	0800882f 	.word	0x0800882f
 80086e4:	08008751 	.word	0x08008751
 80086e8:	08008811 	.word	0x08008811
 80086ec:	0800869d 	.word	0x0800869d
 80086f0:	0800869d 	.word	0x0800869d
 80086f4:	08008851 	.word	0x08008851
 80086f8:	0800869d 	.word	0x0800869d
 80086fc:	08008751 	.word	0x08008751
 8008700:	0800869d 	.word	0x0800869d
 8008704:	0800869d 	.word	0x0800869d
 8008708:	08008819 	.word	0x08008819
 800870c:	680b      	ldr	r3, [r1, #0]
 800870e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008712:	1d1a      	adds	r2, r3, #4
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	600a      	str	r2, [r1, #0]
 8008718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800871c:	2301      	movs	r3, #1
 800871e:	e0a4      	b.n	800886a <_printf_i+0x1f6>
 8008720:	6825      	ldr	r5, [r4, #0]
 8008722:	6808      	ldr	r0, [r1, #0]
 8008724:	062e      	lsls	r6, r5, #24
 8008726:	f100 0304 	add.w	r3, r0, #4
 800872a:	d50a      	bpl.n	8008742 <_printf_i+0xce>
 800872c:	6805      	ldr	r5, [r0, #0]
 800872e:	600b      	str	r3, [r1, #0]
 8008730:	2d00      	cmp	r5, #0
 8008732:	da03      	bge.n	800873c <_printf_i+0xc8>
 8008734:	232d      	movs	r3, #45	; 0x2d
 8008736:	426d      	negs	r5, r5
 8008738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800873c:	230a      	movs	r3, #10
 800873e:	485e      	ldr	r0, [pc, #376]	; (80088b8 <_printf_i+0x244>)
 8008740:	e019      	b.n	8008776 <_printf_i+0x102>
 8008742:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008746:	6805      	ldr	r5, [r0, #0]
 8008748:	600b      	str	r3, [r1, #0]
 800874a:	bf18      	it	ne
 800874c:	b22d      	sxthne	r5, r5
 800874e:	e7ef      	b.n	8008730 <_printf_i+0xbc>
 8008750:	680b      	ldr	r3, [r1, #0]
 8008752:	6825      	ldr	r5, [r4, #0]
 8008754:	1d18      	adds	r0, r3, #4
 8008756:	6008      	str	r0, [r1, #0]
 8008758:	0628      	lsls	r0, r5, #24
 800875a:	d501      	bpl.n	8008760 <_printf_i+0xec>
 800875c:	681d      	ldr	r5, [r3, #0]
 800875e:	e002      	b.n	8008766 <_printf_i+0xf2>
 8008760:	0669      	lsls	r1, r5, #25
 8008762:	d5fb      	bpl.n	800875c <_printf_i+0xe8>
 8008764:	881d      	ldrh	r5, [r3, #0]
 8008766:	2f6f      	cmp	r7, #111	; 0x6f
 8008768:	bf0c      	ite	eq
 800876a:	2308      	moveq	r3, #8
 800876c:	230a      	movne	r3, #10
 800876e:	4852      	ldr	r0, [pc, #328]	; (80088b8 <_printf_i+0x244>)
 8008770:	2100      	movs	r1, #0
 8008772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008776:	6866      	ldr	r6, [r4, #4]
 8008778:	2e00      	cmp	r6, #0
 800877a:	bfa8      	it	ge
 800877c:	6821      	ldrge	r1, [r4, #0]
 800877e:	60a6      	str	r6, [r4, #8]
 8008780:	bfa4      	itt	ge
 8008782:	f021 0104 	bicge.w	r1, r1, #4
 8008786:	6021      	strge	r1, [r4, #0]
 8008788:	b90d      	cbnz	r5, 800878e <_printf_i+0x11a>
 800878a:	2e00      	cmp	r6, #0
 800878c:	d04d      	beq.n	800882a <_printf_i+0x1b6>
 800878e:	4616      	mov	r6, r2
 8008790:	fbb5 f1f3 	udiv	r1, r5, r3
 8008794:	fb03 5711 	mls	r7, r3, r1, r5
 8008798:	5dc7      	ldrb	r7, [r0, r7]
 800879a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800879e:	462f      	mov	r7, r5
 80087a0:	42bb      	cmp	r3, r7
 80087a2:	460d      	mov	r5, r1
 80087a4:	d9f4      	bls.n	8008790 <_printf_i+0x11c>
 80087a6:	2b08      	cmp	r3, #8
 80087a8:	d10b      	bne.n	80087c2 <_printf_i+0x14e>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	07df      	lsls	r7, r3, #31
 80087ae:	d508      	bpl.n	80087c2 <_printf_i+0x14e>
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	6861      	ldr	r1, [r4, #4]
 80087b4:	4299      	cmp	r1, r3
 80087b6:	bfde      	ittt	le
 80087b8:	2330      	movle	r3, #48	; 0x30
 80087ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087be:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80087c2:	1b92      	subs	r2, r2, r6
 80087c4:	6122      	str	r2, [r4, #16]
 80087c6:	464b      	mov	r3, r9
 80087c8:	4621      	mov	r1, r4
 80087ca:	4640      	mov	r0, r8
 80087cc:	f8cd a000 	str.w	sl, [sp]
 80087d0:	aa03      	add	r2, sp, #12
 80087d2:	f7ff fedf 	bl	8008594 <_printf_common>
 80087d6:	3001      	adds	r0, #1
 80087d8:	d14c      	bne.n	8008874 <_printf_i+0x200>
 80087da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087de:	b004      	add	sp, #16
 80087e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e4:	4834      	ldr	r0, [pc, #208]	; (80088b8 <_printf_i+0x244>)
 80087e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087ea:	680e      	ldr	r6, [r1, #0]
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80087f2:	061f      	lsls	r7, r3, #24
 80087f4:	600e      	str	r6, [r1, #0]
 80087f6:	d514      	bpl.n	8008822 <_printf_i+0x1ae>
 80087f8:	07d9      	lsls	r1, r3, #31
 80087fa:	bf44      	itt	mi
 80087fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008800:	6023      	strmi	r3, [r4, #0]
 8008802:	b91d      	cbnz	r5, 800880c <_printf_i+0x198>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	f023 0320 	bic.w	r3, r3, #32
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	2310      	movs	r3, #16
 800880e:	e7af      	b.n	8008770 <_printf_i+0xfc>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	f043 0320 	orr.w	r3, r3, #32
 8008816:	6023      	str	r3, [r4, #0]
 8008818:	2378      	movs	r3, #120	; 0x78
 800881a:	4828      	ldr	r0, [pc, #160]	; (80088bc <_printf_i+0x248>)
 800881c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008820:	e7e3      	b.n	80087ea <_printf_i+0x176>
 8008822:	065e      	lsls	r6, r3, #25
 8008824:	bf48      	it	mi
 8008826:	b2ad      	uxthmi	r5, r5
 8008828:	e7e6      	b.n	80087f8 <_printf_i+0x184>
 800882a:	4616      	mov	r6, r2
 800882c:	e7bb      	b.n	80087a6 <_printf_i+0x132>
 800882e:	680b      	ldr	r3, [r1, #0]
 8008830:	6826      	ldr	r6, [r4, #0]
 8008832:	1d1d      	adds	r5, r3, #4
 8008834:	6960      	ldr	r0, [r4, #20]
 8008836:	600d      	str	r5, [r1, #0]
 8008838:	0635      	lsls	r5, r6, #24
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	d501      	bpl.n	8008842 <_printf_i+0x1ce>
 800883e:	6018      	str	r0, [r3, #0]
 8008840:	e002      	b.n	8008848 <_printf_i+0x1d4>
 8008842:	0671      	lsls	r1, r6, #25
 8008844:	d5fb      	bpl.n	800883e <_printf_i+0x1ca>
 8008846:	8018      	strh	r0, [r3, #0]
 8008848:	2300      	movs	r3, #0
 800884a:	4616      	mov	r6, r2
 800884c:	6123      	str	r3, [r4, #16]
 800884e:	e7ba      	b.n	80087c6 <_printf_i+0x152>
 8008850:	680b      	ldr	r3, [r1, #0]
 8008852:	1d1a      	adds	r2, r3, #4
 8008854:	600a      	str	r2, [r1, #0]
 8008856:	681e      	ldr	r6, [r3, #0]
 8008858:	2100      	movs	r1, #0
 800885a:	4630      	mov	r0, r6
 800885c:	6862      	ldr	r2, [r4, #4]
 800885e:	f002 f91d 	bl	800aa9c <memchr>
 8008862:	b108      	cbz	r0, 8008868 <_printf_i+0x1f4>
 8008864:	1b80      	subs	r0, r0, r6
 8008866:	6060      	str	r0, [r4, #4]
 8008868:	6863      	ldr	r3, [r4, #4]
 800886a:	6123      	str	r3, [r4, #16]
 800886c:	2300      	movs	r3, #0
 800886e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008872:	e7a8      	b.n	80087c6 <_printf_i+0x152>
 8008874:	4632      	mov	r2, r6
 8008876:	4649      	mov	r1, r9
 8008878:	4640      	mov	r0, r8
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	47d0      	blx	sl
 800887e:	3001      	adds	r0, #1
 8008880:	d0ab      	beq.n	80087da <_printf_i+0x166>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	079b      	lsls	r3, r3, #30
 8008886:	d413      	bmi.n	80088b0 <_printf_i+0x23c>
 8008888:	68e0      	ldr	r0, [r4, #12]
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	4298      	cmp	r0, r3
 800888e:	bfb8      	it	lt
 8008890:	4618      	movlt	r0, r3
 8008892:	e7a4      	b.n	80087de <_printf_i+0x16a>
 8008894:	2301      	movs	r3, #1
 8008896:	4632      	mov	r2, r6
 8008898:	4649      	mov	r1, r9
 800889a:	4640      	mov	r0, r8
 800889c:	47d0      	blx	sl
 800889e:	3001      	adds	r0, #1
 80088a0:	d09b      	beq.n	80087da <_printf_i+0x166>
 80088a2:	3501      	adds	r5, #1
 80088a4:	68e3      	ldr	r3, [r4, #12]
 80088a6:	9903      	ldr	r1, [sp, #12]
 80088a8:	1a5b      	subs	r3, r3, r1
 80088aa:	42ab      	cmp	r3, r5
 80088ac:	dcf2      	bgt.n	8008894 <_printf_i+0x220>
 80088ae:	e7eb      	b.n	8008888 <_printf_i+0x214>
 80088b0:	2500      	movs	r5, #0
 80088b2:	f104 0619 	add.w	r6, r4, #25
 80088b6:	e7f5      	b.n	80088a4 <_printf_i+0x230>
 80088b8:	0800cc6a 	.word	0x0800cc6a
 80088bc:	0800cc7b 	.word	0x0800cc7b

080088c0 <siprintf>:
 80088c0:	b40e      	push	{r1, r2, r3}
 80088c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088c6:	b500      	push	{lr}
 80088c8:	b09c      	sub	sp, #112	; 0x70
 80088ca:	ab1d      	add	r3, sp, #116	; 0x74
 80088cc:	9002      	str	r0, [sp, #8]
 80088ce:	9006      	str	r0, [sp, #24]
 80088d0:	9107      	str	r1, [sp, #28]
 80088d2:	9104      	str	r1, [sp, #16]
 80088d4:	4808      	ldr	r0, [pc, #32]	; (80088f8 <siprintf+0x38>)
 80088d6:	4909      	ldr	r1, [pc, #36]	; (80088fc <siprintf+0x3c>)
 80088d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088dc:	9105      	str	r1, [sp, #20]
 80088de:	6800      	ldr	r0, [r0, #0]
 80088e0:	a902      	add	r1, sp, #8
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	f002 febe 	bl	800b664 <_svfiprintf_r>
 80088e8:	2200      	movs	r2, #0
 80088ea:	9b02      	ldr	r3, [sp, #8]
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	b01c      	add	sp, #112	; 0x70
 80088f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f4:	b003      	add	sp, #12
 80088f6:	4770      	bx	lr
 80088f8:	200001d4 	.word	0x200001d4
 80088fc:	ffff0208 	.word	0xffff0208

08008900 <strpbrk>:
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4603      	mov	r3, r0
 8008904:	7800      	ldrb	r0, [r0, #0]
 8008906:	b190      	cbz	r0, 800892e <strpbrk+0x2e>
 8008908:	460c      	mov	r4, r1
 800890a:	4618      	mov	r0, r3
 800890c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008910:	b14d      	cbz	r5, 8008926 <strpbrk+0x26>
 8008912:	460a      	mov	r2, r1
 8008914:	e001      	b.n	800891a <strpbrk+0x1a>
 8008916:	42ae      	cmp	r6, r5
 8008918:	d009      	beq.n	800892e <strpbrk+0x2e>
 800891a:	4614      	mov	r4, r2
 800891c:	f812 6b01 	ldrb.w	r6, [r2], #1
 8008920:	2e00      	cmp	r6, #0
 8008922:	d1f8      	bne.n	8008916 <strpbrk+0x16>
 8008924:	e7f1      	b.n	800890a <strpbrk+0xa>
 8008926:	7823      	ldrb	r3, [r4, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	bf08      	it	eq
 800892c:	2000      	moveq	r0, #0
 800892e:	bd70      	pop	{r4, r5, r6, pc}

08008930 <sulp>:
 8008930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008934:	460f      	mov	r7, r1
 8008936:	4690      	mov	r8, r2
 8008938:	f002 fc3c 	bl	800b1b4 <__ulp>
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	d011      	beq.n	800896a <sulp+0x3a>
 8008946:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800894a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800894e:	2b00      	cmp	r3, #0
 8008950:	dd0b      	ble.n	800896a <sulp+0x3a>
 8008952:	2400      	movs	r4, #0
 8008954:	051b      	lsls	r3, r3, #20
 8008956:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800895a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800895e:	4622      	mov	r2, r4
 8008960:	462b      	mov	r3, r5
 8008962:	f7f7 fdc3 	bl	80004ec <__aeabi_dmul>
 8008966:	4604      	mov	r4, r0
 8008968:	460d      	mov	r5, r1
 800896a:	4620      	mov	r0, r4
 800896c:	4629      	mov	r1, r5
 800896e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008972:	0000      	movs	r0, r0
 8008974:	0000      	movs	r0, r0
	...

08008978 <_strtod_l>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	469b      	mov	fp, r3
 800897e:	2300      	movs	r3, #0
 8008980:	b0a1      	sub	sp, #132	; 0x84
 8008982:	931c      	str	r3, [sp, #112]	; 0x70
 8008984:	4ba1      	ldr	r3, [pc, #644]	; (8008c0c <_strtod_l+0x294>)
 8008986:	4682      	mov	sl, r0
 8008988:	681f      	ldr	r7, [r3, #0]
 800898a:	460e      	mov	r6, r1
 800898c:	4638      	mov	r0, r7
 800898e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008990:	f7f7 fbe8 	bl	8000164 <strlen>
 8008994:	f04f 0800 	mov.w	r8, #0
 8008998:	4604      	mov	r4, r0
 800899a:	f04f 0900 	mov.w	r9, #0
 800899e:	961b      	str	r6, [sp, #108]	; 0x6c
 80089a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089a2:	781a      	ldrb	r2, [r3, #0]
 80089a4:	2a2b      	cmp	r2, #43	; 0x2b
 80089a6:	d04c      	beq.n	8008a42 <_strtod_l+0xca>
 80089a8:	d83a      	bhi.n	8008a20 <_strtod_l+0xa8>
 80089aa:	2a0d      	cmp	r2, #13
 80089ac:	d833      	bhi.n	8008a16 <_strtod_l+0x9e>
 80089ae:	2a08      	cmp	r2, #8
 80089b0:	d833      	bhi.n	8008a1a <_strtod_l+0xa2>
 80089b2:	2a00      	cmp	r2, #0
 80089b4:	d03d      	beq.n	8008a32 <_strtod_l+0xba>
 80089b6:	2300      	movs	r3, #0
 80089b8:	930c      	str	r3, [sp, #48]	; 0x30
 80089ba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80089bc:	782b      	ldrb	r3, [r5, #0]
 80089be:	2b30      	cmp	r3, #48	; 0x30
 80089c0:	f040 80af 	bne.w	8008b22 <_strtod_l+0x1aa>
 80089c4:	786b      	ldrb	r3, [r5, #1]
 80089c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089ca:	2b58      	cmp	r3, #88	; 0x58
 80089cc:	d16c      	bne.n	8008aa8 <_strtod_l+0x130>
 80089ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089d0:	4650      	mov	r0, sl
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	ab1c      	add	r3, sp, #112	; 0x70
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4a8d      	ldr	r2, [pc, #564]	; (8008c10 <_strtod_l+0x298>)
 80089da:	f8cd b008 	str.w	fp, [sp, #8]
 80089de:	ab1d      	add	r3, sp, #116	; 0x74
 80089e0:	a91b      	add	r1, sp, #108	; 0x6c
 80089e2:	f001 fd3f 	bl	800a464 <__gethex>
 80089e6:	f010 0607 	ands.w	r6, r0, #7
 80089ea:	4604      	mov	r4, r0
 80089ec:	d005      	beq.n	80089fa <_strtod_l+0x82>
 80089ee:	2e06      	cmp	r6, #6
 80089f0:	d129      	bne.n	8008a46 <_strtod_l+0xce>
 80089f2:	2300      	movs	r3, #0
 80089f4:	3501      	adds	r5, #1
 80089f6:	951b      	str	r5, [sp, #108]	; 0x6c
 80089f8:	930c      	str	r3, [sp, #48]	; 0x30
 80089fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f040 8596 	bne.w	800952e <_strtod_l+0xbb6>
 8008a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a04:	b1d3      	cbz	r3, 8008a3c <_strtod_l+0xc4>
 8008a06:	4642      	mov	r2, r8
 8008a08:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	b021      	add	sp, #132	; 0x84
 8008a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a16:	2a20      	cmp	r2, #32
 8008a18:	d1cd      	bne.n	80089b6 <_strtod_l+0x3e>
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a1e:	e7bf      	b.n	80089a0 <_strtod_l+0x28>
 8008a20:	2a2d      	cmp	r2, #45	; 0x2d
 8008a22:	d1c8      	bne.n	80089b6 <_strtod_l+0x3e>
 8008a24:	2201      	movs	r2, #1
 8008a26:	920c      	str	r2, [sp, #48]	; 0x30
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a2c:	785b      	ldrb	r3, [r3, #1]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1c3      	bne.n	80089ba <_strtod_l+0x42>
 8008a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a34:	961b      	str	r6, [sp, #108]	; 0x6c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f040 8577 	bne.w	800952a <_strtod_l+0xbb2>
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	464b      	mov	r3, r9
 8008a40:	e7e4      	b.n	8008a0c <_strtod_l+0x94>
 8008a42:	2200      	movs	r2, #0
 8008a44:	e7ef      	b.n	8008a26 <_strtod_l+0xae>
 8008a46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a48:	b13a      	cbz	r2, 8008a5a <_strtod_l+0xe2>
 8008a4a:	2135      	movs	r1, #53	; 0x35
 8008a4c:	a81e      	add	r0, sp, #120	; 0x78
 8008a4e:	f002 fcb5 	bl	800b3bc <__copybits>
 8008a52:	4650      	mov	r0, sl
 8008a54:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a56:	f002 f87d 	bl	800ab54 <_Bfree>
 8008a5a:	3e01      	subs	r6, #1
 8008a5c:	2e05      	cmp	r6, #5
 8008a5e:	d807      	bhi.n	8008a70 <_strtod_l+0xf8>
 8008a60:	e8df f006 	tbb	[pc, r6]
 8008a64:	1d180b0e 	.word	0x1d180b0e
 8008a68:	030e      	.short	0x030e
 8008a6a:	f04f 0900 	mov.w	r9, #0
 8008a6e:	46c8      	mov	r8, r9
 8008a70:	0721      	lsls	r1, r4, #28
 8008a72:	d5c2      	bpl.n	80089fa <_strtod_l+0x82>
 8008a74:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008a78:	e7bf      	b.n	80089fa <_strtod_l+0x82>
 8008a7a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8008a7e:	e7f7      	b.n	8008a70 <_strtod_l+0xf8>
 8008a80:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a82:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8008a86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a8e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a92:	e7ed      	b.n	8008a70 <_strtod_l+0xf8>
 8008a94:	f04f 0800 	mov.w	r8, #0
 8008a98:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008c14 <_strtod_l+0x29c>
 8008a9c:	e7e8      	b.n	8008a70 <_strtod_l+0xf8>
 8008a9e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008aa2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008aa6:	e7e3      	b.n	8008a70 <_strtod_l+0xf8>
 8008aa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	921b      	str	r2, [sp, #108]	; 0x6c
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	2b30      	cmp	r3, #48	; 0x30
 8008ab2:	d0f9      	beq.n	8008aa8 <_strtod_l+0x130>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0a0      	beq.n	80089fa <_strtod_l+0x82>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	9307      	str	r3, [sp, #28]
 8008abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008abe:	220a      	movs	r2, #10
 8008ac0:	9308      	str	r3, [sp, #32]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	469b      	mov	fp, r3
 8008ac6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008aca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008acc:	7805      	ldrb	r5, [r0, #0]
 8008ace:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008ad2:	b2d9      	uxtb	r1, r3
 8008ad4:	2909      	cmp	r1, #9
 8008ad6:	d926      	bls.n	8008b26 <_strtod_l+0x1ae>
 8008ad8:	4622      	mov	r2, r4
 8008ada:	4639      	mov	r1, r7
 8008adc:	f002 fed8 	bl	800b890 <strncmp>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d032      	beq.n	8008b4a <_strtod_l+0x1d2>
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	462b      	mov	r3, r5
 8008ae8:	465c      	mov	r4, fp
 8008aea:	4602      	mov	r2, r0
 8008aec:	9004      	str	r0, [sp, #16]
 8008aee:	2b65      	cmp	r3, #101	; 0x65
 8008af0:	d001      	beq.n	8008af6 <_strtod_l+0x17e>
 8008af2:	2b45      	cmp	r3, #69	; 0x45
 8008af4:	d113      	bne.n	8008b1e <_strtod_l+0x1a6>
 8008af6:	b91c      	cbnz	r4, 8008b00 <_strtod_l+0x188>
 8008af8:	9b07      	ldr	r3, [sp, #28]
 8008afa:	4303      	orrs	r3, r0
 8008afc:	d099      	beq.n	8008a32 <_strtod_l+0xba>
 8008afe:	2400      	movs	r4, #0
 8008b00:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008b02:	1c73      	adds	r3, r6, #1
 8008b04:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b06:	7873      	ldrb	r3, [r6, #1]
 8008b08:	2b2b      	cmp	r3, #43	; 0x2b
 8008b0a:	d078      	beq.n	8008bfe <_strtod_l+0x286>
 8008b0c:	2b2d      	cmp	r3, #45	; 0x2d
 8008b0e:	d07b      	beq.n	8008c08 <_strtod_l+0x290>
 8008b10:	2700      	movs	r7, #0
 8008b12:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008b16:	2909      	cmp	r1, #9
 8008b18:	f240 8082 	bls.w	8008c20 <_strtod_l+0x2a8>
 8008b1c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008b1e:	2500      	movs	r5, #0
 8008b20:	e09e      	b.n	8008c60 <_strtod_l+0x2e8>
 8008b22:	2300      	movs	r3, #0
 8008b24:	e7c9      	b.n	8008aba <_strtod_l+0x142>
 8008b26:	f1bb 0f08 	cmp.w	fp, #8
 8008b2a:	bfd5      	itete	le
 8008b2c:	9906      	ldrle	r1, [sp, #24]
 8008b2e:	9905      	ldrgt	r1, [sp, #20]
 8008b30:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b34:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b38:	f100 0001 	add.w	r0, r0, #1
 8008b3c:	bfd4      	ite	le
 8008b3e:	9306      	strle	r3, [sp, #24]
 8008b40:	9305      	strgt	r3, [sp, #20]
 8008b42:	f10b 0b01 	add.w	fp, fp, #1
 8008b46:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b48:	e7bf      	b.n	8008aca <_strtod_l+0x152>
 8008b4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b4c:	191a      	adds	r2, r3, r4
 8008b4e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b50:	5d1b      	ldrb	r3, [r3, r4]
 8008b52:	f1bb 0f00 	cmp.w	fp, #0
 8008b56:	d036      	beq.n	8008bc6 <_strtod_l+0x24e>
 8008b58:	465c      	mov	r4, fp
 8008b5a:	9004      	str	r0, [sp, #16]
 8008b5c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008b60:	2a09      	cmp	r2, #9
 8008b62:	d912      	bls.n	8008b8a <_strtod_l+0x212>
 8008b64:	2201      	movs	r2, #1
 8008b66:	e7c2      	b.n	8008aee <_strtod_l+0x176>
 8008b68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b30      	cmp	r3, #48	; 0x30
 8008b74:	d0f8      	beq.n	8008b68 <_strtod_l+0x1f0>
 8008b76:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008b7a:	2a08      	cmp	r2, #8
 8008b7c:	f200 84dc 	bhi.w	8009538 <_strtod_l+0xbc0>
 8008b80:	9004      	str	r0, [sp, #16]
 8008b82:	2000      	movs	r0, #0
 8008b84:	4604      	mov	r4, r0
 8008b86:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b88:	9208      	str	r2, [sp, #32]
 8008b8a:	3b30      	subs	r3, #48	; 0x30
 8008b8c:	f100 0201 	add.w	r2, r0, #1
 8008b90:	d013      	beq.n	8008bba <_strtod_l+0x242>
 8008b92:	9904      	ldr	r1, [sp, #16]
 8008b94:	1905      	adds	r5, r0, r4
 8008b96:	4411      	add	r1, r2
 8008b98:	9104      	str	r1, [sp, #16]
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	210a      	movs	r1, #10
 8008b9e:	42aa      	cmp	r2, r5
 8008ba0:	d113      	bne.n	8008bca <_strtod_l+0x252>
 8008ba2:	1822      	adds	r2, r4, r0
 8008ba4:	2a08      	cmp	r2, #8
 8008ba6:	f104 0401 	add.w	r4, r4, #1
 8008baa:	4404      	add	r4, r0
 8008bac:	dc1b      	bgt.n	8008be6 <_strtod_l+0x26e>
 8008bae:	220a      	movs	r2, #10
 8008bb0:	9906      	ldr	r1, [sp, #24]
 8008bb2:	fb02 3301 	mla	r3, r2, r1, r3
 8008bb6:	9306      	str	r3, [sp, #24]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	1c59      	adds	r1, r3, #1
 8008bc0:	911b      	str	r1, [sp, #108]	; 0x6c
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	e7ca      	b.n	8008b5c <_strtod_l+0x1e4>
 8008bc6:	4658      	mov	r0, fp
 8008bc8:	e7d3      	b.n	8008b72 <_strtod_l+0x1fa>
 8008bca:	2a08      	cmp	r2, #8
 8008bcc:	dc04      	bgt.n	8008bd8 <_strtod_l+0x260>
 8008bce:	9f06      	ldr	r7, [sp, #24]
 8008bd0:	434f      	muls	r7, r1
 8008bd2:	9706      	str	r7, [sp, #24]
 8008bd4:	3201      	adds	r2, #1
 8008bd6:	e7e2      	b.n	8008b9e <_strtod_l+0x226>
 8008bd8:	1c57      	adds	r7, r2, #1
 8008bda:	2f10      	cmp	r7, #16
 8008bdc:	bfde      	ittt	le
 8008bde:	9f05      	ldrle	r7, [sp, #20]
 8008be0:	434f      	mulle	r7, r1
 8008be2:	9705      	strle	r7, [sp, #20]
 8008be4:	e7f6      	b.n	8008bd4 <_strtod_l+0x25c>
 8008be6:	2c10      	cmp	r4, #16
 8008be8:	bfdf      	itttt	le
 8008bea:	220a      	movle	r2, #10
 8008bec:	9905      	ldrle	r1, [sp, #20]
 8008bee:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bf2:	9305      	strle	r3, [sp, #20]
 8008bf4:	e7e0      	b.n	8008bb8 <_strtod_l+0x240>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	e77c      	b.n	8008af8 <_strtod_l+0x180>
 8008bfe:	2700      	movs	r7, #0
 8008c00:	1cb3      	adds	r3, r6, #2
 8008c02:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c04:	78b3      	ldrb	r3, [r6, #2]
 8008c06:	e784      	b.n	8008b12 <_strtod_l+0x19a>
 8008c08:	2701      	movs	r7, #1
 8008c0a:	e7f9      	b.n	8008c00 <_strtod_l+0x288>
 8008c0c:	0800cee0 	.word	0x0800cee0
 8008c10:	0800cc8c 	.word	0x0800cc8c
 8008c14:	7ff00000 	.word	0x7ff00000
 8008c18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c1a:	1c59      	adds	r1, r3, #1
 8008c1c:	911b      	str	r1, [sp, #108]	; 0x6c
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b30      	cmp	r3, #48	; 0x30
 8008c22:	d0f9      	beq.n	8008c18 <_strtod_l+0x2a0>
 8008c24:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008c28:	2908      	cmp	r1, #8
 8008c2a:	f63f af78 	bhi.w	8008b1e <_strtod_l+0x1a6>
 8008c2e:	f04f 0e0a 	mov.w	lr, #10
 8008c32:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8008c36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c38:	9309      	str	r3, [sp, #36]	; 0x24
 8008c3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c3c:	1c59      	adds	r1, r3, #1
 8008c3e:	911b      	str	r1, [sp, #108]	; 0x6c
 8008c40:	785b      	ldrb	r3, [r3, #1]
 8008c42:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8008c46:	2d09      	cmp	r5, #9
 8008c48:	d935      	bls.n	8008cb6 <_strtod_l+0x33e>
 8008c4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c4c:	1b49      	subs	r1, r1, r5
 8008c4e:	2908      	cmp	r1, #8
 8008c50:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008c54:	dc02      	bgt.n	8008c5c <_strtod_l+0x2e4>
 8008c56:	4565      	cmp	r5, ip
 8008c58:	bfa8      	it	ge
 8008c5a:	4665      	movge	r5, ip
 8008c5c:	b107      	cbz	r7, 8008c60 <_strtod_l+0x2e8>
 8008c5e:	426d      	negs	r5, r5
 8008c60:	2c00      	cmp	r4, #0
 8008c62:	d14c      	bne.n	8008cfe <_strtod_l+0x386>
 8008c64:	9907      	ldr	r1, [sp, #28]
 8008c66:	4301      	orrs	r1, r0
 8008c68:	f47f aec7 	bne.w	80089fa <_strtod_l+0x82>
 8008c6c:	2a00      	cmp	r2, #0
 8008c6e:	f47f aee0 	bne.w	8008a32 <_strtod_l+0xba>
 8008c72:	2b69      	cmp	r3, #105	; 0x69
 8008c74:	d026      	beq.n	8008cc4 <_strtod_l+0x34c>
 8008c76:	dc23      	bgt.n	8008cc0 <_strtod_l+0x348>
 8008c78:	2b49      	cmp	r3, #73	; 0x49
 8008c7a:	d023      	beq.n	8008cc4 <_strtod_l+0x34c>
 8008c7c:	2b4e      	cmp	r3, #78	; 0x4e
 8008c7e:	f47f aed8 	bne.w	8008a32 <_strtod_l+0xba>
 8008c82:	499c      	ldr	r1, [pc, #624]	; (8008ef4 <_strtod_l+0x57c>)
 8008c84:	a81b      	add	r0, sp, #108	; 0x6c
 8008c86:	f001 fe3b 	bl	800a900 <__match>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aed1 	beq.w	8008a32 <_strtod_l+0xba>
 8008c90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b28      	cmp	r3, #40	; 0x28
 8008c96:	d12c      	bne.n	8008cf2 <_strtod_l+0x37a>
 8008c98:	4997      	ldr	r1, [pc, #604]	; (8008ef8 <_strtod_l+0x580>)
 8008c9a:	aa1e      	add	r2, sp, #120	; 0x78
 8008c9c:	a81b      	add	r0, sp, #108	; 0x6c
 8008c9e:	f001 fe43 	bl	800a928 <__hexnan>
 8008ca2:	2805      	cmp	r0, #5
 8008ca4:	d125      	bne.n	8008cf2 <_strtod_l+0x37a>
 8008ca6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ca8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8008cac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008cb0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008cb4:	e6a1      	b.n	80089fa <_strtod_l+0x82>
 8008cb6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8008cba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008cbe:	e7bc      	b.n	8008c3a <_strtod_l+0x2c2>
 8008cc0:	2b6e      	cmp	r3, #110	; 0x6e
 8008cc2:	e7dc      	b.n	8008c7e <_strtod_l+0x306>
 8008cc4:	498d      	ldr	r1, [pc, #564]	; (8008efc <_strtod_l+0x584>)
 8008cc6:	a81b      	add	r0, sp, #108	; 0x6c
 8008cc8:	f001 fe1a 	bl	800a900 <__match>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	f43f aeb0 	beq.w	8008a32 <_strtod_l+0xba>
 8008cd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cd4:	498a      	ldr	r1, [pc, #552]	; (8008f00 <_strtod_l+0x588>)
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	a81b      	add	r0, sp, #108	; 0x6c
 8008cda:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cdc:	f001 fe10 	bl	800a900 <__match>
 8008ce0:	b910      	cbnz	r0, 8008ce8 <_strtod_l+0x370>
 8008ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ce8:	f04f 0800 	mov.w	r8, #0
 8008cec:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008f10 <_strtod_l+0x598>
 8008cf0:	e683      	b.n	80089fa <_strtod_l+0x82>
 8008cf2:	4884      	ldr	r0, [pc, #528]	; (8008f04 <_strtod_l+0x58c>)
 8008cf4:	f002 fdb6 	bl	800b864 <nan>
 8008cf8:	4680      	mov	r8, r0
 8008cfa:	4689      	mov	r9, r1
 8008cfc:	e67d      	b.n	80089fa <_strtod_l+0x82>
 8008cfe:	9b04      	ldr	r3, [sp, #16]
 8008d00:	f1bb 0f00 	cmp.w	fp, #0
 8008d04:	bf08      	it	eq
 8008d06:	46a3      	moveq	fp, r4
 8008d08:	1aeb      	subs	r3, r5, r3
 8008d0a:	2c10      	cmp	r4, #16
 8008d0c:	9806      	ldr	r0, [sp, #24]
 8008d0e:	4626      	mov	r6, r4
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	bfa8      	it	ge
 8008d14:	2610      	movge	r6, #16
 8008d16:	f7f7 fb6f 	bl	80003f8 <__aeabi_ui2d>
 8008d1a:	2c09      	cmp	r4, #9
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4689      	mov	r9, r1
 8008d20:	dd13      	ble.n	8008d4a <_strtod_l+0x3d2>
 8008d22:	4b79      	ldr	r3, [pc, #484]	; (8008f08 <_strtod_l+0x590>)
 8008d24:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d28:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d2c:	f7f7 fbde 	bl	80004ec <__aeabi_dmul>
 8008d30:	4680      	mov	r8, r0
 8008d32:	9805      	ldr	r0, [sp, #20]
 8008d34:	4689      	mov	r9, r1
 8008d36:	f7f7 fb5f 	bl	80003f8 <__aeabi_ui2d>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4649      	mov	r1, r9
 8008d42:	f7f7 fa1d 	bl	8000180 <__adddf3>
 8008d46:	4680      	mov	r8, r0
 8008d48:	4689      	mov	r9, r1
 8008d4a:	2c0f      	cmp	r4, #15
 8008d4c:	dc36      	bgt.n	8008dbc <_strtod_l+0x444>
 8008d4e:	9b07      	ldr	r3, [sp, #28]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f43f ae52 	beq.w	80089fa <_strtod_l+0x82>
 8008d56:	dd22      	ble.n	8008d9e <_strtod_l+0x426>
 8008d58:	2b16      	cmp	r3, #22
 8008d5a:	dc09      	bgt.n	8008d70 <_strtod_l+0x3f8>
 8008d5c:	4c6a      	ldr	r4, [pc, #424]	; (8008f08 <_strtod_l+0x590>)
 8008d5e:	4642      	mov	r2, r8
 8008d60:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8008d64:	464b      	mov	r3, r9
 8008d66:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008d6a:	f7f7 fbbf 	bl	80004ec <__aeabi_dmul>
 8008d6e:	e7c3      	b.n	8008cf8 <_strtod_l+0x380>
 8008d70:	9a07      	ldr	r2, [sp, #28]
 8008d72:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008d76:	4293      	cmp	r3, r2
 8008d78:	db20      	blt.n	8008dbc <_strtod_l+0x444>
 8008d7a:	4d63      	ldr	r5, [pc, #396]	; (8008f08 <_strtod_l+0x590>)
 8008d7c:	f1c4 040f 	rsb	r4, r4, #15
 8008d80:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008d84:	4642      	mov	r2, r8
 8008d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	f7f7 fbae 	bl	80004ec <__aeabi_dmul>
 8008d90:	9b07      	ldr	r3, [sp, #28]
 8008d92:	1b1c      	subs	r4, r3, r4
 8008d94:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008d98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d9c:	e7e5      	b.n	8008d6a <_strtod_l+0x3f2>
 8008d9e:	9b07      	ldr	r3, [sp, #28]
 8008da0:	3316      	adds	r3, #22
 8008da2:	db0b      	blt.n	8008dbc <_strtod_l+0x444>
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	4a58      	ldr	r2, [pc, #352]	; (8008f08 <_strtod_l+0x590>)
 8008da8:	1b5d      	subs	r5, r3, r5
 8008daa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008dae:	4640      	mov	r0, r8
 8008db0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008db4:	4649      	mov	r1, r9
 8008db6:	f7f7 fcc3 	bl	8000740 <__aeabi_ddiv>
 8008dba:	e79d      	b.n	8008cf8 <_strtod_l+0x380>
 8008dbc:	9b07      	ldr	r3, [sp, #28]
 8008dbe:	1ba6      	subs	r6, r4, r6
 8008dc0:	441e      	add	r6, r3
 8008dc2:	2e00      	cmp	r6, #0
 8008dc4:	dd71      	ble.n	8008eaa <_strtod_l+0x532>
 8008dc6:	f016 030f 	ands.w	r3, r6, #15
 8008dca:	d00a      	beq.n	8008de2 <_strtod_l+0x46a>
 8008dcc:	494e      	ldr	r1, [pc, #312]	; (8008f08 <_strtod_l+0x590>)
 8008dce:	4642      	mov	r2, r8
 8008dd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd8:	464b      	mov	r3, r9
 8008dda:	f7f7 fb87 	bl	80004ec <__aeabi_dmul>
 8008dde:	4680      	mov	r8, r0
 8008de0:	4689      	mov	r9, r1
 8008de2:	f036 060f 	bics.w	r6, r6, #15
 8008de6:	d050      	beq.n	8008e8a <_strtod_l+0x512>
 8008de8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008dec:	dd27      	ble.n	8008e3e <_strtod_l+0x4c6>
 8008dee:	f04f 0b00 	mov.w	fp, #0
 8008df2:	f8cd b010 	str.w	fp, [sp, #16]
 8008df6:	f8cd b020 	str.w	fp, [sp, #32]
 8008dfa:	f8cd b018 	str.w	fp, [sp, #24]
 8008dfe:	2322      	movs	r3, #34	; 0x22
 8008e00:	f04f 0800 	mov.w	r8, #0
 8008e04:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008f10 <_strtod_l+0x598>
 8008e08:	f8ca 3000 	str.w	r3, [sl]
 8008e0c:	9b08      	ldr	r3, [sp, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f43f adf3 	beq.w	80089fa <_strtod_l+0x82>
 8008e14:	4650      	mov	r0, sl
 8008e16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e18:	f001 fe9c 	bl	800ab54 <_Bfree>
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	9906      	ldr	r1, [sp, #24]
 8008e20:	f001 fe98 	bl	800ab54 <_Bfree>
 8008e24:	4650      	mov	r0, sl
 8008e26:	9904      	ldr	r1, [sp, #16]
 8008e28:	f001 fe94 	bl	800ab54 <_Bfree>
 8008e2c:	4650      	mov	r0, sl
 8008e2e:	9908      	ldr	r1, [sp, #32]
 8008e30:	f001 fe90 	bl	800ab54 <_Bfree>
 8008e34:	4659      	mov	r1, fp
 8008e36:	4650      	mov	r0, sl
 8008e38:	f001 fe8c 	bl	800ab54 <_Bfree>
 8008e3c:	e5dd      	b.n	80089fa <_strtod_l+0x82>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	4640      	mov	r0, r8
 8008e42:	4649      	mov	r1, r9
 8008e44:	461f      	mov	r7, r3
 8008e46:	1136      	asrs	r6, r6, #4
 8008e48:	2e01      	cmp	r6, #1
 8008e4a:	dc21      	bgt.n	8008e90 <_strtod_l+0x518>
 8008e4c:	b10b      	cbz	r3, 8008e52 <_strtod_l+0x4da>
 8008e4e:	4680      	mov	r8, r0
 8008e50:	4689      	mov	r9, r1
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <_strtod_l+0x594>)
 8008e54:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e58:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008e5c:	4642      	mov	r2, r8
 8008e5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e62:	464b      	mov	r3, r9
 8008e64:	f7f7 fb42 	bl	80004ec <__aeabi_dmul>
 8008e68:	4b29      	ldr	r3, [pc, #164]	; (8008f10 <_strtod_l+0x598>)
 8008e6a:	460a      	mov	r2, r1
 8008e6c:	400b      	ands	r3, r1
 8008e6e:	4929      	ldr	r1, [pc, #164]	; (8008f14 <_strtod_l+0x59c>)
 8008e70:	4680      	mov	r8, r0
 8008e72:	428b      	cmp	r3, r1
 8008e74:	d8bb      	bhi.n	8008dee <_strtod_l+0x476>
 8008e76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e7a:	428b      	cmp	r3, r1
 8008e7c:	bf86      	itte	hi
 8008e7e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8008e82:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008f18 <_strtod_l+0x5a0>
 8008e86:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9305      	str	r3, [sp, #20]
 8008e8e:	e07e      	b.n	8008f8e <_strtod_l+0x616>
 8008e90:	07f2      	lsls	r2, r6, #31
 8008e92:	d507      	bpl.n	8008ea4 <_strtod_l+0x52c>
 8008e94:	4b1d      	ldr	r3, [pc, #116]	; (8008f0c <_strtod_l+0x594>)
 8008e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fb25 	bl	80004ec <__aeabi_dmul>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	3701      	adds	r7, #1
 8008ea6:	1076      	asrs	r6, r6, #1
 8008ea8:	e7ce      	b.n	8008e48 <_strtod_l+0x4d0>
 8008eaa:	d0ee      	beq.n	8008e8a <_strtod_l+0x512>
 8008eac:	4276      	negs	r6, r6
 8008eae:	f016 020f 	ands.w	r2, r6, #15
 8008eb2:	d00a      	beq.n	8008eca <_strtod_l+0x552>
 8008eb4:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <_strtod_l+0x590>)
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 fc3d 	bl	8000740 <__aeabi_ddiv>
 8008ec6:	4680      	mov	r8, r0
 8008ec8:	4689      	mov	r9, r1
 8008eca:	1136      	asrs	r6, r6, #4
 8008ecc:	d0dd      	beq.n	8008e8a <_strtod_l+0x512>
 8008ece:	2e1f      	cmp	r6, #31
 8008ed0:	dd24      	ble.n	8008f1c <_strtod_l+0x5a4>
 8008ed2:	f04f 0b00 	mov.w	fp, #0
 8008ed6:	f8cd b010 	str.w	fp, [sp, #16]
 8008eda:	f8cd b020 	str.w	fp, [sp, #32]
 8008ede:	f8cd b018 	str.w	fp, [sp, #24]
 8008ee2:	2322      	movs	r3, #34	; 0x22
 8008ee4:	f04f 0800 	mov.w	r8, #0
 8008ee8:	f04f 0900 	mov.w	r9, #0
 8008eec:	f8ca 3000 	str.w	r3, [sl]
 8008ef0:	e78c      	b.n	8008e0c <_strtod_l+0x494>
 8008ef2:	bf00      	nop
 8008ef4:	0800cc65 	.word	0x0800cc65
 8008ef8:	0800cca0 	.word	0x0800cca0
 8008efc:	0800cc5d 	.word	0x0800cc5d
 8008f00:	0800cde4 	.word	0x0800cde4
 8008f04:	0800d0a0 	.word	0x0800d0a0
 8008f08:	0800cf80 	.word	0x0800cf80
 8008f0c:	0800cf58 	.word	0x0800cf58
 8008f10:	7ff00000 	.word	0x7ff00000
 8008f14:	7ca00000 	.word	0x7ca00000
 8008f18:	7fefffff 	.word	0x7fefffff
 8008f1c:	f016 0310 	ands.w	r3, r6, #16
 8008f20:	bf18      	it	ne
 8008f22:	236a      	movne	r3, #106	; 0x6a
 8008f24:	4640      	mov	r0, r8
 8008f26:	9305      	str	r3, [sp, #20]
 8008f28:	4649      	mov	r1, r9
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4fb2      	ldr	r7, [pc, #712]	; (80091f8 <_strtod_l+0x880>)
 8008f2e:	07f2      	lsls	r2, r6, #31
 8008f30:	d504      	bpl.n	8008f3c <_strtod_l+0x5c4>
 8008f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f36:	f7f7 fad9 	bl	80004ec <__aeabi_dmul>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	1076      	asrs	r6, r6, #1
 8008f3e:	f107 0708 	add.w	r7, r7, #8
 8008f42:	d1f4      	bne.n	8008f2e <_strtod_l+0x5b6>
 8008f44:	b10b      	cbz	r3, 8008f4a <_strtod_l+0x5d2>
 8008f46:	4680      	mov	r8, r0
 8008f48:	4689      	mov	r9, r1
 8008f4a:	9b05      	ldr	r3, [sp, #20]
 8008f4c:	b1bb      	cbz	r3, 8008f7e <_strtod_l+0x606>
 8008f4e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8008f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	4649      	mov	r1, r9
 8008f5a:	dd10      	ble.n	8008f7e <_strtod_l+0x606>
 8008f5c:	2b1f      	cmp	r3, #31
 8008f5e:	f340 812b 	ble.w	80091b8 <_strtod_l+0x840>
 8008f62:	2b34      	cmp	r3, #52	; 0x34
 8008f64:	bfd8      	it	le
 8008f66:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008f6a:	f04f 0800 	mov.w	r8, #0
 8008f6e:	bfcf      	iteee	gt
 8008f70:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008f74:	3b20      	suble	r3, #32
 8008f76:	fa02 f303 	lslle.w	r3, r2, r3
 8008f7a:	ea03 0901 	andle.w	r9, r3, r1
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2300      	movs	r3, #0
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 fd19 	bl	80009bc <__aeabi_dcmpeq>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1a1      	bne.n	8008ed2 <_strtod_l+0x55a>
 8008f8e:	9b06      	ldr	r3, [sp, #24]
 8008f90:	465a      	mov	r2, fp
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	4650      	mov	r0, sl
 8008f96:	4623      	mov	r3, r4
 8008f98:	9908      	ldr	r1, [sp, #32]
 8008f9a:	f001 fe47 	bl	800ac2c <__s2b>
 8008f9e:	9008      	str	r0, [sp, #32]
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	f43f af24 	beq.w	8008dee <_strtod_l+0x476>
 8008fa6:	9b04      	ldr	r3, [sp, #16]
 8008fa8:	f04f 0b00 	mov.w	fp, #0
 8008fac:	1b5d      	subs	r5, r3, r5
 8008fae:	9b07      	ldr	r3, [sp, #28]
 8008fb0:	f8cd b010 	str.w	fp, [sp, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bfb4      	ite	lt
 8008fb8:	462b      	movlt	r3, r5
 8008fba:	2300      	movge	r3, #0
 8008fbc:	930e      	str	r3, [sp, #56]	; 0x38
 8008fbe:	9b07      	ldr	r3, [sp, #28]
 8008fc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008fc4:	9316      	str	r3, [sp, #88]	; 0x58
 8008fc6:	9b08      	ldr	r3, [sp, #32]
 8008fc8:	4650      	mov	r0, sl
 8008fca:	6859      	ldr	r1, [r3, #4]
 8008fcc:	f001 fd82 	bl	800aad4 <_Balloc>
 8008fd0:	9006      	str	r0, [sp, #24]
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	f43f af13 	beq.w	8008dfe <_strtod_l+0x486>
 8008fd8:	9b08      	ldr	r3, [sp, #32]
 8008fda:	300c      	adds	r0, #12
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	f103 010c 	add.w	r1, r3, #12
 8008fe2:	3202      	adds	r2, #2
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	f001 fd67 	bl	800aab8 <memcpy>
 8008fea:	ab1e      	add	r3, sp, #120	; 0x78
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	ab1d      	add	r3, sp, #116	; 0x74
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	4642      	mov	r2, r8
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8008ffc:	f002 f954 	bl	800b2a8 <__d2b>
 8009000:	901c      	str	r0, [sp, #112]	; 0x70
 8009002:	2800      	cmp	r0, #0
 8009004:	f43f aefb 	beq.w	8008dfe <_strtod_l+0x486>
 8009008:	2101      	movs	r1, #1
 800900a:	4650      	mov	r0, sl
 800900c:	f001 fea6 	bl	800ad5c <__i2b>
 8009010:	4603      	mov	r3, r0
 8009012:	9004      	str	r0, [sp, #16]
 8009014:	2800      	cmp	r0, #0
 8009016:	f43f aef2 	beq.w	8008dfe <_strtod_l+0x486>
 800901a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800901c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800901e:	2d00      	cmp	r5, #0
 8009020:	bfab      	itete	ge
 8009022:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009024:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009026:	18ee      	addge	r6, r5, r3
 8009028:	1b5c      	sublt	r4, r3, r5
 800902a:	9b05      	ldr	r3, [sp, #20]
 800902c:	bfa8      	it	ge
 800902e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009030:	eba5 0503 	sub.w	r5, r5, r3
 8009034:	4415      	add	r5, r2
 8009036:	4b71      	ldr	r3, [pc, #452]	; (80091fc <_strtod_l+0x884>)
 8009038:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800903c:	bfb8      	it	lt
 800903e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009040:	429d      	cmp	r5, r3
 8009042:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009046:	f280 80c9 	bge.w	80091dc <_strtod_l+0x864>
 800904a:	1b5b      	subs	r3, r3, r5
 800904c:	2b1f      	cmp	r3, #31
 800904e:	f04f 0701 	mov.w	r7, #1
 8009052:	eba2 0203 	sub.w	r2, r2, r3
 8009056:	f300 80b6 	bgt.w	80091c6 <_strtod_l+0x84e>
 800905a:	2500      	movs	r5, #0
 800905c:	fa07 f303 	lsl.w	r3, r7, r3
 8009060:	930f      	str	r3, [sp, #60]	; 0x3c
 8009062:	18b7      	adds	r7, r6, r2
 8009064:	9b05      	ldr	r3, [sp, #20]
 8009066:	42be      	cmp	r6, r7
 8009068:	4414      	add	r4, r2
 800906a:	441c      	add	r4, r3
 800906c:	4633      	mov	r3, r6
 800906e:	bfa8      	it	ge
 8009070:	463b      	movge	r3, r7
 8009072:	42a3      	cmp	r3, r4
 8009074:	bfa8      	it	ge
 8009076:	4623      	movge	r3, r4
 8009078:	2b00      	cmp	r3, #0
 800907a:	bfc2      	ittt	gt
 800907c:	1aff      	subgt	r7, r7, r3
 800907e:	1ae4      	subgt	r4, r4, r3
 8009080:	1af6      	subgt	r6, r6, r3
 8009082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009084:	2b00      	cmp	r3, #0
 8009086:	dd17      	ble.n	80090b8 <_strtod_l+0x740>
 8009088:	461a      	mov	r2, r3
 800908a:	4650      	mov	r0, sl
 800908c:	9904      	ldr	r1, [sp, #16]
 800908e:	f001 ff1f 	bl	800aed0 <__pow5mult>
 8009092:	9004      	str	r0, [sp, #16]
 8009094:	2800      	cmp	r0, #0
 8009096:	f43f aeb2 	beq.w	8008dfe <_strtod_l+0x486>
 800909a:	4601      	mov	r1, r0
 800909c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800909e:	4650      	mov	r0, sl
 80090a0:	f001 fe72 	bl	800ad88 <__multiply>
 80090a4:	9009      	str	r0, [sp, #36]	; 0x24
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f aea9 	beq.w	8008dfe <_strtod_l+0x486>
 80090ac:	4650      	mov	r0, sl
 80090ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80090b0:	f001 fd50 	bl	800ab54 <_Bfree>
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	931c      	str	r3, [sp, #112]	; 0x70
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	f300 8093 	bgt.w	80091e4 <_strtod_l+0x86c>
 80090be:	9b07      	ldr	r3, [sp, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	dd08      	ble.n	80090d6 <_strtod_l+0x75e>
 80090c4:	4650      	mov	r0, sl
 80090c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090c8:	9906      	ldr	r1, [sp, #24]
 80090ca:	f001 ff01 	bl	800aed0 <__pow5mult>
 80090ce:	9006      	str	r0, [sp, #24]
 80090d0:	2800      	cmp	r0, #0
 80090d2:	f43f ae94 	beq.w	8008dfe <_strtod_l+0x486>
 80090d6:	2c00      	cmp	r4, #0
 80090d8:	dd08      	ble.n	80090ec <_strtod_l+0x774>
 80090da:	4622      	mov	r2, r4
 80090dc:	4650      	mov	r0, sl
 80090de:	9906      	ldr	r1, [sp, #24]
 80090e0:	f001 ff50 	bl	800af84 <__lshift>
 80090e4:	9006      	str	r0, [sp, #24]
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f ae89 	beq.w	8008dfe <_strtod_l+0x486>
 80090ec:	2e00      	cmp	r6, #0
 80090ee:	dd08      	ble.n	8009102 <_strtod_l+0x78a>
 80090f0:	4632      	mov	r2, r6
 80090f2:	4650      	mov	r0, sl
 80090f4:	9904      	ldr	r1, [sp, #16]
 80090f6:	f001 ff45 	bl	800af84 <__lshift>
 80090fa:	9004      	str	r0, [sp, #16]
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f ae7e 	beq.w	8008dfe <_strtod_l+0x486>
 8009102:	4650      	mov	r0, sl
 8009104:	9a06      	ldr	r2, [sp, #24]
 8009106:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009108:	f001 ffc4 	bl	800b094 <__mdiff>
 800910c:	4683      	mov	fp, r0
 800910e:	2800      	cmp	r0, #0
 8009110:	f43f ae75 	beq.w	8008dfe <_strtod_l+0x486>
 8009114:	2400      	movs	r4, #0
 8009116:	68c3      	ldr	r3, [r0, #12]
 8009118:	9904      	ldr	r1, [sp, #16]
 800911a:	60c4      	str	r4, [r0, #12]
 800911c:	930d      	str	r3, [sp, #52]	; 0x34
 800911e:	f001 ff9d 	bl	800b05c <__mcmp>
 8009122:	42a0      	cmp	r0, r4
 8009124:	da70      	bge.n	8009208 <_strtod_l+0x890>
 8009126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009128:	ea53 0308 	orrs.w	r3, r3, r8
 800912c:	f040 8096 	bne.w	800925c <_strtod_l+0x8e4>
 8009130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009134:	2b00      	cmp	r3, #0
 8009136:	f040 8091 	bne.w	800925c <_strtod_l+0x8e4>
 800913a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800913e:	0d1b      	lsrs	r3, r3, #20
 8009140:	051b      	lsls	r3, r3, #20
 8009142:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009146:	f240 8089 	bls.w	800925c <_strtod_l+0x8e4>
 800914a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800914e:	b923      	cbnz	r3, 800915a <_strtod_l+0x7e2>
 8009150:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009154:	2b01      	cmp	r3, #1
 8009156:	f340 8081 	ble.w	800925c <_strtod_l+0x8e4>
 800915a:	4659      	mov	r1, fp
 800915c:	2201      	movs	r2, #1
 800915e:	4650      	mov	r0, sl
 8009160:	f001 ff10 	bl	800af84 <__lshift>
 8009164:	9904      	ldr	r1, [sp, #16]
 8009166:	4683      	mov	fp, r0
 8009168:	f001 ff78 	bl	800b05c <__mcmp>
 800916c:	2800      	cmp	r0, #0
 800916e:	dd75      	ble.n	800925c <_strtod_l+0x8e4>
 8009170:	9905      	ldr	r1, [sp, #20]
 8009172:	464b      	mov	r3, r9
 8009174:	4a22      	ldr	r2, [pc, #136]	; (8009200 <_strtod_l+0x888>)
 8009176:	2900      	cmp	r1, #0
 8009178:	f000 8091 	beq.w	800929e <_strtod_l+0x926>
 800917c:	ea02 0109 	and.w	r1, r2, r9
 8009180:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009184:	f300 808b 	bgt.w	800929e <_strtod_l+0x926>
 8009188:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800918c:	f77f aea9 	ble.w	8008ee2 <_strtod_l+0x56a>
 8009190:	2300      	movs	r3, #0
 8009192:	4a1c      	ldr	r2, [pc, #112]	; (8009204 <_strtod_l+0x88c>)
 8009194:	4640      	mov	r0, r8
 8009196:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800919a:	4649      	mov	r1, r9
 800919c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80091a0:	f7f7 f9a4 	bl	80004ec <__aeabi_dmul>
 80091a4:	460b      	mov	r3, r1
 80091a6:	4303      	orrs	r3, r0
 80091a8:	bf08      	it	eq
 80091aa:	2322      	moveq	r3, #34	; 0x22
 80091ac:	4680      	mov	r8, r0
 80091ae:	4689      	mov	r9, r1
 80091b0:	bf08      	it	eq
 80091b2:	f8ca 3000 	streq.w	r3, [sl]
 80091b6:	e62d      	b.n	8008e14 <_strtod_l+0x49c>
 80091b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	ea03 0808 	and.w	r8, r3, r8
 80091c4:	e6db      	b.n	8008f7e <_strtod_l+0x606>
 80091c6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80091ca:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80091ce:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80091d2:	35e2      	adds	r5, #226	; 0xe2
 80091d4:	fa07 f505 	lsl.w	r5, r7, r5
 80091d8:	970f      	str	r7, [sp, #60]	; 0x3c
 80091da:	e742      	b.n	8009062 <_strtod_l+0x6ea>
 80091dc:	2301      	movs	r3, #1
 80091de:	2500      	movs	r5, #0
 80091e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80091e2:	e73e      	b.n	8009062 <_strtod_l+0x6ea>
 80091e4:	463a      	mov	r2, r7
 80091e6:	4650      	mov	r0, sl
 80091e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091ea:	f001 fecb 	bl	800af84 <__lshift>
 80091ee:	901c      	str	r0, [sp, #112]	; 0x70
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f47f af64 	bne.w	80090be <_strtod_l+0x746>
 80091f6:	e602      	b.n	8008dfe <_strtod_l+0x486>
 80091f8:	0800ccb8 	.word	0x0800ccb8
 80091fc:	fffffc02 	.word	0xfffffc02
 8009200:	7ff00000 	.word	0x7ff00000
 8009204:	39500000 	.word	0x39500000
 8009208:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800920c:	d166      	bne.n	80092dc <_strtod_l+0x964>
 800920e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009214:	b35a      	cbz	r2, 800926e <_strtod_l+0x8f6>
 8009216:	4a9c      	ldr	r2, [pc, #624]	; (8009488 <_strtod_l+0xb10>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d12c      	bne.n	8009276 <_strtod_l+0x8fe>
 800921c:	9b05      	ldr	r3, [sp, #20]
 800921e:	4640      	mov	r0, r8
 8009220:	b303      	cbz	r3, 8009264 <_strtod_l+0x8ec>
 8009222:	464b      	mov	r3, r9
 8009224:	4a99      	ldr	r2, [pc, #612]	; (800948c <_strtod_l+0xb14>)
 8009226:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800922a:	401a      	ands	r2, r3
 800922c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009230:	d81b      	bhi.n	800926a <_strtod_l+0x8f2>
 8009232:	0d12      	lsrs	r2, r2, #20
 8009234:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009238:	fa01 f303 	lsl.w	r3, r1, r3
 800923c:	4298      	cmp	r0, r3
 800923e:	d11a      	bne.n	8009276 <_strtod_l+0x8fe>
 8009240:	4b93      	ldr	r3, [pc, #588]	; (8009490 <_strtod_l+0xb18>)
 8009242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009244:	429a      	cmp	r2, r3
 8009246:	d102      	bne.n	800924e <_strtod_l+0x8d6>
 8009248:	3001      	adds	r0, #1
 800924a:	f43f add8 	beq.w	8008dfe <_strtod_l+0x486>
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	4b8e      	ldr	r3, [pc, #568]	; (800948c <_strtod_l+0xb14>)
 8009254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009256:	401a      	ands	r2, r3
 8009258:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800925c:	9b05      	ldr	r3, [sp, #20]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d196      	bne.n	8009190 <_strtod_l+0x818>
 8009262:	e5d7      	b.n	8008e14 <_strtod_l+0x49c>
 8009264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009268:	e7e8      	b.n	800923c <_strtod_l+0x8c4>
 800926a:	460b      	mov	r3, r1
 800926c:	e7e6      	b.n	800923c <_strtod_l+0x8c4>
 800926e:	ea53 0308 	orrs.w	r3, r3, r8
 8009272:	f43f af7d 	beq.w	8009170 <_strtod_l+0x7f8>
 8009276:	b1e5      	cbz	r5, 80092b2 <_strtod_l+0x93a>
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	421d      	tst	r5, r3
 800927c:	d0ee      	beq.n	800925c <_strtod_l+0x8e4>
 800927e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	9a05      	ldr	r2, [sp, #20]
 8009286:	b1c3      	cbz	r3, 80092ba <_strtod_l+0x942>
 8009288:	f7ff fb52 	bl	8008930 <sulp>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009294:	f7f6 ff74 	bl	8000180 <__adddf3>
 8009298:	4680      	mov	r8, r0
 800929a:	4689      	mov	r9, r1
 800929c:	e7de      	b.n	800925c <_strtod_l+0x8e4>
 800929e:	4013      	ands	r3, r2
 80092a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092a4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80092a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80092ac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80092b0:	e7d4      	b.n	800925c <_strtod_l+0x8e4>
 80092b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092b4:	ea13 0f08 	tst.w	r3, r8
 80092b8:	e7e0      	b.n	800927c <_strtod_l+0x904>
 80092ba:	f7ff fb39 	bl	8008930 <sulp>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092c6:	f7f6 ff59 	bl	800017c <__aeabi_dsub>
 80092ca:	2200      	movs	r2, #0
 80092cc:	2300      	movs	r3, #0
 80092ce:	4680      	mov	r8, r0
 80092d0:	4689      	mov	r9, r1
 80092d2:	f7f7 fb73 	bl	80009bc <__aeabi_dcmpeq>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d0c0      	beq.n	800925c <_strtod_l+0x8e4>
 80092da:	e602      	b.n	8008ee2 <_strtod_l+0x56a>
 80092dc:	4658      	mov	r0, fp
 80092de:	9904      	ldr	r1, [sp, #16]
 80092e0:	f002 f83e 	bl	800b360 <__ratio>
 80092e4:	2200      	movs	r2, #0
 80092e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092ea:	4606      	mov	r6, r0
 80092ec:	460f      	mov	r7, r1
 80092ee:	f7f7 fb79 	bl	80009e4 <__aeabi_dcmple>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d075      	beq.n	80093e2 <_strtod_l+0xa6a>
 80092f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d047      	beq.n	800938c <_strtod_l+0xa14>
 80092fc:	2600      	movs	r6, #0
 80092fe:	4f65      	ldr	r7, [pc, #404]	; (8009494 <_strtod_l+0xb1c>)
 8009300:	4d64      	ldr	r5, [pc, #400]	; (8009494 <_strtod_l+0xb1c>)
 8009302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009308:	0d1b      	lsrs	r3, r3, #20
 800930a:	051b      	lsls	r3, r3, #20
 800930c:	930f      	str	r3, [sp, #60]	; 0x3c
 800930e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009310:	4b61      	ldr	r3, [pc, #388]	; (8009498 <_strtod_l+0xb20>)
 8009312:	429a      	cmp	r2, r3
 8009314:	f040 80c8 	bne.w	80094a8 <_strtod_l+0xb30>
 8009318:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800931c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009322:	4640      	mov	r0, r8
 8009324:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009328:	4649      	mov	r1, r9
 800932a:	f001 ff43 	bl	800b1b4 <__ulp>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4630      	mov	r0, r6
 8009334:	4639      	mov	r1, r7
 8009336:	f7f7 f8d9 	bl	80004ec <__aeabi_dmul>
 800933a:	4642      	mov	r2, r8
 800933c:	464b      	mov	r3, r9
 800933e:	f7f6 ff1f 	bl	8000180 <__adddf3>
 8009342:	460b      	mov	r3, r1
 8009344:	4951      	ldr	r1, [pc, #324]	; (800948c <_strtod_l+0xb14>)
 8009346:	4a55      	ldr	r2, [pc, #340]	; (800949c <_strtod_l+0xb24>)
 8009348:	4019      	ands	r1, r3
 800934a:	4291      	cmp	r1, r2
 800934c:	4680      	mov	r8, r0
 800934e:	d95e      	bls.n	800940e <_strtod_l+0xa96>
 8009350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009352:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009356:	4293      	cmp	r3, r2
 8009358:	d103      	bne.n	8009362 <_strtod_l+0x9ea>
 800935a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935c:	3301      	adds	r3, #1
 800935e:	f43f ad4e 	beq.w	8008dfe <_strtod_l+0x486>
 8009362:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009366:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009490 <_strtod_l+0xb18>
 800936a:	4650      	mov	r0, sl
 800936c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800936e:	f001 fbf1 	bl	800ab54 <_Bfree>
 8009372:	4650      	mov	r0, sl
 8009374:	9906      	ldr	r1, [sp, #24]
 8009376:	f001 fbed 	bl	800ab54 <_Bfree>
 800937a:	4650      	mov	r0, sl
 800937c:	9904      	ldr	r1, [sp, #16]
 800937e:	f001 fbe9 	bl	800ab54 <_Bfree>
 8009382:	4659      	mov	r1, fp
 8009384:	4650      	mov	r0, sl
 8009386:	f001 fbe5 	bl	800ab54 <_Bfree>
 800938a:	e61c      	b.n	8008fc6 <_strtod_l+0x64e>
 800938c:	f1b8 0f00 	cmp.w	r8, #0
 8009390:	d119      	bne.n	80093c6 <_strtod_l+0xa4e>
 8009392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009398:	b9e3      	cbnz	r3, 80093d4 <_strtod_l+0xa5c>
 800939a:	2200      	movs	r2, #0
 800939c:	4630      	mov	r0, r6
 800939e:	4639      	mov	r1, r7
 80093a0:	4b3c      	ldr	r3, [pc, #240]	; (8009494 <_strtod_l+0xb1c>)
 80093a2:	f7f7 fb15 	bl	80009d0 <__aeabi_dcmplt>
 80093a6:	b9c8      	cbnz	r0, 80093dc <_strtod_l+0xa64>
 80093a8:	2200      	movs	r2, #0
 80093aa:	4630      	mov	r0, r6
 80093ac:	4639      	mov	r1, r7
 80093ae:	4b3c      	ldr	r3, [pc, #240]	; (80094a0 <_strtod_l+0xb28>)
 80093b0:	f7f7 f89c 	bl	80004ec <__aeabi_dmul>
 80093b4:	4604      	mov	r4, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80093bc:	9418      	str	r4, [sp, #96]	; 0x60
 80093be:	9319      	str	r3, [sp, #100]	; 0x64
 80093c0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80093c4:	e79d      	b.n	8009302 <_strtod_l+0x98a>
 80093c6:	f1b8 0f01 	cmp.w	r8, #1
 80093ca:	d103      	bne.n	80093d4 <_strtod_l+0xa5c>
 80093cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f43f ad87 	beq.w	8008ee2 <_strtod_l+0x56a>
 80093d4:	2600      	movs	r6, #0
 80093d6:	2400      	movs	r4, #0
 80093d8:	4f32      	ldr	r7, [pc, #200]	; (80094a4 <_strtod_l+0xb2c>)
 80093da:	e791      	b.n	8009300 <_strtod_l+0x988>
 80093dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80093de:	4d30      	ldr	r5, [pc, #192]	; (80094a0 <_strtod_l+0xb28>)
 80093e0:	e7ea      	b.n	80093b8 <_strtod_l+0xa40>
 80093e2:	4b2f      	ldr	r3, [pc, #188]	; (80094a0 <_strtod_l+0xb28>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	4630      	mov	r0, r6
 80093e8:	4639      	mov	r1, r7
 80093ea:	f7f7 f87f 	bl	80004ec <__aeabi_dmul>
 80093ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	b933      	cbnz	r3, 8009404 <_strtod_l+0xa8c>
 80093f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093fa:	9010      	str	r0, [sp, #64]	; 0x40
 80093fc:	9311      	str	r3, [sp, #68]	; 0x44
 80093fe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009402:	e77e      	b.n	8009302 <_strtod_l+0x98a>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800940c:	e7f7      	b.n	80093fe <_strtod_l+0xa86>
 800940e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1a8      	bne.n	800936a <_strtod_l+0x9f2>
 8009418:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800941c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800941e:	0d1b      	lsrs	r3, r3, #20
 8009420:	051b      	lsls	r3, r3, #20
 8009422:	429a      	cmp	r2, r3
 8009424:	d1a1      	bne.n	800936a <_strtod_l+0x9f2>
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f7 fd71 	bl	8000f10 <__aeabi_d2lz>
 800942e:	f7f7 f82f 	bl	8000490 <__aeabi_l2d>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4620      	mov	r0, r4
 8009438:	4629      	mov	r1, r5
 800943a:	f7f6 fe9f 	bl	800017c <__aeabi_dsub>
 800943e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009444:	ea43 0308 	orr.w	r3, r3, r8
 8009448:	4313      	orrs	r3, r2
 800944a:	4604      	mov	r4, r0
 800944c:	460d      	mov	r5, r1
 800944e:	d066      	beq.n	800951e <_strtod_l+0xba6>
 8009450:	a309      	add	r3, pc, #36	; (adr r3, 8009478 <_strtod_l+0xb00>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	f7f7 fabb 	bl	80009d0 <__aeabi_dcmplt>
 800945a:	2800      	cmp	r0, #0
 800945c:	f47f acda 	bne.w	8008e14 <_strtod_l+0x49c>
 8009460:	a307      	add	r3, pc, #28	; (adr r3, 8009480 <_strtod_l+0xb08>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f7 facf 	bl	8000a0c <__aeabi_dcmpgt>
 800946e:	2800      	cmp	r0, #0
 8009470:	f43f af7b 	beq.w	800936a <_strtod_l+0x9f2>
 8009474:	e4ce      	b.n	8008e14 <_strtod_l+0x49c>
 8009476:	bf00      	nop
 8009478:	94a03595 	.word	0x94a03595
 800947c:	3fdfffff 	.word	0x3fdfffff
 8009480:	35afe535 	.word	0x35afe535
 8009484:	3fe00000 	.word	0x3fe00000
 8009488:	000fffff 	.word	0x000fffff
 800948c:	7ff00000 	.word	0x7ff00000
 8009490:	7fefffff 	.word	0x7fefffff
 8009494:	3ff00000 	.word	0x3ff00000
 8009498:	7fe00000 	.word	0x7fe00000
 800949c:	7c9fffff 	.word	0x7c9fffff
 80094a0:	3fe00000 	.word	0x3fe00000
 80094a4:	bff00000 	.word	0xbff00000
 80094a8:	9b05      	ldr	r3, [sp, #20]
 80094aa:	b313      	cbz	r3, 80094f2 <_strtod_l+0xb7a>
 80094ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094b2:	d81e      	bhi.n	80094f2 <_strtod_l+0xb7a>
 80094b4:	a326      	add	r3, pc, #152	; (adr r3, 8009550 <_strtod_l+0xbd8>)
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	4620      	mov	r0, r4
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f7 fa91 	bl	80009e4 <__aeabi_dcmple>
 80094c2:	b190      	cbz	r0, 80094ea <_strtod_l+0xb72>
 80094c4:	4629      	mov	r1, r5
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7f7 fae8 	bl	8000a9c <__aeabi_d2uiz>
 80094cc:	2801      	cmp	r0, #1
 80094ce:	bf38      	it	cc
 80094d0:	2001      	movcc	r0, #1
 80094d2:	f7f6 ff91 	bl	80003f8 <__aeabi_ui2d>
 80094d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094d8:	4604      	mov	r4, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	b9d3      	cbnz	r3, 8009514 <_strtod_l+0xb9c>
 80094de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094e2:	9012      	str	r0, [sp, #72]	; 0x48
 80094e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80094e6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80094ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094ec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80094f0:	1a9f      	subs	r7, r3, r2
 80094f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094f6:	f001 fe5d 	bl	800b1b4 <__ulp>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4630      	mov	r0, r6
 8009500:	4639      	mov	r1, r7
 8009502:	f7f6 fff3 	bl	80004ec <__aeabi_dmul>
 8009506:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800950a:	f7f6 fe39 	bl	8000180 <__adddf3>
 800950e:	4680      	mov	r8, r0
 8009510:	4689      	mov	r9, r1
 8009512:	e77e      	b.n	8009412 <_strtod_l+0xa9a>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800951c:	e7e3      	b.n	80094e6 <_strtod_l+0xb6e>
 800951e:	a30e      	add	r3, pc, #56	; (adr r3, 8009558 <_strtod_l+0xbe0>)
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f7f7 fa54 	bl	80009d0 <__aeabi_dcmplt>
 8009528:	e7a1      	b.n	800946e <_strtod_l+0xaf6>
 800952a:	2300      	movs	r3, #0
 800952c:	930c      	str	r3, [sp, #48]	; 0x30
 800952e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009530:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	f7ff ba65 	b.w	8008a02 <_strtod_l+0x8a>
 8009538:	2b65      	cmp	r3, #101	; 0x65
 800953a:	f43f ab5c 	beq.w	8008bf6 <_strtod_l+0x27e>
 800953e:	2b45      	cmp	r3, #69	; 0x45
 8009540:	f43f ab59 	beq.w	8008bf6 <_strtod_l+0x27e>
 8009544:	2201      	movs	r2, #1
 8009546:	f7ff bb8d 	b.w	8008c64 <_strtod_l+0x2ec>
 800954a:	bf00      	nop
 800954c:	f3af 8000 	nop.w
 8009550:	ffc00000 	.word	0xffc00000
 8009554:	41dfffff 	.word	0x41dfffff
 8009558:	94a03595 	.word	0x94a03595
 800955c:	3fcfffff 	.word	0x3fcfffff

08009560 <strtod>:
 8009560:	460a      	mov	r2, r1
 8009562:	4601      	mov	r1, r0
 8009564:	4802      	ldr	r0, [pc, #8]	; (8009570 <strtod+0x10>)
 8009566:	4b03      	ldr	r3, [pc, #12]	; (8009574 <strtod+0x14>)
 8009568:	6800      	ldr	r0, [r0, #0]
 800956a:	f7ff ba05 	b.w	8008978 <_strtod_l>
 800956e:	bf00      	nop
 8009570:	200001d4 	.word	0x200001d4
 8009574:	2000023c 	.word	0x2000023c

08009578 <_strtol_l.isra.0>:
 8009578:	2b01      	cmp	r3, #1
 800957a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957e:	4686      	mov	lr, r0
 8009580:	d001      	beq.n	8009586 <_strtol_l.isra.0+0xe>
 8009582:	2b24      	cmp	r3, #36	; 0x24
 8009584:	d906      	bls.n	8009594 <_strtol_l.isra.0+0x1c>
 8009586:	f7fe fd09 	bl	8007f9c <__errno>
 800958a:	2316      	movs	r3, #22
 800958c:	6003      	str	r3, [r0, #0]
 800958e:	2000      	movs	r0, #0
 8009590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009594:	468c      	mov	ip, r1
 8009596:	4e3a      	ldr	r6, [pc, #232]	; (8009680 <_strtol_l.isra.0+0x108>)
 8009598:	4660      	mov	r0, ip
 800959a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800959e:	5da5      	ldrb	r5, [r4, r6]
 80095a0:	f015 0508 	ands.w	r5, r5, #8
 80095a4:	d1f8      	bne.n	8009598 <_strtol_l.isra.0+0x20>
 80095a6:	2c2d      	cmp	r4, #45	; 0x2d
 80095a8:	d133      	bne.n	8009612 <_strtol_l.isra.0+0x9a>
 80095aa:	f04f 0801 	mov.w	r8, #1
 80095ae:	f89c 4000 	ldrb.w	r4, [ip]
 80095b2:	f100 0c02 	add.w	ip, r0, #2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d05d      	beq.n	8009676 <_strtol_l.isra.0+0xfe>
 80095ba:	2b10      	cmp	r3, #16
 80095bc:	d10c      	bne.n	80095d8 <_strtol_l.isra.0+0x60>
 80095be:	2c30      	cmp	r4, #48	; 0x30
 80095c0:	d10a      	bne.n	80095d8 <_strtol_l.isra.0+0x60>
 80095c2:	f89c 0000 	ldrb.w	r0, [ip]
 80095c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80095ca:	2858      	cmp	r0, #88	; 0x58
 80095cc:	d14e      	bne.n	800966c <_strtol_l.isra.0+0xf4>
 80095ce:	2310      	movs	r3, #16
 80095d0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80095d4:	f10c 0c02 	add.w	ip, ip, #2
 80095d8:	2500      	movs	r5, #0
 80095da:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80095de:	3f01      	subs	r7, #1
 80095e0:	fbb7 f9f3 	udiv	r9, r7, r3
 80095e4:	4628      	mov	r0, r5
 80095e6:	fb03 7a19 	mls	sl, r3, r9, r7
 80095ea:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80095ee:	2e09      	cmp	r6, #9
 80095f0:	d818      	bhi.n	8009624 <_strtol_l.isra.0+0xac>
 80095f2:	4634      	mov	r4, r6
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	dd24      	ble.n	8009642 <_strtol_l.isra.0+0xca>
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	db1f      	blt.n	800963c <_strtol_l.isra.0+0xc4>
 80095fc:	4581      	cmp	r9, r0
 80095fe:	d31d      	bcc.n	800963c <_strtol_l.isra.0+0xc4>
 8009600:	d101      	bne.n	8009606 <_strtol_l.isra.0+0x8e>
 8009602:	45a2      	cmp	sl, r4
 8009604:	db1a      	blt.n	800963c <_strtol_l.isra.0+0xc4>
 8009606:	2501      	movs	r5, #1
 8009608:	fb00 4003 	mla	r0, r0, r3, r4
 800960c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009610:	e7eb      	b.n	80095ea <_strtol_l.isra.0+0x72>
 8009612:	2c2b      	cmp	r4, #43	; 0x2b
 8009614:	bf08      	it	eq
 8009616:	f89c 4000 	ldrbeq.w	r4, [ip]
 800961a:	46a8      	mov	r8, r5
 800961c:	bf08      	it	eq
 800961e:	f100 0c02 	addeq.w	ip, r0, #2
 8009622:	e7c8      	b.n	80095b6 <_strtol_l.isra.0+0x3e>
 8009624:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009628:	2e19      	cmp	r6, #25
 800962a:	d801      	bhi.n	8009630 <_strtol_l.isra.0+0xb8>
 800962c:	3c37      	subs	r4, #55	; 0x37
 800962e:	e7e1      	b.n	80095f4 <_strtol_l.isra.0+0x7c>
 8009630:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009634:	2e19      	cmp	r6, #25
 8009636:	d804      	bhi.n	8009642 <_strtol_l.isra.0+0xca>
 8009638:	3c57      	subs	r4, #87	; 0x57
 800963a:	e7db      	b.n	80095f4 <_strtol_l.isra.0+0x7c>
 800963c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009640:	e7e4      	b.n	800960c <_strtol_l.isra.0+0x94>
 8009642:	2d00      	cmp	r5, #0
 8009644:	da08      	bge.n	8009658 <_strtol_l.isra.0+0xe0>
 8009646:	2322      	movs	r3, #34	; 0x22
 8009648:	4638      	mov	r0, r7
 800964a:	f8ce 3000 	str.w	r3, [lr]
 800964e:	2a00      	cmp	r2, #0
 8009650:	d09e      	beq.n	8009590 <_strtol_l.isra.0+0x18>
 8009652:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8009656:	e007      	b.n	8009668 <_strtol_l.isra.0+0xf0>
 8009658:	f1b8 0f00 	cmp.w	r8, #0
 800965c:	d000      	beq.n	8009660 <_strtol_l.isra.0+0xe8>
 800965e:	4240      	negs	r0, r0
 8009660:	2a00      	cmp	r2, #0
 8009662:	d095      	beq.n	8009590 <_strtol_l.isra.0+0x18>
 8009664:	2d00      	cmp	r5, #0
 8009666:	d1f4      	bne.n	8009652 <_strtol_l.isra.0+0xda>
 8009668:	6011      	str	r1, [r2, #0]
 800966a:	e791      	b.n	8009590 <_strtol_l.isra.0+0x18>
 800966c:	2430      	movs	r4, #48	; 0x30
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1b2      	bne.n	80095d8 <_strtol_l.isra.0+0x60>
 8009672:	2308      	movs	r3, #8
 8009674:	e7b0      	b.n	80095d8 <_strtol_l.isra.0+0x60>
 8009676:	2c30      	cmp	r4, #48	; 0x30
 8009678:	d0a3      	beq.n	80095c2 <_strtol_l.isra.0+0x4a>
 800967a:	230a      	movs	r3, #10
 800967c:	e7ac      	b.n	80095d8 <_strtol_l.isra.0+0x60>
 800967e:	bf00      	nop
 8009680:	0800cce1 	.word	0x0800cce1

08009684 <strtol>:
 8009684:	4613      	mov	r3, r2
 8009686:	460a      	mov	r2, r1
 8009688:	4601      	mov	r1, r0
 800968a:	4802      	ldr	r0, [pc, #8]	; (8009694 <strtol+0x10>)
 800968c:	6800      	ldr	r0, [r0, #0]
 800968e:	f7ff bf73 	b.w	8009578 <_strtol_l.isra.0>
 8009692:	bf00      	nop
 8009694:	200001d4 	.word	0x200001d4

08009698 <quorem>:
 8009698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	6903      	ldr	r3, [r0, #16]
 800969e:	690c      	ldr	r4, [r1, #16]
 80096a0:	4607      	mov	r7, r0
 80096a2:	42a3      	cmp	r3, r4
 80096a4:	f2c0 8083 	blt.w	80097ae <quorem+0x116>
 80096a8:	3c01      	subs	r4, #1
 80096aa:	f100 0514 	add.w	r5, r0, #20
 80096ae:	f101 0814 	add.w	r8, r1, #20
 80096b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c0:	3301      	adds	r3, #1
 80096c2:	429a      	cmp	r2, r3
 80096c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80096c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096d0:	d332      	bcc.n	8009738 <quorem+0xa0>
 80096d2:	f04f 0e00 	mov.w	lr, #0
 80096d6:	4640      	mov	r0, r8
 80096d8:	46ac      	mov	ip, r5
 80096da:	46f2      	mov	sl, lr
 80096dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80096e0:	b293      	uxth	r3, r2
 80096e2:	fb06 e303 	mla	r3, r6, r3, lr
 80096e6:	0c12      	lsrs	r2, r2, #16
 80096e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096ec:	fb06 e202 	mla	r2, r6, r2, lr
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	ebaa 0303 	sub.w	r3, sl, r3
 80096f6:	f8dc a000 	ldr.w	sl, [ip]
 80096fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096fe:	fa1f fa8a 	uxth.w	sl, sl
 8009702:	4453      	add	r3, sl
 8009704:	fa1f fa82 	uxth.w	sl, r2
 8009708:	f8dc 2000 	ldr.w	r2, [ip]
 800970c:	4581      	cmp	r9, r0
 800970e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009712:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009716:	b29b      	uxth	r3, r3
 8009718:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800971c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009720:	f84c 3b04 	str.w	r3, [ip], #4
 8009724:	d2da      	bcs.n	80096dc <quorem+0x44>
 8009726:	f855 300b 	ldr.w	r3, [r5, fp]
 800972a:	b92b      	cbnz	r3, 8009738 <quorem+0xa0>
 800972c:	9b01      	ldr	r3, [sp, #4]
 800972e:	3b04      	subs	r3, #4
 8009730:	429d      	cmp	r5, r3
 8009732:	461a      	mov	r2, r3
 8009734:	d32f      	bcc.n	8009796 <quorem+0xfe>
 8009736:	613c      	str	r4, [r7, #16]
 8009738:	4638      	mov	r0, r7
 800973a:	f001 fc8f 	bl	800b05c <__mcmp>
 800973e:	2800      	cmp	r0, #0
 8009740:	db25      	blt.n	800978e <quorem+0xf6>
 8009742:	4628      	mov	r0, r5
 8009744:	f04f 0c00 	mov.w	ip, #0
 8009748:	3601      	adds	r6, #1
 800974a:	f858 1b04 	ldr.w	r1, [r8], #4
 800974e:	f8d0 e000 	ldr.w	lr, [r0]
 8009752:	b28b      	uxth	r3, r1
 8009754:	ebac 0303 	sub.w	r3, ip, r3
 8009758:	fa1f f28e 	uxth.w	r2, lr
 800975c:	4413      	add	r3, r2
 800975e:	0c0a      	lsrs	r2, r1, #16
 8009760:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009768:	b29b      	uxth	r3, r3
 800976a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800976e:	45c1      	cmp	r9, r8
 8009770:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009774:	f840 3b04 	str.w	r3, [r0], #4
 8009778:	d2e7      	bcs.n	800974a <quorem+0xb2>
 800977a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800977e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009782:	b922      	cbnz	r2, 800978e <quorem+0xf6>
 8009784:	3b04      	subs	r3, #4
 8009786:	429d      	cmp	r5, r3
 8009788:	461a      	mov	r2, r3
 800978a:	d30a      	bcc.n	80097a2 <quorem+0x10a>
 800978c:	613c      	str	r4, [r7, #16]
 800978e:	4630      	mov	r0, r6
 8009790:	b003      	add	sp, #12
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	6812      	ldr	r2, [r2, #0]
 8009798:	3b04      	subs	r3, #4
 800979a:	2a00      	cmp	r2, #0
 800979c:	d1cb      	bne.n	8009736 <quorem+0x9e>
 800979e:	3c01      	subs	r4, #1
 80097a0:	e7c6      	b.n	8009730 <quorem+0x98>
 80097a2:	6812      	ldr	r2, [r2, #0]
 80097a4:	3b04      	subs	r3, #4
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	d1f0      	bne.n	800978c <quorem+0xf4>
 80097aa:	3c01      	subs	r4, #1
 80097ac:	e7eb      	b.n	8009786 <quorem+0xee>
 80097ae:	2000      	movs	r0, #0
 80097b0:	e7ee      	b.n	8009790 <quorem+0xf8>
 80097b2:	0000      	movs	r0, r0
 80097b4:	0000      	movs	r0, r0
	...

080097b8 <_dtoa_r>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4616      	mov	r6, r2
 80097be:	461f      	mov	r7, r3
 80097c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097c2:	b099      	sub	sp, #100	; 0x64
 80097c4:	4605      	mov	r5, r0
 80097c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80097ce:	b974      	cbnz	r4, 80097ee <_dtoa_r+0x36>
 80097d0:	2010      	movs	r0, #16
 80097d2:	f001 f949 	bl	800aa68 <malloc>
 80097d6:	4602      	mov	r2, r0
 80097d8:	6268      	str	r0, [r5, #36]	; 0x24
 80097da:	b920      	cbnz	r0, 80097e6 <_dtoa_r+0x2e>
 80097dc:	21ea      	movs	r1, #234	; 0xea
 80097de:	4bae      	ldr	r3, [pc, #696]	; (8009a98 <_dtoa_r+0x2e0>)
 80097e0:	48ae      	ldr	r0, [pc, #696]	; (8009a9c <_dtoa_r+0x2e4>)
 80097e2:	f002 f875 	bl	800b8d0 <__assert_func>
 80097e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097ea:	6004      	str	r4, [r0, #0]
 80097ec:	60c4      	str	r4, [r0, #12]
 80097ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097f0:	6819      	ldr	r1, [r3, #0]
 80097f2:	b151      	cbz	r1, 800980a <_dtoa_r+0x52>
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	2301      	movs	r3, #1
 80097f8:	4093      	lsls	r3, r2
 80097fa:	604a      	str	r2, [r1, #4]
 80097fc:	608b      	str	r3, [r1, #8]
 80097fe:	4628      	mov	r0, r5
 8009800:	f001 f9a8 	bl	800ab54 <_Bfree>
 8009804:	2200      	movs	r2, #0
 8009806:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	1e3b      	subs	r3, r7, #0
 800980c:	bfaf      	iteee	ge
 800980e:	2300      	movge	r3, #0
 8009810:	2201      	movlt	r2, #1
 8009812:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009816:	9305      	strlt	r3, [sp, #20]
 8009818:	bfa8      	it	ge
 800981a:	f8c8 3000 	strge.w	r3, [r8]
 800981e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009822:	4b9f      	ldr	r3, [pc, #636]	; (8009aa0 <_dtoa_r+0x2e8>)
 8009824:	bfb8      	it	lt
 8009826:	f8c8 2000 	strlt.w	r2, [r8]
 800982a:	ea33 0309 	bics.w	r3, r3, r9
 800982e:	d119      	bne.n	8009864 <_dtoa_r+0xac>
 8009830:	f242 730f 	movw	r3, #9999	; 0x270f
 8009834:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800983c:	4333      	orrs	r3, r6
 800983e:	f000 8580 	beq.w	800a342 <_dtoa_r+0xb8a>
 8009842:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009844:	b953      	cbnz	r3, 800985c <_dtoa_r+0xa4>
 8009846:	4b97      	ldr	r3, [pc, #604]	; (8009aa4 <_dtoa_r+0x2ec>)
 8009848:	e022      	b.n	8009890 <_dtoa_r+0xd8>
 800984a:	4b97      	ldr	r3, [pc, #604]	; (8009aa8 <_dtoa_r+0x2f0>)
 800984c:	9308      	str	r3, [sp, #32]
 800984e:	3308      	adds	r3, #8
 8009850:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	9808      	ldr	r0, [sp, #32]
 8009856:	b019      	add	sp, #100	; 0x64
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985c:	4b91      	ldr	r3, [pc, #580]	; (8009aa4 <_dtoa_r+0x2ec>)
 800985e:	9308      	str	r3, [sp, #32]
 8009860:	3303      	adds	r3, #3
 8009862:	e7f5      	b.n	8009850 <_dtoa_r+0x98>
 8009864:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009868:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800986c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009870:	2200      	movs	r2, #0
 8009872:	2300      	movs	r3, #0
 8009874:	f7f7 f8a2 	bl	80009bc <__aeabi_dcmpeq>
 8009878:	4680      	mov	r8, r0
 800987a:	b158      	cbz	r0, 8009894 <_dtoa_r+0xdc>
 800987c:	2301      	movs	r3, #1
 800987e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 8559 	beq.w	800a33c <_dtoa_r+0xb84>
 800988a:	4888      	ldr	r0, [pc, #544]	; (8009aac <_dtoa_r+0x2f4>)
 800988c:	6018      	str	r0, [r3, #0]
 800988e:	1e43      	subs	r3, r0, #1
 8009890:	9308      	str	r3, [sp, #32]
 8009892:	e7df      	b.n	8009854 <_dtoa_r+0x9c>
 8009894:	ab16      	add	r3, sp, #88	; 0x58
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	ab17      	add	r3, sp, #92	; 0x5c
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4628      	mov	r0, r5
 800989e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098a2:	f001 fd01 	bl	800b2a8 <__d2b>
 80098a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098aa:	4682      	mov	sl, r0
 80098ac:	2c00      	cmp	r4, #0
 80098ae:	d07e      	beq.n	80099ae <_dtoa_r+0x1f6>
 80098b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80098ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80098c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80098c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80098ca:	2200      	movs	r2, #0
 80098cc:	4b78      	ldr	r3, [pc, #480]	; (8009ab0 <_dtoa_r+0x2f8>)
 80098ce:	f7f6 fc55 	bl	800017c <__aeabi_dsub>
 80098d2:	a36b      	add	r3, pc, #428	; (adr r3, 8009a80 <_dtoa_r+0x2c8>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f7f6 fe08 	bl	80004ec <__aeabi_dmul>
 80098dc:	a36a      	add	r3, pc, #424	; (adr r3, 8009a88 <_dtoa_r+0x2d0>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fc4d 	bl	8000180 <__adddf3>
 80098e6:	4606      	mov	r6, r0
 80098e8:	4620      	mov	r0, r4
 80098ea:	460f      	mov	r7, r1
 80098ec:	f7f6 fd94 	bl	8000418 <__aeabi_i2d>
 80098f0:	a367      	add	r3, pc, #412	; (adr r3, 8009a90 <_dtoa_r+0x2d8>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 fdf9 	bl	80004ec <__aeabi_dmul>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4630      	mov	r0, r6
 8009900:	4639      	mov	r1, r7
 8009902:	f7f6 fc3d 	bl	8000180 <__adddf3>
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	f7f7 f89f 	bl	8000a4c <__aeabi_d2iz>
 800990e:	2200      	movs	r2, #0
 8009910:	4681      	mov	r9, r0
 8009912:	2300      	movs	r3, #0
 8009914:	4630      	mov	r0, r6
 8009916:	4639      	mov	r1, r7
 8009918:	f7f7 f85a 	bl	80009d0 <__aeabi_dcmplt>
 800991c:	b148      	cbz	r0, 8009932 <_dtoa_r+0x17a>
 800991e:	4648      	mov	r0, r9
 8009920:	f7f6 fd7a 	bl	8000418 <__aeabi_i2d>
 8009924:	4632      	mov	r2, r6
 8009926:	463b      	mov	r3, r7
 8009928:	f7f7 f848 	bl	80009bc <__aeabi_dcmpeq>
 800992c:	b908      	cbnz	r0, 8009932 <_dtoa_r+0x17a>
 800992e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009932:	f1b9 0f16 	cmp.w	r9, #22
 8009936:	d857      	bhi.n	80099e8 <_dtoa_r+0x230>
 8009938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800993c:	4b5d      	ldr	r3, [pc, #372]	; (8009ab4 <_dtoa_r+0x2fc>)
 800993e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f7 f843 	bl	80009d0 <__aeabi_dcmplt>
 800994a:	2800      	cmp	r0, #0
 800994c:	d04e      	beq.n	80099ec <_dtoa_r+0x234>
 800994e:	2300      	movs	r3, #0
 8009950:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009954:	930f      	str	r3, [sp, #60]	; 0x3c
 8009956:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009958:	1b1c      	subs	r4, r3, r4
 800995a:	1e63      	subs	r3, r4, #1
 800995c:	9309      	str	r3, [sp, #36]	; 0x24
 800995e:	bf49      	itett	mi
 8009960:	f1c4 0301 	rsbmi	r3, r4, #1
 8009964:	2300      	movpl	r3, #0
 8009966:	9306      	strmi	r3, [sp, #24]
 8009968:	2300      	movmi	r3, #0
 800996a:	bf54      	ite	pl
 800996c:	9306      	strpl	r3, [sp, #24]
 800996e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009970:	f1b9 0f00 	cmp.w	r9, #0
 8009974:	db3c      	blt.n	80099f0 <_dtoa_r+0x238>
 8009976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009978:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800997c:	444b      	add	r3, r9
 800997e:	9309      	str	r3, [sp, #36]	; 0x24
 8009980:	2300      	movs	r3, #0
 8009982:	930a      	str	r3, [sp, #40]	; 0x28
 8009984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009986:	2b09      	cmp	r3, #9
 8009988:	d86c      	bhi.n	8009a64 <_dtoa_r+0x2ac>
 800998a:	2b05      	cmp	r3, #5
 800998c:	bfc4      	itt	gt
 800998e:	3b04      	subgt	r3, #4
 8009990:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009992:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009994:	bfc8      	it	gt
 8009996:	2400      	movgt	r4, #0
 8009998:	f1a3 0302 	sub.w	r3, r3, #2
 800999c:	bfd8      	it	le
 800999e:	2401      	movle	r4, #1
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	f200 808b 	bhi.w	8009abc <_dtoa_r+0x304>
 80099a6:	e8df f003 	tbb	[pc, r3]
 80099aa:	4f2d      	.short	0x4f2d
 80099ac:	5b4d      	.short	0x5b4d
 80099ae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80099b2:	441c      	add	r4, r3
 80099b4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	bfc3      	ittte	gt
 80099bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099c0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80099c4:	fa09 f303 	lslgt.w	r3, r9, r3
 80099c8:	f1c3 0320 	rsble	r3, r3, #32
 80099cc:	bfc6      	itte	gt
 80099ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099d2:	4318      	orrgt	r0, r3
 80099d4:	fa06 f003 	lslle.w	r0, r6, r3
 80099d8:	f7f6 fd0e 	bl	80003f8 <__aeabi_ui2d>
 80099dc:	2301      	movs	r3, #1
 80099de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80099e2:	3c01      	subs	r4, #1
 80099e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80099e6:	e770      	b.n	80098ca <_dtoa_r+0x112>
 80099e8:	2301      	movs	r3, #1
 80099ea:	e7b3      	b.n	8009954 <_dtoa_r+0x19c>
 80099ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80099ee:	e7b2      	b.n	8009956 <_dtoa_r+0x19e>
 80099f0:	9b06      	ldr	r3, [sp, #24]
 80099f2:	eba3 0309 	sub.w	r3, r3, r9
 80099f6:	9306      	str	r3, [sp, #24]
 80099f8:	f1c9 0300 	rsb	r3, r9, #0
 80099fc:	930a      	str	r3, [sp, #40]	; 0x28
 80099fe:	2300      	movs	r3, #0
 8009a00:	930e      	str	r3, [sp, #56]	; 0x38
 8009a02:	e7bf      	b.n	8009984 <_dtoa_r+0x1cc>
 8009a04:	2300      	movs	r3, #0
 8009a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	dc59      	bgt.n	8009ac2 <_dtoa_r+0x30a>
 8009a0e:	f04f 0b01 	mov.w	fp, #1
 8009a12:	465b      	mov	r3, fp
 8009a14:	f8cd b008 	str.w	fp, [sp, #8]
 8009a18:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a20:	6042      	str	r2, [r0, #4]
 8009a22:	2204      	movs	r2, #4
 8009a24:	f102 0614 	add.w	r6, r2, #20
 8009a28:	429e      	cmp	r6, r3
 8009a2a:	6841      	ldr	r1, [r0, #4]
 8009a2c:	d94f      	bls.n	8009ace <_dtoa_r+0x316>
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f001 f850 	bl	800aad4 <_Balloc>
 8009a34:	9008      	str	r0, [sp, #32]
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d14d      	bne.n	8009ad6 <_dtoa_r+0x31e>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a40:	4b1d      	ldr	r3, [pc, #116]	; (8009ab8 <_dtoa_r+0x300>)
 8009a42:	e6cd      	b.n	80097e0 <_dtoa_r+0x28>
 8009a44:	2301      	movs	r3, #1
 8009a46:	e7de      	b.n	8009a06 <_dtoa_r+0x24e>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a4e:	eb09 0b03 	add.w	fp, r9, r3
 8009a52:	f10b 0301 	add.w	r3, fp, #1
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	9302      	str	r3, [sp, #8]
 8009a5a:	bfb8      	it	lt
 8009a5c:	2301      	movlt	r3, #1
 8009a5e:	e7dd      	b.n	8009a1c <_dtoa_r+0x264>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e7f2      	b.n	8009a4a <_dtoa_r+0x292>
 8009a64:	2401      	movs	r4, #1
 8009a66:	2300      	movs	r3, #0
 8009a68:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a6a:	9322      	str	r3, [sp, #136]	; 0x88
 8009a6c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009a70:	2200      	movs	r2, #0
 8009a72:	2312      	movs	r3, #18
 8009a74:	f8cd b008 	str.w	fp, [sp, #8]
 8009a78:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a7a:	e7cf      	b.n	8009a1c <_dtoa_r+0x264>
 8009a7c:	f3af 8000 	nop.w
 8009a80:	636f4361 	.word	0x636f4361
 8009a84:	3fd287a7 	.word	0x3fd287a7
 8009a88:	8b60c8b3 	.word	0x8b60c8b3
 8009a8c:	3fc68a28 	.word	0x3fc68a28
 8009a90:	509f79fb 	.word	0x509f79fb
 8009a94:	3fd34413 	.word	0x3fd34413
 8009a98:	0800cdee 	.word	0x0800cdee
 8009a9c:	0800ce05 	.word	0x0800ce05
 8009aa0:	7ff00000 	.word	0x7ff00000
 8009aa4:	0800cdea 	.word	0x0800cdea
 8009aa8:	0800cde1 	.word	0x0800cde1
 8009aac:	0800cc69 	.word	0x0800cc69
 8009ab0:	3ff80000 	.word	0x3ff80000
 8009ab4:	0800cf80 	.word	0x0800cf80
 8009ab8:	0800ce64 	.word	0x0800ce64
 8009abc:	2301      	movs	r3, #1
 8009abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ac0:	e7d4      	b.n	8009a6c <_dtoa_r+0x2b4>
 8009ac2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009ac6:	465b      	mov	r3, fp
 8009ac8:	f8cd b008 	str.w	fp, [sp, #8]
 8009acc:	e7a6      	b.n	8009a1c <_dtoa_r+0x264>
 8009ace:	3101      	adds	r1, #1
 8009ad0:	6041      	str	r1, [r0, #4]
 8009ad2:	0052      	lsls	r2, r2, #1
 8009ad4:	e7a6      	b.n	8009a24 <_dtoa_r+0x26c>
 8009ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ad8:	9a08      	ldr	r2, [sp, #32]
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	2b0e      	cmp	r3, #14
 8009ae0:	f200 80a8 	bhi.w	8009c34 <_dtoa_r+0x47c>
 8009ae4:	2c00      	cmp	r4, #0
 8009ae6:	f000 80a5 	beq.w	8009c34 <_dtoa_r+0x47c>
 8009aea:	f1b9 0f00 	cmp.w	r9, #0
 8009aee:	dd34      	ble.n	8009b5a <_dtoa_r+0x3a2>
 8009af0:	4a9a      	ldr	r2, [pc, #616]	; (8009d5c <_dtoa_r+0x5a4>)
 8009af2:	f009 030f 	and.w	r3, r9, #15
 8009af6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009afa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009afe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b06:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009b0a:	d016      	beq.n	8009b3a <_dtoa_r+0x382>
 8009b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b10:	4b93      	ldr	r3, [pc, #588]	; (8009d60 <_dtoa_r+0x5a8>)
 8009b12:	2703      	movs	r7, #3
 8009b14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b18:	f7f6 fe12 	bl	8000740 <__aeabi_ddiv>
 8009b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b20:	f004 040f 	and.w	r4, r4, #15
 8009b24:	4e8e      	ldr	r6, [pc, #568]	; (8009d60 <_dtoa_r+0x5a8>)
 8009b26:	b954      	cbnz	r4, 8009b3e <_dtoa_r+0x386>
 8009b28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b30:	f7f6 fe06 	bl	8000740 <__aeabi_ddiv>
 8009b34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b38:	e029      	b.n	8009b8e <_dtoa_r+0x3d6>
 8009b3a:	2702      	movs	r7, #2
 8009b3c:	e7f2      	b.n	8009b24 <_dtoa_r+0x36c>
 8009b3e:	07e1      	lsls	r1, r4, #31
 8009b40:	d508      	bpl.n	8009b54 <_dtoa_r+0x39c>
 8009b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b4a:	f7f6 fccf 	bl	80004ec <__aeabi_dmul>
 8009b4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b52:	3701      	adds	r7, #1
 8009b54:	1064      	asrs	r4, r4, #1
 8009b56:	3608      	adds	r6, #8
 8009b58:	e7e5      	b.n	8009b26 <_dtoa_r+0x36e>
 8009b5a:	f000 80a5 	beq.w	8009ca8 <_dtoa_r+0x4f0>
 8009b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b62:	f1c9 0400 	rsb	r4, r9, #0
 8009b66:	4b7d      	ldr	r3, [pc, #500]	; (8009d5c <_dtoa_r+0x5a4>)
 8009b68:	f004 020f 	and.w	r2, r4, #15
 8009b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	f7f6 fcba 	bl	80004ec <__aeabi_dmul>
 8009b78:	2702      	movs	r7, #2
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b80:	4e77      	ldr	r6, [pc, #476]	; (8009d60 <_dtoa_r+0x5a8>)
 8009b82:	1124      	asrs	r4, r4, #4
 8009b84:	2c00      	cmp	r4, #0
 8009b86:	f040 8084 	bne.w	8009c92 <_dtoa_r+0x4da>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1d2      	bne.n	8009b34 <_dtoa_r+0x37c>
 8009b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 808b 	beq.w	8009cac <_dtoa_r+0x4f4>
 8009b96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	4b6f      	ldr	r3, [pc, #444]	; (8009d64 <_dtoa_r+0x5ac>)
 8009ba6:	f7f6 ff13 	bl	80009d0 <__aeabi_dcmplt>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d07e      	beq.n	8009cac <_dtoa_r+0x4f4>
 8009bae:	9b02      	ldr	r3, [sp, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d07b      	beq.n	8009cac <_dtoa_r+0x4f4>
 8009bb4:	f1bb 0f00 	cmp.w	fp, #0
 8009bb8:	dd38      	ble.n	8009c2c <_dtoa_r+0x474>
 8009bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4b69      	ldr	r3, [pc, #420]	; (8009d68 <_dtoa_r+0x5b0>)
 8009bc2:	f7f6 fc93 	bl	80004ec <__aeabi_dmul>
 8009bc6:	465c      	mov	r4, fp
 8009bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bcc:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8009bd0:	3701      	adds	r7, #1
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	f7f6 fc20 	bl	8000418 <__aeabi_i2d>
 8009bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bdc:	f7f6 fc86 	bl	80004ec <__aeabi_dmul>
 8009be0:	2200      	movs	r2, #0
 8009be2:	4b62      	ldr	r3, [pc, #392]	; (8009d6c <_dtoa_r+0x5b4>)
 8009be4:	f7f6 facc 	bl	8000180 <__adddf3>
 8009be8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009bf0:	9611      	str	r6, [sp, #68]	; 0x44
 8009bf2:	2c00      	cmp	r4, #0
 8009bf4:	d15d      	bne.n	8009cb2 <_dtoa_r+0x4fa>
 8009bf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4b5c      	ldr	r3, [pc, #368]	; (8009d70 <_dtoa_r+0x5b8>)
 8009bfe:	f7f6 fabd 	bl	800017c <__aeabi_dsub>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c0a:	4633      	mov	r3, r6
 8009c0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c0e:	f7f6 fefd 	bl	8000a0c <__aeabi_dcmpgt>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	f040 829e 	bne.w	800a154 <_dtoa_r+0x99c>
 8009c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c22:	f7f6 fed5 	bl	80009d0 <__aeabi_dcmplt>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	f040 8292 	bne.w	800a150 <_dtoa_r+0x998>
 8009c2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f2c0 8153 	blt.w	8009ee2 <_dtoa_r+0x72a>
 8009c3c:	f1b9 0f0e 	cmp.w	r9, #14
 8009c40:	f300 814f 	bgt.w	8009ee2 <_dtoa_r+0x72a>
 8009c44:	4b45      	ldr	r3, [pc, #276]	; (8009d5c <_dtoa_r+0x5a4>)
 8009c46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009c4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f280 80db 	bge.w	8009e10 <_dtoa_r+0x658>
 8009c5a:	9b02      	ldr	r3, [sp, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f300 80d7 	bgt.w	8009e10 <_dtoa_r+0x658>
 8009c62:	f040 8274 	bne.w	800a14e <_dtoa_r+0x996>
 8009c66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4b40      	ldr	r3, [pc, #256]	; (8009d70 <_dtoa_r+0x5b8>)
 8009c6e:	f7f6 fc3d 	bl	80004ec <__aeabi_dmul>
 8009c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c76:	f7f6 febf 	bl	80009f8 <__aeabi_dcmpge>
 8009c7a:	9c02      	ldr	r4, [sp, #8]
 8009c7c:	4626      	mov	r6, r4
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f040 824a 	bne.w	800a118 <_dtoa_r+0x960>
 8009c84:	2331      	movs	r3, #49	; 0x31
 8009c86:	9f08      	ldr	r7, [sp, #32]
 8009c88:	f109 0901 	add.w	r9, r9, #1
 8009c8c:	f807 3b01 	strb.w	r3, [r7], #1
 8009c90:	e246      	b.n	800a120 <_dtoa_r+0x968>
 8009c92:	07e2      	lsls	r2, r4, #31
 8009c94:	d505      	bpl.n	8009ca2 <_dtoa_r+0x4ea>
 8009c96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c9a:	f7f6 fc27 	bl	80004ec <__aeabi_dmul>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	3701      	adds	r7, #1
 8009ca2:	1064      	asrs	r4, r4, #1
 8009ca4:	3608      	adds	r6, #8
 8009ca6:	e76d      	b.n	8009b84 <_dtoa_r+0x3cc>
 8009ca8:	2702      	movs	r7, #2
 8009caa:	e770      	b.n	8009b8e <_dtoa_r+0x3d6>
 8009cac:	46c8      	mov	r8, r9
 8009cae:	9c02      	ldr	r4, [sp, #8]
 8009cb0:	e78f      	b.n	8009bd2 <_dtoa_r+0x41a>
 8009cb2:	9908      	ldr	r1, [sp, #32]
 8009cb4:	4b29      	ldr	r3, [pc, #164]	; (8009d5c <_dtoa_r+0x5a4>)
 8009cb6:	4421      	add	r1, r4
 8009cb8:	9112      	str	r1, [sp, #72]	; 0x48
 8009cba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cc0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009cc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	d055      	beq.n	8009d78 <_dtoa_r+0x5c0>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	4929      	ldr	r1, [pc, #164]	; (8009d74 <_dtoa_r+0x5bc>)
 8009cd0:	f7f6 fd36 	bl	8000740 <__aeabi_ddiv>
 8009cd4:	463b      	mov	r3, r7
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	f7f6 fa50 	bl	800017c <__aeabi_dsub>
 8009cdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ce0:	9f08      	ldr	r7, [sp, #32]
 8009ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ce6:	f7f6 feb1 	bl	8000a4c <__aeabi_d2iz>
 8009cea:	4604      	mov	r4, r0
 8009cec:	f7f6 fb94 	bl	8000418 <__aeabi_i2d>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cf8:	f7f6 fa40 	bl	800017c <__aeabi_dsub>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	3430      	adds	r4, #48	; 0x30
 8009d02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d0a:	f807 4b01 	strb.w	r4, [r7], #1
 8009d0e:	f7f6 fe5f 	bl	80009d0 <__aeabi_dcmplt>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d174      	bne.n	8009e00 <_dtoa_r+0x648>
 8009d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	4911      	ldr	r1, [pc, #68]	; (8009d64 <_dtoa_r+0x5ac>)
 8009d1e:	f7f6 fa2d 	bl	800017c <__aeabi_dsub>
 8009d22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d26:	f7f6 fe53 	bl	80009d0 <__aeabi_dcmplt>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f040 80b6 	bne.w	8009e9c <_dtoa_r+0x6e4>
 8009d30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d32:	429f      	cmp	r7, r3
 8009d34:	f43f af7a 	beq.w	8009c2c <_dtoa_r+0x474>
 8009d38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <_dtoa_r+0x5b0>)
 8009d40:	f7f6 fbd4 	bl	80004ec <__aeabi_dmul>
 8009d44:	2200      	movs	r2, #0
 8009d46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <_dtoa_r+0x5b0>)
 8009d50:	f7f6 fbcc 	bl	80004ec <__aeabi_dmul>
 8009d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d58:	e7c3      	b.n	8009ce2 <_dtoa_r+0x52a>
 8009d5a:	bf00      	nop
 8009d5c:	0800cf80 	.word	0x0800cf80
 8009d60:	0800cf58 	.word	0x0800cf58
 8009d64:	3ff00000 	.word	0x3ff00000
 8009d68:	40240000 	.word	0x40240000
 8009d6c:	401c0000 	.word	0x401c0000
 8009d70:	40140000 	.word	0x40140000
 8009d74:	3fe00000 	.word	0x3fe00000
 8009d78:	4630      	mov	r0, r6
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	f7f6 fbb6 	bl	80004ec <__aeabi_dmul>
 8009d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d86:	9c08      	ldr	r4, [sp, #32]
 8009d88:	9314      	str	r3, [sp, #80]	; 0x50
 8009d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d8e:	f7f6 fe5d 	bl	8000a4c <__aeabi_d2iz>
 8009d92:	9015      	str	r0, [sp, #84]	; 0x54
 8009d94:	f7f6 fb40 	bl	8000418 <__aeabi_i2d>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009da0:	f7f6 f9ec 	bl	800017c <__aeabi_dsub>
 8009da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009da6:	4606      	mov	r6, r0
 8009da8:	3330      	adds	r3, #48	; 0x30
 8009daa:	f804 3b01 	strb.w	r3, [r4], #1
 8009dae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009db0:	460f      	mov	r7, r1
 8009db2:	429c      	cmp	r4, r3
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	d124      	bne.n	8009e04 <_dtoa_r+0x64c>
 8009dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dbe:	4bb3      	ldr	r3, [pc, #716]	; (800a08c <_dtoa_r+0x8d4>)
 8009dc0:	f7f6 f9de 	bl	8000180 <__adddf3>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fe1e 	bl	8000a0c <__aeabi_dcmpgt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d162      	bne.n	8009e9a <_dtoa_r+0x6e2>
 8009dd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009dd8:	2000      	movs	r0, #0
 8009dda:	49ac      	ldr	r1, [pc, #688]	; (800a08c <_dtoa_r+0x8d4>)
 8009ddc:	f7f6 f9ce 	bl	800017c <__aeabi_dsub>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4630      	mov	r0, r6
 8009de6:	4639      	mov	r1, r7
 8009de8:	f7f6 fdf2 	bl	80009d0 <__aeabi_dcmplt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f43f af1d 	beq.w	8009c2c <_dtoa_r+0x474>
 8009df2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009df4:	1e7b      	subs	r3, r7, #1
 8009df6:	9314      	str	r3, [sp, #80]	; 0x50
 8009df8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009dfc:	2b30      	cmp	r3, #48	; 0x30
 8009dfe:	d0f8      	beq.n	8009df2 <_dtoa_r+0x63a>
 8009e00:	46c1      	mov	r9, r8
 8009e02:	e03a      	b.n	8009e7a <_dtoa_r+0x6c2>
 8009e04:	4ba2      	ldr	r3, [pc, #648]	; (800a090 <_dtoa_r+0x8d8>)
 8009e06:	f7f6 fb71 	bl	80004ec <__aeabi_dmul>
 8009e0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e0e:	e7bc      	b.n	8009d8a <_dtoa_r+0x5d2>
 8009e10:	9f08      	ldr	r7, [sp, #32]
 8009e12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e1a:	f7f6 fc91 	bl	8000740 <__aeabi_ddiv>
 8009e1e:	f7f6 fe15 	bl	8000a4c <__aeabi_d2iz>
 8009e22:	4604      	mov	r4, r0
 8009e24:	f7f6 faf8 	bl	8000418 <__aeabi_i2d>
 8009e28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e2c:	f7f6 fb5e 	bl	80004ec <__aeabi_dmul>
 8009e30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e34:	460b      	mov	r3, r1
 8009e36:	4602      	mov	r2, r0
 8009e38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e3c:	f7f6 f99e 	bl	800017c <__aeabi_dsub>
 8009e40:	f807 6b01 	strb.w	r6, [r7], #1
 8009e44:	9e08      	ldr	r6, [sp, #32]
 8009e46:	9b02      	ldr	r3, [sp, #8]
 8009e48:	1bbe      	subs	r6, r7, r6
 8009e4a:	42b3      	cmp	r3, r6
 8009e4c:	d13a      	bne.n	8009ec4 <_dtoa_r+0x70c>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	f7f6 f995 	bl	8000180 <__adddf3>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e62:	f7f6 fdd3 	bl	8000a0c <__aeabi_dcmpgt>
 8009e66:	bb58      	cbnz	r0, 8009ec0 <_dtoa_r+0x708>
 8009e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e70:	f7f6 fda4 	bl	80009bc <__aeabi_dcmpeq>
 8009e74:	b108      	cbz	r0, 8009e7a <_dtoa_r+0x6c2>
 8009e76:	07e1      	lsls	r1, r4, #31
 8009e78:	d422      	bmi.n	8009ec0 <_dtoa_r+0x708>
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	4651      	mov	r1, sl
 8009e7e:	f000 fe69 	bl	800ab54 <_Bfree>
 8009e82:	2300      	movs	r3, #0
 8009e84:	703b      	strb	r3, [r7, #0]
 8009e86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e88:	f109 0001 	add.w	r0, r9, #1
 8009e8c:	6018      	str	r0, [r3, #0]
 8009e8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f43f acdf 	beq.w	8009854 <_dtoa_r+0x9c>
 8009e96:	601f      	str	r7, [r3, #0]
 8009e98:	e4dc      	b.n	8009854 <_dtoa_r+0x9c>
 8009e9a:	4627      	mov	r7, r4
 8009e9c:	463b      	mov	r3, r7
 8009e9e:	461f      	mov	r7, r3
 8009ea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ea4:	2a39      	cmp	r2, #57	; 0x39
 8009ea6:	d107      	bne.n	8009eb8 <_dtoa_r+0x700>
 8009ea8:	9a08      	ldr	r2, [sp, #32]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d1f7      	bne.n	8009e9e <_dtoa_r+0x6e6>
 8009eae:	2230      	movs	r2, #48	; 0x30
 8009eb0:	9908      	ldr	r1, [sp, #32]
 8009eb2:	f108 0801 	add.w	r8, r8, #1
 8009eb6:	700a      	strb	r2, [r1, #0]
 8009eb8:	781a      	ldrb	r2, [r3, #0]
 8009eba:	3201      	adds	r2, #1
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	e79f      	b.n	8009e00 <_dtoa_r+0x648>
 8009ec0:	46c8      	mov	r8, r9
 8009ec2:	e7eb      	b.n	8009e9c <_dtoa_r+0x6e4>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4b72      	ldr	r3, [pc, #456]	; (800a090 <_dtoa_r+0x8d8>)
 8009ec8:	f7f6 fb10 	bl	80004ec <__aeabi_dmul>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f7f6 fd70 	bl	80009bc <__aeabi_dcmpeq>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d098      	beq.n	8009e12 <_dtoa_r+0x65a>
 8009ee0:	e7cb      	b.n	8009e7a <_dtoa_r+0x6c2>
 8009ee2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	f000 80cd 	beq.w	800a084 <_dtoa_r+0x8cc>
 8009eea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009eec:	2a01      	cmp	r2, #1
 8009eee:	f300 80af 	bgt.w	800a050 <_dtoa_r+0x898>
 8009ef2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ef4:	2a00      	cmp	r2, #0
 8009ef6:	f000 80a7 	beq.w	800a048 <_dtoa_r+0x890>
 8009efa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009efe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f00:	9f06      	ldr	r7, [sp, #24]
 8009f02:	9a06      	ldr	r2, [sp, #24]
 8009f04:	2101      	movs	r1, #1
 8009f06:	441a      	add	r2, r3
 8009f08:	9206      	str	r2, [sp, #24]
 8009f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	441a      	add	r2, r3
 8009f10:	9209      	str	r2, [sp, #36]	; 0x24
 8009f12:	f000 ff23 	bl	800ad5c <__i2b>
 8009f16:	4606      	mov	r6, r0
 8009f18:	2f00      	cmp	r7, #0
 8009f1a:	dd0c      	ble.n	8009f36 <_dtoa_r+0x77e>
 8009f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	dd09      	ble.n	8009f36 <_dtoa_r+0x77e>
 8009f22:	42bb      	cmp	r3, r7
 8009f24:	bfa8      	it	ge
 8009f26:	463b      	movge	r3, r7
 8009f28:	9a06      	ldr	r2, [sp, #24]
 8009f2a:	1aff      	subs	r7, r7, r3
 8009f2c:	1ad2      	subs	r2, r2, r3
 8009f2e:	9206      	str	r2, [sp, #24]
 8009f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	9309      	str	r3, [sp, #36]	; 0x24
 8009f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f38:	b1f3      	cbz	r3, 8009f78 <_dtoa_r+0x7c0>
 8009f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 80a9 	beq.w	800a094 <_dtoa_r+0x8dc>
 8009f42:	2c00      	cmp	r4, #0
 8009f44:	dd10      	ble.n	8009f68 <_dtoa_r+0x7b0>
 8009f46:	4631      	mov	r1, r6
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 ffc0 	bl	800aed0 <__pow5mult>
 8009f50:	4652      	mov	r2, sl
 8009f52:	4601      	mov	r1, r0
 8009f54:	4606      	mov	r6, r0
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 ff16 	bl	800ad88 <__multiply>
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	4651      	mov	r1, sl
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 fdf7 	bl	800ab54 <_Bfree>
 8009f66:	46c2      	mov	sl, r8
 8009f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6a:	1b1a      	subs	r2, r3, r4
 8009f6c:	d004      	beq.n	8009f78 <_dtoa_r+0x7c0>
 8009f6e:	4651      	mov	r1, sl
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 ffad 	bl	800aed0 <__pow5mult>
 8009f76:	4682      	mov	sl, r0
 8009f78:	2101      	movs	r1, #1
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 feee 	bl	800ad5c <__i2b>
 8009f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f82:	4604      	mov	r4, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f340 8087 	ble.w	800a098 <_dtoa_r+0x8e0>
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	4601      	mov	r1, r0
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 ff9e 	bl	800aed0 <__pow5mult>
 8009f94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f96:	4604      	mov	r4, r0
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	f340 8080 	ble.w	800a09e <_dtoa_r+0x8e6>
 8009f9e:	f04f 0800 	mov.w	r8, #0
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fa8:	6918      	ldr	r0, [r3, #16]
 8009faa:	f000 fe89 	bl	800acc0 <__hi0bits>
 8009fae:	f1c0 0020 	rsb	r0, r0, #32
 8009fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb4:	4418      	add	r0, r3
 8009fb6:	f010 001f 	ands.w	r0, r0, #31
 8009fba:	f000 8092 	beq.w	800a0e2 <_dtoa_r+0x92a>
 8009fbe:	f1c0 0320 	rsb	r3, r0, #32
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	f340 808a 	ble.w	800a0dc <_dtoa_r+0x924>
 8009fc8:	f1c0 001c 	rsb	r0, r0, #28
 8009fcc:	9b06      	ldr	r3, [sp, #24]
 8009fce:	4407      	add	r7, r0
 8009fd0:	4403      	add	r3, r0
 8009fd2:	9306      	str	r3, [sp, #24]
 8009fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd6:	4403      	add	r3, r0
 8009fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dd05      	ble.n	8009fec <_dtoa_r+0x834>
 8009fe0:	4651      	mov	r1, sl
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f000 ffcd 	bl	800af84 <__lshift>
 8009fea:	4682      	mov	sl, r0
 8009fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dd05      	ble.n	8009ffe <_dtoa_r+0x846>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f000 ffc4 	bl	800af84 <__lshift>
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a000:	2b00      	cmp	r3, #0
 800a002:	d070      	beq.n	800a0e6 <_dtoa_r+0x92e>
 800a004:	4621      	mov	r1, r4
 800a006:	4650      	mov	r0, sl
 800a008:	f001 f828 	bl	800b05c <__mcmp>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	da6a      	bge.n	800a0e6 <_dtoa_r+0x92e>
 800a010:	2300      	movs	r3, #0
 800a012:	4651      	mov	r1, sl
 800a014:	220a      	movs	r2, #10
 800a016:	4628      	mov	r0, r5
 800a018:	f000 fdbe 	bl	800ab98 <__multadd>
 800a01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01e:	4682      	mov	sl, r0
 800a020:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 8193 	beq.w	800a350 <_dtoa_r+0xb98>
 800a02a:	4631      	mov	r1, r6
 800a02c:	2300      	movs	r3, #0
 800a02e:	220a      	movs	r2, #10
 800a030:	4628      	mov	r0, r5
 800a032:	f000 fdb1 	bl	800ab98 <__multadd>
 800a036:	f1bb 0f00 	cmp.w	fp, #0
 800a03a:	4606      	mov	r6, r0
 800a03c:	f300 8093 	bgt.w	800a166 <_dtoa_r+0x9ae>
 800a040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a042:	2b02      	cmp	r3, #2
 800a044:	dc57      	bgt.n	800a0f6 <_dtoa_r+0x93e>
 800a046:	e08e      	b.n	800a166 <_dtoa_r+0x9ae>
 800a048:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a04a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a04e:	e756      	b.n	8009efe <_dtoa_r+0x746>
 800a050:	9b02      	ldr	r3, [sp, #8]
 800a052:	1e5c      	subs	r4, r3, #1
 800a054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a056:	42a3      	cmp	r3, r4
 800a058:	bfb7      	itett	lt
 800a05a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a05c:	1b1c      	subge	r4, r3, r4
 800a05e:	1ae2      	sublt	r2, r4, r3
 800a060:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a062:	bfbe      	ittt	lt
 800a064:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a066:	189b      	addlt	r3, r3, r2
 800a068:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a06a:	9b02      	ldr	r3, [sp, #8]
 800a06c:	bfb8      	it	lt
 800a06e:	2400      	movlt	r4, #0
 800a070:	2b00      	cmp	r3, #0
 800a072:	bfbb      	ittet	lt
 800a074:	9b06      	ldrlt	r3, [sp, #24]
 800a076:	9a02      	ldrlt	r2, [sp, #8]
 800a078:	9f06      	ldrge	r7, [sp, #24]
 800a07a:	1a9f      	sublt	r7, r3, r2
 800a07c:	bfac      	ite	ge
 800a07e:	9b02      	ldrge	r3, [sp, #8]
 800a080:	2300      	movlt	r3, #0
 800a082:	e73e      	b.n	8009f02 <_dtoa_r+0x74a>
 800a084:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a086:	9f06      	ldr	r7, [sp, #24]
 800a088:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a08a:	e745      	b.n	8009f18 <_dtoa_r+0x760>
 800a08c:	3fe00000 	.word	0x3fe00000
 800a090:	40240000 	.word	0x40240000
 800a094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a096:	e76a      	b.n	8009f6e <_dtoa_r+0x7b6>
 800a098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	dc19      	bgt.n	800a0d2 <_dtoa_r+0x91a>
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	b9bb      	cbnz	r3, 800a0d2 <_dtoa_r+0x91a>
 800a0a2:	9b05      	ldr	r3, [sp, #20]
 800a0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0a8:	b99b      	cbnz	r3, 800a0d2 <_dtoa_r+0x91a>
 800a0aa:	9b05      	ldr	r3, [sp, #20]
 800a0ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0b0:	0d1b      	lsrs	r3, r3, #20
 800a0b2:	051b      	lsls	r3, r3, #20
 800a0b4:	b183      	cbz	r3, 800a0d8 <_dtoa_r+0x920>
 800a0b6:	f04f 0801 	mov.w	r8, #1
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	9306      	str	r3, [sp, #24]
 800a0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f47f af6a 	bne.w	8009fa2 <_dtoa_r+0x7ea>
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	e76f      	b.n	8009fb2 <_dtoa_r+0x7fa>
 800a0d2:	f04f 0800 	mov.w	r8, #0
 800a0d6:	e7f6      	b.n	800a0c6 <_dtoa_r+0x90e>
 800a0d8:	4698      	mov	r8, r3
 800a0da:	e7f4      	b.n	800a0c6 <_dtoa_r+0x90e>
 800a0dc:	f43f af7d 	beq.w	8009fda <_dtoa_r+0x822>
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	301c      	adds	r0, #28
 800a0e4:	e772      	b.n	8009fcc <_dtoa_r+0x814>
 800a0e6:	9b02      	ldr	r3, [sp, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dc36      	bgt.n	800a15a <_dtoa_r+0x9a2>
 800a0ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	dd33      	ble.n	800a15a <_dtoa_r+0x9a2>
 800a0f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a0f6:	f1bb 0f00 	cmp.w	fp, #0
 800a0fa:	d10d      	bne.n	800a118 <_dtoa_r+0x960>
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	465b      	mov	r3, fp
 800a100:	2205      	movs	r2, #5
 800a102:	4628      	mov	r0, r5
 800a104:	f000 fd48 	bl	800ab98 <__multadd>
 800a108:	4601      	mov	r1, r0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4650      	mov	r0, sl
 800a10e:	f000 ffa5 	bl	800b05c <__mcmp>
 800a112:	2800      	cmp	r0, #0
 800a114:	f73f adb6 	bgt.w	8009c84 <_dtoa_r+0x4cc>
 800a118:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a11a:	9f08      	ldr	r7, [sp, #32]
 800a11c:	ea6f 0903 	mvn.w	r9, r3
 800a120:	f04f 0800 	mov.w	r8, #0
 800a124:	4621      	mov	r1, r4
 800a126:	4628      	mov	r0, r5
 800a128:	f000 fd14 	bl	800ab54 <_Bfree>
 800a12c:	2e00      	cmp	r6, #0
 800a12e:	f43f aea4 	beq.w	8009e7a <_dtoa_r+0x6c2>
 800a132:	f1b8 0f00 	cmp.w	r8, #0
 800a136:	d005      	beq.n	800a144 <_dtoa_r+0x98c>
 800a138:	45b0      	cmp	r8, r6
 800a13a:	d003      	beq.n	800a144 <_dtoa_r+0x98c>
 800a13c:	4641      	mov	r1, r8
 800a13e:	4628      	mov	r0, r5
 800a140:	f000 fd08 	bl	800ab54 <_Bfree>
 800a144:	4631      	mov	r1, r6
 800a146:	4628      	mov	r0, r5
 800a148:	f000 fd04 	bl	800ab54 <_Bfree>
 800a14c:	e695      	b.n	8009e7a <_dtoa_r+0x6c2>
 800a14e:	2400      	movs	r4, #0
 800a150:	4626      	mov	r6, r4
 800a152:	e7e1      	b.n	800a118 <_dtoa_r+0x960>
 800a154:	46c1      	mov	r9, r8
 800a156:	4626      	mov	r6, r4
 800a158:	e594      	b.n	8009c84 <_dtoa_r+0x4cc>
 800a15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a15c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80fc 	beq.w	800a35e <_dtoa_r+0xba6>
 800a166:	2f00      	cmp	r7, #0
 800a168:	dd05      	ble.n	800a176 <_dtoa_r+0x9be>
 800a16a:	4631      	mov	r1, r6
 800a16c:	463a      	mov	r2, r7
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 ff08 	bl	800af84 <__lshift>
 800a174:	4606      	mov	r6, r0
 800a176:	f1b8 0f00 	cmp.w	r8, #0
 800a17a:	d05c      	beq.n	800a236 <_dtoa_r+0xa7e>
 800a17c:	4628      	mov	r0, r5
 800a17e:	6871      	ldr	r1, [r6, #4]
 800a180:	f000 fca8 	bl	800aad4 <_Balloc>
 800a184:	4607      	mov	r7, r0
 800a186:	b928      	cbnz	r0, 800a194 <_dtoa_r+0x9dc>
 800a188:	4602      	mov	r2, r0
 800a18a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a18e:	4b7e      	ldr	r3, [pc, #504]	; (800a388 <_dtoa_r+0xbd0>)
 800a190:	f7ff bb26 	b.w	80097e0 <_dtoa_r+0x28>
 800a194:	6932      	ldr	r2, [r6, #16]
 800a196:	f106 010c 	add.w	r1, r6, #12
 800a19a:	3202      	adds	r2, #2
 800a19c:	0092      	lsls	r2, r2, #2
 800a19e:	300c      	adds	r0, #12
 800a1a0:	f000 fc8a 	bl	800aab8 <memcpy>
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 feeb 	bl	800af84 <__lshift>
 800a1ae:	46b0      	mov	r8, r6
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	9302      	str	r3, [sp, #8]
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	445b      	add	r3, fp
 800a1bc:	930a      	str	r3, [sp, #40]	; 0x28
 800a1be:	9b04      	ldr	r3, [sp, #16]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c6:	9b02      	ldr	r3, [sp, #8]
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800a1d0:	f7ff fa62 	bl	8009698 <quorem>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	4641      	mov	r1, r8
 800a1d8:	3330      	adds	r3, #48	; 0x30
 800a1da:	9004      	str	r0, [sp, #16]
 800a1dc:	4650      	mov	r0, sl
 800a1de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1e0:	f000 ff3c 	bl	800b05c <__mcmp>
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	9006      	str	r0, [sp, #24]
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f000 ff52 	bl	800b094 <__mdiff>
 800a1f0:	68c2      	ldr	r2, [r0, #12]
 800a1f2:	4607      	mov	r7, r0
 800a1f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f6:	bb02      	cbnz	r2, 800a23a <_dtoa_r+0xa82>
 800a1f8:	4601      	mov	r1, r0
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	f000 ff2e 	bl	800b05c <__mcmp>
 800a200:	4602      	mov	r2, r0
 800a202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a204:	4639      	mov	r1, r7
 800a206:	4628      	mov	r0, r5
 800a208:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a20c:	f000 fca2 	bl	800ab54 <_Bfree>
 800a210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a214:	9f02      	ldr	r7, [sp, #8]
 800a216:	ea43 0102 	orr.w	r1, r3, r2
 800a21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a21c:	430b      	orrs	r3, r1
 800a21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a220:	d10d      	bne.n	800a23e <_dtoa_r+0xa86>
 800a222:	2b39      	cmp	r3, #57	; 0x39
 800a224:	d027      	beq.n	800a276 <_dtoa_r+0xabe>
 800a226:	9a06      	ldr	r2, [sp, #24]
 800a228:	2a00      	cmp	r2, #0
 800a22a:	dd01      	ble.n	800a230 <_dtoa_r+0xa78>
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	3331      	adds	r3, #49	; 0x31
 800a230:	f88b 3000 	strb.w	r3, [fp]
 800a234:	e776      	b.n	800a124 <_dtoa_r+0x96c>
 800a236:	4630      	mov	r0, r6
 800a238:	e7b9      	b.n	800a1ae <_dtoa_r+0x9f6>
 800a23a:	2201      	movs	r2, #1
 800a23c:	e7e2      	b.n	800a204 <_dtoa_r+0xa4c>
 800a23e:	9906      	ldr	r1, [sp, #24]
 800a240:	2900      	cmp	r1, #0
 800a242:	db04      	blt.n	800a24e <_dtoa_r+0xa96>
 800a244:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a246:	4301      	orrs	r1, r0
 800a248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a24a:	4301      	orrs	r1, r0
 800a24c:	d120      	bne.n	800a290 <_dtoa_r+0xad8>
 800a24e:	2a00      	cmp	r2, #0
 800a250:	ddee      	ble.n	800a230 <_dtoa_r+0xa78>
 800a252:	4651      	mov	r1, sl
 800a254:	2201      	movs	r2, #1
 800a256:	4628      	mov	r0, r5
 800a258:	9302      	str	r3, [sp, #8]
 800a25a:	f000 fe93 	bl	800af84 <__lshift>
 800a25e:	4621      	mov	r1, r4
 800a260:	4682      	mov	sl, r0
 800a262:	f000 fefb 	bl	800b05c <__mcmp>
 800a266:	2800      	cmp	r0, #0
 800a268:	9b02      	ldr	r3, [sp, #8]
 800a26a:	dc02      	bgt.n	800a272 <_dtoa_r+0xaba>
 800a26c:	d1e0      	bne.n	800a230 <_dtoa_r+0xa78>
 800a26e:	07da      	lsls	r2, r3, #31
 800a270:	d5de      	bpl.n	800a230 <_dtoa_r+0xa78>
 800a272:	2b39      	cmp	r3, #57	; 0x39
 800a274:	d1da      	bne.n	800a22c <_dtoa_r+0xa74>
 800a276:	2339      	movs	r3, #57	; 0x39
 800a278:	f88b 3000 	strb.w	r3, [fp]
 800a27c:	463b      	mov	r3, r7
 800a27e:	461f      	mov	r7, r3
 800a280:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a284:	3b01      	subs	r3, #1
 800a286:	2a39      	cmp	r2, #57	; 0x39
 800a288:	d050      	beq.n	800a32c <_dtoa_r+0xb74>
 800a28a:	3201      	adds	r2, #1
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	e749      	b.n	800a124 <_dtoa_r+0x96c>
 800a290:	2a00      	cmp	r2, #0
 800a292:	dd03      	ble.n	800a29c <_dtoa_r+0xae4>
 800a294:	2b39      	cmp	r3, #57	; 0x39
 800a296:	d0ee      	beq.n	800a276 <_dtoa_r+0xabe>
 800a298:	3301      	adds	r3, #1
 800a29a:	e7c9      	b.n	800a230 <_dtoa_r+0xa78>
 800a29c:	9a02      	ldr	r2, [sp, #8]
 800a29e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2a4:	428a      	cmp	r2, r1
 800a2a6:	d02a      	beq.n	800a2fe <_dtoa_r+0xb46>
 800a2a8:	4651      	mov	r1, sl
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	220a      	movs	r2, #10
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 fc72 	bl	800ab98 <__multadd>
 800a2b4:	45b0      	cmp	r8, r6
 800a2b6:	4682      	mov	sl, r0
 800a2b8:	f04f 0300 	mov.w	r3, #0
 800a2bc:	f04f 020a 	mov.w	r2, #10
 800a2c0:	4641      	mov	r1, r8
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	d107      	bne.n	800a2d6 <_dtoa_r+0xb1e>
 800a2c6:	f000 fc67 	bl	800ab98 <__multadd>
 800a2ca:	4680      	mov	r8, r0
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	9b02      	ldr	r3, [sp, #8]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	e777      	b.n	800a1c6 <_dtoa_r+0xa0e>
 800a2d6:	f000 fc5f 	bl	800ab98 <__multadd>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4680      	mov	r8, r0
 800a2de:	2300      	movs	r3, #0
 800a2e0:	220a      	movs	r2, #10
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 fc58 	bl	800ab98 <__multadd>
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	e7f0      	b.n	800a2ce <_dtoa_r+0xb16>
 800a2ec:	f1bb 0f00 	cmp.w	fp, #0
 800a2f0:	bfcc      	ite	gt
 800a2f2:	465f      	movgt	r7, fp
 800a2f4:	2701      	movle	r7, #1
 800a2f6:	f04f 0800 	mov.w	r8, #0
 800a2fa:	9a08      	ldr	r2, [sp, #32]
 800a2fc:	4417      	add	r7, r2
 800a2fe:	4651      	mov	r1, sl
 800a300:	2201      	movs	r2, #1
 800a302:	4628      	mov	r0, r5
 800a304:	9302      	str	r3, [sp, #8]
 800a306:	f000 fe3d 	bl	800af84 <__lshift>
 800a30a:	4621      	mov	r1, r4
 800a30c:	4682      	mov	sl, r0
 800a30e:	f000 fea5 	bl	800b05c <__mcmp>
 800a312:	2800      	cmp	r0, #0
 800a314:	dcb2      	bgt.n	800a27c <_dtoa_r+0xac4>
 800a316:	d102      	bne.n	800a31e <_dtoa_r+0xb66>
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	07db      	lsls	r3, r3, #31
 800a31c:	d4ae      	bmi.n	800a27c <_dtoa_r+0xac4>
 800a31e:	463b      	mov	r3, r7
 800a320:	461f      	mov	r7, r3
 800a322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a326:	2a30      	cmp	r2, #48	; 0x30
 800a328:	d0fa      	beq.n	800a320 <_dtoa_r+0xb68>
 800a32a:	e6fb      	b.n	800a124 <_dtoa_r+0x96c>
 800a32c:	9a08      	ldr	r2, [sp, #32]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d1a5      	bne.n	800a27e <_dtoa_r+0xac6>
 800a332:	2331      	movs	r3, #49	; 0x31
 800a334:	f109 0901 	add.w	r9, r9, #1
 800a338:	7013      	strb	r3, [r2, #0]
 800a33a:	e6f3      	b.n	800a124 <_dtoa_r+0x96c>
 800a33c:	4b13      	ldr	r3, [pc, #76]	; (800a38c <_dtoa_r+0xbd4>)
 800a33e:	f7ff baa7 	b.w	8009890 <_dtoa_r+0xd8>
 800a342:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a344:	2b00      	cmp	r3, #0
 800a346:	f47f aa80 	bne.w	800984a <_dtoa_r+0x92>
 800a34a:	4b11      	ldr	r3, [pc, #68]	; (800a390 <_dtoa_r+0xbd8>)
 800a34c:	f7ff baa0 	b.w	8009890 <_dtoa_r+0xd8>
 800a350:	f1bb 0f00 	cmp.w	fp, #0
 800a354:	dc03      	bgt.n	800a35e <_dtoa_r+0xba6>
 800a356:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a358:	2b02      	cmp	r3, #2
 800a35a:	f73f aecc 	bgt.w	800a0f6 <_dtoa_r+0x93e>
 800a35e:	9f08      	ldr	r7, [sp, #32]
 800a360:	4621      	mov	r1, r4
 800a362:	4650      	mov	r0, sl
 800a364:	f7ff f998 	bl	8009698 <quorem>
 800a368:	9a08      	ldr	r2, [sp, #32]
 800a36a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a36e:	f807 3b01 	strb.w	r3, [r7], #1
 800a372:	1aba      	subs	r2, r7, r2
 800a374:	4593      	cmp	fp, r2
 800a376:	ddb9      	ble.n	800a2ec <_dtoa_r+0xb34>
 800a378:	4651      	mov	r1, sl
 800a37a:	2300      	movs	r3, #0
 800a37c:	220a      	movs	r2, #10
 800a37e:	4628      	mov	r0, r5
 800a380:	f000 fc0a 	bl	800ab98 <__multadd>
 800a384:	4682      	mov	sl, r0
 800a386:	e7eb      	b.n	800a360 <_dtoa_r+0xba8>
 800a388:	0800ce64 	.word	0x0800ce64
 800a38c:	0800cc68 	.word	0x0800cc68
 800a390:	0800cde1 	.word	0x0800cde1

0800a394 <rshift>:
 800a394:	6903      	ldr	r3, [r0, #16]
 800a396:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a39a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a39e:	f100 0414 	add.w	r4, r0, #20
 800a3a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3a6:	dd46      	ble.n	800a436 <rshift+0xa2>
 800a3a8:	f011 011f 	ands.w	r1, r1, #31
 800a3ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3b4:	d10c      	bne.n	800a3d0 <rshift+0x3c>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f100 0710 	add.w	r7, r0, #16
 800a3bc:	42b1      	cmp	r1, r6
 800a3be:	d335      	bcc.n	800a42c <rshift+0x98>
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	1eea      	subs	r2, r5, #3
 800a3c6:	4296      	cmp	r6, r2
 800a3c8:	bf38      	it	cc
 800a3ca:	2300      	movcc	r3, #0
 800a3cc:	4423      	add	r3, r4
 800a3ce:	e015      	b.n	800a3fc <rshift+0x68>
 800a3d0:	46a1      	mov	r9, r4
 800a3d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3d6:	f1c1 0820 	rsb	r8, r1, #32
 800a3da:	40cf      	lsrs	r7, r1
 800a3dc:	f105 0e04 	add.w	lr, r5, #4
 800a3e0:	4576      	cmp	r6, lr
 800a3e2:	46f4      	mov	ip, lr
 800a3e4:	d816      	bhi.n	800a414 <rshift+0x80>
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	009a      	lsls	r2, r3, #2
 800a3ea:	3a04      	subs	r2, #4
 800a3ec:	3501      	adds	r5, #1
 800a3ee:	42ae      	cmp	r6, r5
 800a3f0:	bf38      	it	cc
 800a3f2:	2200      	movcc	r2, #0
 800a3f4:	18a3      	adds	r3, r4, r2
 800a3f6:	50a7      	str	r7, [r4, r2]
 800a3f8:	b107      	cbz	r7, 800a3fc <rshift+0x68>
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	eba3 0204 	sub.w	r2, r3, r4
 800a402:	bf08      	it	eq
 800a404:	2300      	moveq	r3, #0
 800a406:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a40a:	6102      	str	r2, [r0, #16]
 800a40c:	bf08      	it	eq
 800a40e:	6143      	streq	r3, [r0, #20]
 800a410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a414:	f8dc c000 	ldr.w	ip, [ip]
 800a418:	fa0c fc08 	lsl.w	ip, ip, r8
 800a41c:	ea4c 0707 	orr.w	r7, ip, r7
 800a420:	f849 7b04 	str.w	r7, [r9], #4
 800a424:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a428:	40cf      	lsrs	r7, r1
 800a42a:	e7d9      	b.n	800a3e0 <rshift+0x4c>
 800a42c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a430:	f847 cf04 	str.w	ip, [r7, #4]!
 800a434:	e7c2      	b.n	800a3bc <rshift+0x28>
 800a436:	4623      	mov	r3, r4
 800a438:	e7e0      	b.n	800a3fc <rshift+0x68>

0800a43a <__hexdig_fun>:
 800a43a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a43e:	2b09      	cmp	r3, #9
 800a440:	d802      	bhi.n	800a448 <__hexdig_fun+0xe>
 800a442:	3820      	subs	r0, #32
 800a444:	b2c0      	uxtb	r0, r0
 800a446:	4770      	bx	lr
 800a448:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d801      	bhi.n	800a454 <__hexdig_fun+0x1a>
 800a450:	3847      	subs	r0, #71	; 0x47
 800a452:	e7f7      	b.n	800a444 <__hexdig_fun+0xa>
 800a454:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a458:	2b05      	cmp	r3, #5
 800a45a:	d801      	bhi.n	800a460 <__hexdig_fun+0x26>
 800a45c:	3827      	subs	r0, #39	; 0x27
 800a45e:	e7f1      	b.n	800a444 <__hexdig_fun+0xa>
 800a460:	2000      	movs	r0, #0
 800a462:	4770      	bx	lr

0800a464 <__gethex>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	b08b      	sub	sp, #44	; 0x2c
 800a46a:	9306      	str	r3, [sp, #24]
 800a46c:	4bb9      	ldr	r3, [pc, #740]	; (800a754 <__gethex+0x2f0>)
 800a46e:	9002      	str	r0, [sp, #8]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	468b      	mov	fp, r1
 800a474:	4618      	mov	r0, r3
 800a476:	4690      	mov	r8, r2
 800a478:	9303      	str	r3, [sp, #12]
 800a47a:	f7f5 fe73 	bl	8000164 <strlen>
 800a47e:	4682      	mov	sl, r0
 800a480:	9b03      	ldr	r3, [sp, #12]
 800a482:	f8db 2000 	ldr.w	r2, [fp]
 800a486:	4403      	add	r3, r0
 800a488:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	1c93      	adds	r3, r2, #2
 800a490:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a494:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a498:	32fe      	adds	r2, #254	; 0xfe
 800a49a:	18d1      	adds	r1, r2, r3
 800a49c:	461f      	mov	r7, r3
 800a49e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4a2:	9101      	str	r1, [sp, #4]
 800a4a4:	2830      	cmp	r0, #48	; 0x30
 800a4a6:	d0f8      	beq.n	800a49a <__gethex+0x36>
 800a4a8:	f7ff ffc7 	bl	800a43a <__hexdig_fun>
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d13a      	bne.n	800a528 <__gethex+0xc4>
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	9903      	ldr	r1, [sp, #12]
 800a4b8:	f001 f9ea 	bl	800b890 <strncmp>
 800a4bc:	4605      	mov	r5, r0
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d166      	bne.n	800a590 <__gethex+0x12c>
 800a4c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a4c6:	eb07 060a 	add.w	r6, r7, sl
 800a4ca:	f7ff ffb6 	bl	800a43a <__hexdig_fun>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d060      	beq.n	800a594 <__gethex+0x130>
 800a4d2:	4633      	mov	r3, r6
 800a4d4:	7818      	ldrb	r0, [r3, #0]
 800a4d6:	461f      	mov	r7, r3
 800a4d8:	2830      	cmp	r0, #48	; 0x30
 800a4da:	f103 0301 	add.w	r3, r3, #1
 800a4de:	d0f9      	beq.n	800a4d4 <__gethex+0x70>
 800a4e0:	f7ff ffab 	bl	800a43a <__hexdig_fun>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	fab0 f480 	clz	r4, r0
 800a4ea:	4635      	mov	r5, r6
 800a4ec:	0964      	lsrs	r4, r4, #5
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	463a      	mov	r2, r7
 800a4f2:	4616      	mov	r6, r2
 800a4f4:	7830      	ldrb	r0, [r6, #0]
 800a4f6:	3201      	adds	r2, #1
 800a4f8:	f7ff ff9f 	bl	800a43a <__hexdig_fun>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d1f8      	bne.n	800a4f2 <__gethex+0x8e>
 800a500:	4652      	mov	r2, sl
 800a502:	4630      	mov	r0, r6
 800a504:	9903      	ldr	r1, [sp, #12]
 800a506:	f001 f9c3 	bl	800b890 <strncmp>
 800a50a:	b980      	cbnz	r0, 800a52e <__gethex+0xca>
 800a50c:	b94d      	cbnz	r5, 800a522 <__gethex+0xbe>
 800a50e:	eb06 050a 	add.w	r5, r6, sl
 800a512:	462a      	mov	r2, r5
 800a514:	4616      	mov	r6, r2
 800a516:	7830      	ldrb	r0, [r6, #0]
 800a518:	3201      	adds	r2, #1
 800a51a:	f7ff ff8e 	bl	800a43a <__hexdig_fun>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d1f8      	bne.n	800a514 <__gethex+0xb0>
 800a522:	1bad      	subs	r5, r5, r6
 800a524:	00ad      	lsls	r5, r5, #2
 800a526:	e004      	b.n	800a532 <__gethex+0xce>
 800a528:	2400      	movs	r4, #0
 800a52a:	4625      	mov	r5, r4
 800a52c:	e7e0      	b.n	800a4f0 <__gethex+0x8c>
 800a52e:	2d00      	cmp	r5, #0
 800a530:	d1f7      	bne.n	800a522 <__gethex+0xbe>
 800a532:	7833      	ldrb	r3, [r6, #0]
 800a534:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a538:	2b50      	cmp	r3, #80	; 0x50
 800a53a:	d139      	bne.n	800a5b0 <__gethex+0x14c>
 800a53c:	7873      	ldrb	r3, [r6, #1]
 800a53e:	2b2b      	cmp	r3, #43	; 0x2b
 800a540:	d02a      	beq.n	800a598 <__gethex+0x134>
 800a542:	2b2d      	cmp	r3, #45	; 0x2d
 800a544:	d02c      	beq.n	800a5a0 <__gethex+0x13c>
 800a546:	f04f 0900 	mov.w	r9, #0
 800a54a:	1c71      	adds	r1, r6, #1
 800a54c:	7808      	ldrb	r0, [r1, #0]
 800a54e:	f7ff ff74 	bl	800a43a <__hexdig_fun>
 800a552:	1e43      	subs	r3, r0, #1
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b18      	cmp	r3, #24
 800a558:	d82a      	bhi.n	800a5b0 <__gethex+0x14c>
 800a55a:	f1a0 0210 	sub.w	r2, r0, #16
 800a55e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a562:	f7ff ff6a 	bl	800a43a <__hexdig_fun>
 800a566:	1e43      	subs	r3, r0, #1
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b18      	cmp	r3, #24
 800a56c:	d91b      	bls.n	800a5a6 <__gethex+0x142>
 800a56e:	f1b9 0f00 	cmp.w	r9, #0
 800a572:	d000      	beq.n	800a576 <__gethex+0x112>
 800a574:	4252      	negs	r2, r2
 800a576:	4415      	add	r5, r2
 800a578:	f8cb 1000 	str.w	r1, [fp]
 800a57c:	b1d4      	cbz	r4, 800a5b4 <__gethex+0x150>
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	bf14      	ite	ne
 800a584:	2700      	movne	r7, #0
 800a586:	2706      	moveq	r7, #6
 800a588:	4638      	mov	r0, r7
 800a58a:	b00b      	add	sp, #44	; 0x2c
 800a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a590:	463e      	mov	r6, r7
 800a592:	4625      	mov	r5, r4
 800a594:	2401      	movs	r4, #1
 800a596:	e7cc      	b.n	800a532 <__gethex+0xce>
 800a598:	f04f 0900 	mov.w	r9, #0
 800a59c:	1cb1      	adds	r1, r6, #2
 800a59e:	e7d5      	b.n	800a54c <__gethex+0xe8>
 800a5a0:	f04f 0901 	mov.w	r9, #1
 800a5a4:	e7fa      	b.n	800a59c <__gethex+0x138>
 800a5a6:	230a      	movs	r3, #10
 800a5a8:	fb03 0202 	mla	r2, r3, r2, r0
 800a5ac:	3a10      	subs	r2, #16
 800a5ae:	e7d6      	b.n	800a55e <__gethex+0xfa>
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	e7e1      	b.n	800a578 <__gethex+0x114>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	1bf3      	subs	r3, r6, r7
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	2b07      	cmp	r3, #7
 800a5bc:	dc0a      	bgt.n	800a5d4 <__gethex+0x170>
 800a5be:	9802      	ldr	r0, [sp, #8]
 800a5c0:	f000 fa88 	bl	800aad4 <_Balloc>
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	b940      	cbnz	r0, 800a5da <__gethex+0x176>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	21de      	movs	r1, #222	; 0xde
 800a5cc:	4b62      	ldr	r3, [pc, #392]	; (800a758 <__gethex+0x2f4>)
 800a5ce:	4863      	ldr	r0, [pc, #396]	; (800a75c <__gethex+0x2f8>)
 800a5d0:	f001 f97e 	bl	800b8d0 <__assert_func>
 800a5d4:	3101      	adds	r1, #1
 800a5d6:	105b      	asrs	r3, r3, #1
 800a5d8:	e7ef      	b.n	800a5ba <__gethex+0x156>
 800a5da:	f04f 0b00 	mov.w	fp, #0
 800a5de:	f100 0914 	add.w	r9, r0, #20
 800a5e2:	f1ca 0301 	rsb	r3, sl, #1
 800a5e6:	f8cd 9010 	str.w	r9, [sp, #16]
 800a5ea:	f8cd b004 	str.w	fp, [sp, #4]
 800a5ee:	9308      	str	r3, [sp, #32]
 800a5f0:	42b7      	cmp	r7, r6
 800a5f2:	d33f      	bcc.n	800a674 <__gethex+0x210>
 800a5f4:	9f04      	ldr	r7, [sp, #16]
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	f847 3b04 	str.w	r3, [r7], #4
 800a5fc:	eba7 0709 	sub.w	r7, r7, r9
 800a600:	10bf      	asrs	r7, r7, #2
 800a602:	6127      	str	r7, [r4, #16]
 800a604:	4618      	mov	r0, r3
 800a606:	f000 fb5b 	bl	800acc0 <__hi0bits>
 800a60a:	017f      	lsls	r7, r7, #5
 800a60c:	f8d8 6000 	ldr.w	r6, [r8]
 800a610:	1a3f      	subs	r7, r7, r0
 800a612:	42b7      	cmp	r7, r6
 800a614:	dd62      	ble.n	800a6dc <__gethex+0x278>
 800a616:	1bbf      	subs	r7, r7, r6
 800a618:	4639      	mov	r1, r7
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fef1 	bl	800b402 <__any_on>
 800a620:	4682      	mov	sl, r0
 800a622:	b1a8      	cbz	r0, 800a650 <__gethex+0x1ec>
 800a624:	f04f 0a01 	mov.w	sl, #1
 800a628:	1e7b      	subs	r3, r7, #1
 800a62a:	1159      	asrs	r1, r3, #5
 800a62c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a630:	f003 021f 	and.w	r2, r3, #31
 800a634:	fa0a f202 	lsl.w	r2, sl, r2
 800a638:	420a      	tst	r2, r1
 800a63a:	d009      	beq.n	800a650 <__gethex+0x1ec>
 800a63c:	4553      	cmp	r3, sl
 800a63e:	dd05      	ble.n	800a64c <__gethex+0x1e8>
 800a640:	4620      	mov	r0, r4
 800a642:	1eb9      	subs	r1, r7, #2
 800a644:	f000 fedd 	bl	800b402 <__any_on>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d144      	bne.n	800a6d6 <__gethex+0x272>
 800a64c:	f04f 0a02 	mov.w	sl, #2
 800a650:	4639      	mov	r1, r7
 800a652:	4620      	mov	r0, r4
 800a654:	f7ff fe9e 	bl	800a394 <rshift>
 800a658:	443d      	add	r5, r7
 800a65a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a65e:	42ab      	cmp	r3, r5
 800a660:	da4a      	bge.n	800a6f8 <__gethex+0x294>
 800a662:	4621      	mov	r1, r4
 800a664:	9802      	ldr	r0, [sp, #8]
 800a666:	f000 fa75 	bl	800ab54 <_Bfree>
 800a66a:	2300      	movs	r3, #0
 800a66c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a66e:	27a3      	movs	r7, #163	; 0xa3
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	e789      	b.n	800a588 <__gethex+0x124>
 800a674:	1e73      	subs	r3, r6, #1
 800a676:	9a07      	ldr	r2, [sp, #28]
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a67e:	4293      	cmp	r3, r2
 800a680:	d019      	beq.n	800a6b6 <__gethex+0x252>
 800a682:	f1bb 0f20 	cmp.w	fp, #32
 800a686:	d107      	bne.n	800a698 <__gethex+0x234>
 800a688:	9b04      	ldr	r3, [sp, #16]
 800a68a:	9a01      	ldr	r2, [sp, #4]
 800a68c:	f843 2b04 	str.w	r2, [r3], #4
 800a690:	9304      	str	r3, [sp, #16]
 800a692:	2300      	movs	r3, #0
 800a694:	469b      	mov	fp, r3
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a69c:	f7ff fecd 	bl	800a43a <__hexdig_fun>
 800a6a0:	9b01      	ldr	r3, [sp, #4]
 800a6a2:	f000 000f 	and.w	r0, r0, #15
 800a6a6:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6aa:	4303      	orrs	r3, r0
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	f10b 0b04 	add.w	fp, fp, #4
 800a6b2:	9b05      	ldr	r3, [sp, #20]
 800a6b4:	e00d      	b.n	800a6d2 <__gethex+0x26e>
 800a6b6:	9b05      	ldr	r3, [sp, #20]
 800a6b8:	9a08      	ldr	r2, [sp, #32]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	42bb      	cmp	r3, r7
 800a6be:	d3e0      	bcc.n	800a682 <__gethex+0x21e>
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	9903      	ldr	r1, [sp, #12]
 800a6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c8:	f001 f8e2 	bl	800b890 <strncmp>
 800a6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d1d7      	bne.n	800a682 <__gethex+0x21e>
 800a6d2:	461e      	mov	r6, r3
 800a6d4:	e78c      	b.n	800a5f0 <__gethex+0x18c>
 800a6d6:	f04f 0a03 	mov.w	sl, #3
 800a6da:	e7b9      	b.n	800a650 <__gethex+0x1ec>
 800a6dc:	da09      	bge.n	800a6f2 <__gethex+0x28e>
 800a6de:	1bf7      	subs	r7, r6, r7
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	463a      	mov	r2, r7
 800a6e4:	9802      	ldr	r0, [sp, #8]
 800a6e6:	f000 fc4d 	bl	800af84 <__lshift>
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	1bed      	subs	r5, r5, r7
 800a6ee:	f100 0914 	add.w	r9, r0, #20
 800a6f2:	f04f 0a00 	mov.w	sl, #0
 800a6f6:	e7b0      	b.n	800a65a <__gethex+0x1f6>
 800a6f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a6fc:	42a8      	cmp	r0, r5
 800a6fe:	dd71      	ble.n	800a7e4 <__gethex+0x380>
 800a700:	1b45      	subs	r5, r0, r5
 800a702:	42ae      	cmp	r6, r5
 800a704:	dc34      	bgt.n	800a770 <__gethex+0x30c>
 800a706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d028      	beq.n	800a760 <__gethex+0x2fc>
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d02a      	beq.n	800a768 <__gethex+0x304>
 800a712:	2b01      	cmp	r3, #1
 800a714:	d115      	bne.n	800a742 <__gethex+0x2de>
 800a716:	42ae      	cmp	r6, r5
 800a718:	d113      	bne.n	800a742 <__gethex+0x2de>
 800a71a:	2e01      	cmp	r6, #1
 800a71c:	d10b      	bne.n	800a736 <__gethex+0x2d2>
 800a71e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a722:	9a06      	ldr	r2, [sp, #24]
 800a724:	2762      	movs	r7, #98	; 0x62
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	2301      	movs	r3, #1
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	f8c9 3000 	str.w	r3, [r9]
 800a730:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a732:	601c      	str	r4, [r3, #0]
 800a734:	e728      	b.n	800a588 <__gethex+0x124>
 800a736:	4620      	mov	r0, r4
 800a738:	1e71      	subs	r1, r6, #1
 800a73a:	f000 fe62 	bl	800b402 <__any_on>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d1ed      	bne.n	800a71e <__gethex+0x2ba>
 800a742:	4621      	mov	r1, r4
 800a744:	9802      	ldr	r0, [sp, #8]
 800a746:	f000 fa05 	bl	800ab54 <_Bfree>
 800a74a:	2300      	movs	r3, #0
 800a74c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a74e:	2750      	movs	r7, #80	; 0x50
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	e719      	b.n	800a588 <__gethex+0x124>
 800a754:	0800cee0 	.word	0x0800cee0
 800a758:	0800ce64 	.word	0x0800ce64
 800a75c:	0800ce75 	.word	0x0800ce75
 800a760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1ed      	bne.n	800a742 <__gethex+0x2de>
 800a766:	e7da      	b.n	800a71e <__gethex+0x2ba>
 800a768:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1d7      	bne.n	800a71e <__gethex+0x2ba>
 800a76e:	e7e8      	b.n	800a742 <__gethex+0x2de>
 800a770:	1e6f      	subs	r7, r5, #1
 800a772:	f1ba 0f00 	cmp.w	sl, #0
 800a776:	d132      	bne.n	800a7de <__gethex+0x37a>
 800a778:	b127      	cbz	r7, 800a784 <__gethex+0x320>
 800a77a:	4639      	mov	r1, r7
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 fe40 	bl	800b402 <__any_on>
 800a782:	4682      	mov	sl, r0
 800a784:	2101      	movs	r1, #1
 800a786:	117b      	asrs	r3, r7, #5
 800a788:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a78c:	f007 071f 	and.w	r7, r7, #31
 800a790:	fa01 f707 	lsl.w	r7, r1, r7
 800a794:	421f      	tst	r7, r3
 800a796:	f04f 0702 	mov.w	r7, #2
 800a79a:	4629      	mov	r1, r5
 800a79c:	4620      	mov	r0, r4
 800a79e:	bf18      	it	ne
 800a7a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7a4:	1b76      	subs	r6, r6, r5
 800a7a6:	f7ff fdf5 	bl	800a394 <rshift>
 800a7aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7ae:	f1ba 0f00 	cmp.w	sl, #0
 800a7b2:	d048      	beq.n	800a846 <__gethex+0x3e2>
 800a7b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d015      	beq.n	800a7e8 <__gethex+0x384>
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d017      	beq.n	800a7f0 <__gethex+0x38c>
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d109      	bne.n	800a7d8 <__gethex+0x374>
 800a7c4:	f01a 0f02 	tst.w	sl, #2
 800a7c8:	d006      	beq.n	800a7d8 <__gethex+0x374>
 800a7ca:	f8d9 0000 	ldr.w	r0, [r9]
 800a7ce:	ea4a 0a00 	orr.w	sl, sl, r0
 800a7d2:	f01a 0f01 	tst.w	sl, #1
 800a7d6:	d10e      	bne.n	800a7f6 <__gethex+0x392>
 800a7d8:	f047 0710 	orr.w	r7, r7, #16
 800a7dc:	e033      	b.n	800a846 <__gethex+0x3e2>
 800a7de:	f04f 0a01 	mov.w	sl, #1
 800a7e2:	e7cf      	b.n	800a784 <__gethex+0x320>
 800a7e4:	2701      	movs	r7, #1
 800a7e6:	e7e2      	b.n	800a7ae <__gethex+0x34a>
 800a7e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ea:	f1c3 0301 	rsb	r3, r3, #1
 800a7ee:	9315      	str	r3, [sp, #84]	; 0x54
 800a7f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0f0      	beq.n	800a7d8 <__gethex+0x374>
 800a7f6:	f04f 0c00 	mov.w	ip, #0
 800a7fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7fe:	f104 0314 	add.w	r3, r4, #20
 800a802:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a806:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a80a:	4618      	mov	r0, r3
 800a80c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a810:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a814:	d01c      	beq.n	800a850 <__gethex+0x3ec>
 800a816:	3201      	adds	r2, #1
 800a818:	6002      	str	r2, [r0, #0]
 800a81a:	2f02      	cmp	r7, #2
 800a81c:	f104 0314 	add.w	r3, r4, #20
 800a820:	d13d      	bne.n	800a89e <__gethex+0x43a>
 800a822:	f8d8 2000 	ldr.w	r2, [r8]
 800a826:	3a01      	subs	r2, #1
 800a828:	42b2      	cmp	r2, r6
 800a82a:	d10a      	bne.n	800a842 <__gethex+0x3de>
 800a82c:	2201      	movs	r2, #1
 800a82e:	1171      	asrs	r1, r6, #5
 800a830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a834:	f006 061f 	and.w	r6, r6, #31
 800a838:	fa02 f606 	lsl.w	r6, r2, r6
 800a83c:	421e      	tst	r6, r3
 800a83e:	bf18      	it	ne
 800a840:	4617      	movne	r7, r2
 800a842:	f047 0720 	orr.w	r7, r7, #32
 800a846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a848:	601c      	str	r4, [r3, #0]
 800a84a:	9b06      	ldr	r3, [sp, #24]
 800a84c:	601d      	str	r5, [r3, #0]
 800a84e:	e69b      	b.n	800a588 <__gethex+0x124>
 800a850:	4299      	cmp	r1, r3
 800a852:	f843 cc04 	str.w	ip, [r3, #-4]
 800a856:	d8d8      	bhi.n	800a80a <__gethex+0x3a6>
 800a858:	68a3      	ldr	r3, [r4, #8]
 800a85a:	459b      	cmp	fp, r3
 800a85c:	db17      	blt.n	800a88e <__gethex+0x42a>
 800a85e:	6861      	ldr	r1, [r4, #4]
 800a860:	9802      	ldr	r0, [sp, #8]
 800a862:	3101      	adds	r1, #1
 800a864:	f000 f936 	bl	800aad4 <_Balloc>
 800a868:	4681      	mov	r9, r0
 800a86a:	b918      	cbnz	r0, 800a874 <__gethex+0x410>
 800a86c:	4602      	mov	r2, r0
 800a86e:	2184      	movs	r1, #132	; 0x84
 800a870:	4b19      	ldr	r3, [pc, #100]	; (800a8d8 <__gethex+0x474>)
 800a872:	e6ac      	b.n	800a5ce <__gethex+0x16a>
 800a874:	6922      	ldr	r2, [r4, #16]
 800a876:	f104 010c 	add.w	r1, r4, #12
 800a87a:	3202      	adds	r2, #2
 800a87c:	0092      	lsls	r2, r2, #2
 800a87e:	300c      	adds	r0, #12
 800a880:	f000 f91a 	bl	800aab8 <memcpy>
 800a884:	4621      	mov	r1, r4
 800a886:	9802      	ldr	r0, [sp, #8]
 800a888:	f000 f964 	bl	800ab54 <_Bfree>
 800a88c:	464c      	mov	r4, r9
 800a88e:	6923      	ldr	r3, [r4, #16]
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	6122      	str	r2, [r4, #16]
 800a894:	2201      	movs	r2, #1
 800a896:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a89a:	615a      	str	r2, [r3, #20]
 800a89c:	e7bd      	b.n	800a81a <__gethex+0x3b6>
 800a89e:	6922      	ldr	r2, [r4, #16]
 800a8a0:	455a      	cmp	r2, fp
 800a8a2:	dd0b      	ble.n	800a8bc <__gethex+0x458>
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff fd74 	bl	800a394 <rshift>
 800a8ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	42ab      	cmp	r3, r5
 800a8b4:	f6ff aed5 	blt.w	800a662 <__gethex+0x1fe>
 800a8b8:	2701      	movs	r7, #1
 800a8ba:	e7c2      	b.n	800a842 <__gethex+0x3de>
 800a8bc:	f016 061f 	ands.w	r6, r6, #31
 800a8c0:	d0fa      	beq.n	800a8b8 <__gethex+0x454>
 800a8c2:	449a      	add	sl, r3
 800a8c4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a8c8:	f000 f9fa 	bl	800acc0 <__hi0bits>
 800a8cc:	f1c6 0620 	rsb	r6, r6, #32
 800a8d0:	42b0      	cmp	r0, r6
 800a8d2:	dbe7      	blt.n	800a8a4 <__gethex+0x440>
 800a8d4:	e7f0      	b.n	800a8b8 <__gethex+0x454>
 800a8d6:	bf00      	nop
 800a8d8:	0800ce64 	.word	0x0800ce64

0800a8dc <L_shift>:
 800a8dc:	f1c2 0208 	rsb	r2, r2, #8
 800a8e0:	0092      	lsls	r2, r2, #2
 800a8e2:	b570      	push	{r4, r5, r6, lr}
 800a8e4:	f1c2 0620 	rsb	r6, r2, #32
 800a8e8:	6843      	ldr	r3, [r0, #4]
 800a8ea:	6804      	ldr	r4, [r0, #0]
 800a8ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a8f0:	432c      	orrs	r4, r5
 800a8f2:	40d3      	lsrs	r3, r2
 800a8f4:	6004      	str	r4, [r0, #0]
 800a8f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8fa:	4288      	cmp	r0, r1
 800a8fc:	d3f4      	bcc.n	800a8e8 <L_shift+0xc>
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}

0800a900 <__match>:
 800a900:	b530      	push	{r4, r5, lr}
 800a902:	6803      	ldr	r3, [r0, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a90a:	b914      	cbnz	r4, 800a912 <__match+0x12>
 800a90c:	6003      	str	r3, [r0, #0]
 800a90e:	2001      	movs	r0, #1
 800a910:	bd30      	pop	{r4, r5, pc}
 800a912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a916:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a91a:	2d19      	cmp	r5, #25
 800a91c:	bf98      	it	ls
 800a91e:	3220      	addls	r2, #32
 800a920:	42a2      	cmp	r2, r4
 800a922:	d0f0      	beq.n	800a906 <__match+0x6>
 800a924:	2000      	movs	r0, #0
 800a926:	e7f3      	b.n	800a910 <__match+0x10>

0800a928 <__hexnan>:
 800a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	2500      	movs	r5, #0
 800a92e:	680b      	ldr	r3, [r1, #0]
 800a930:	4682      	mov	sl, r0
 800a932:	115e      	asrs	r6, r3, #5
 800a934:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a938:	f013 031f 	ands.w	r3, r3, #31
 800a93c:	bf18      	it	ne
 800a93e:	3604      	addne	r6, #4
 800a940:	1f37      	subs	r7, r6, #4
 800a942:	4690      	mov	r8, r2
 800a944:	46b9      	mov	r9, r7
 800a946:	463c      	mov	r4, r7
 800a948:	46ab      	mov	fp, r5
 800a94a:	b087      	sub	sp, #28
 800a94c:	6801      	ldr	r1, [r0, #0]
 800a94e:	9301      	str	r3, [sp, #4]
 800a950:	f846 5c04 	str.w	r5, [r6, #-4]
 800a954:	9502      	str	r5, [sp, #8]
 800a956:	784a      	ldrb	r2, [r1, #1]
 800a958:	1c4b      	adds	r3, r1, #1
 800a95a:	9303      	str	r3, [sp, #12]
 800a95c:	b342      	cbz	r2, 800a9b0 <__hexnan+0x88>
 800a95e:	4610      	mov	r0, r2
 800a960:	9105      	str	r1, [sp, #20]
 800a962:	9204      	str	r2, [sp, #16]
 800a964:	f7ff fd69 	bl	800a43a <__hexdig_fun>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d14f      	bne.n	800aa0c <__hexnan+0xe4>
 800a96c:	9a04      	ldr	r2, [sp, #16]
 800a96e:	9905      	ldr	r1, [sp, #20]
 800a970:	2a20      	cmp	r2, #32
 800a972:	d818      	bhi.n	800a9a6 <__hexnan+0x7e>
 800a974:	9b02      	ldr	r3, [sp, #8]
 800a976:	459b      	cmp	fp, r3
 800a978:	dd13      	ble.n	800a9a2 <__hexnan+0x7a>
 800a97a:	454c      	cmp	r4, r9
 800a97c:	d206      	bcs.n	800a98c <__hexnan+0x64>
 800a97e:	2d07      	cmp	r5, #7
 800a980:	dc04      	bgt.n	800a98c <__hexnan+0x64>
 800a982:	462a      	mov	r2, r5
 800a984:	4649      	mov	r1, r9
 800a986:	4620      	mov	r0, r4
 800a988:	f7ff ffa8 	bl	800a8dc <L_shift>
 800a98c:	4544      	cmp	r4, r8
 800a98e:	d950      	bls.n	800aa32 <__hexnan+0x10a>
 800a990:	2300      	movs	r3, #0
 800a992:	f1a4 0904 	sub.w	r9, r4, #4
 800a996:	f844 3c04 	str.w	r3, [r4, #-4]
 800a99a:	461d      	mov	r5, r3
 800a99c:	464c      	mov	r4, r9
 800a99e:	f8cd b008 	str.w	fp, [sp, #8]
 800a9a2:	9903      	ldr	r1, [sp, #12]
 800a9a4:	e7d7      	b.n	800a956 <__hexnan+0x2e>
 800a9a6:	2a29      	cmp	r2, #41	; 0x29
 800a9a8:	d156      	bne.n	800aa58 <__hexnan+0x130>
 800a9aa:	3102      	adds	r1, #2
 800a9ac:	f8ca 1000 	str.w	r1, [sl]
 800a9b0:	f1bb 0f00 	cmp.w	fp, #0
 800a9b4:	d050      	beq.n	800aa58 <__hexnan+0x130>
 800a9b6:	454c      	cmp	r4, r9
 800a9b8:	d206      	bcs.n	800a9c8 <__hexnan+0xa0>
 800a9ba:	2d07      	cmp	r5, #7
 800a9bc:	dc04      	bgt.n	800a9c8 <__hexnan+0xa0>
 800a9be:	462a      	mov	r2, r5
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f7ff ff8a 	bl	800a8dc <L_shift>
 800a9c8:	4544      	cmp	r4, r8
 800a9ca:	d934      	bls.n	800aa36 <__hexnan+0x10e>
 800a9cc:	4623      	mov	r3, r4
 800a9ce:	f1a8 0204 	sub.w	r2, r8, #4
 800a9d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9d6:	429f      	cmp	r7, r3
 800a9d8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9dc:	d2f9      	bcs.n	800a9d2 <__hexnan+0xaa>
 800a9de:	1b3b      	subs	r3, r7, r4
 800a9e0:	f023 0303 	bic.w	r3, r3, #3
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	3401      	adds	r4, #1
 800a9e8:	3e03      	subs	r6, #3
 800a9ea:	42b4      	cmp	r4, r6
 800a9ec:	bf88      	it	hi
 800a9ee:	2304      	movhi	r3, #4
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4443      	add	r3, r8
 800a9f4:	f843 2b04 	str.w	r2, [r3], #4
 800a9f8:	429f      	cmp	r7, r3
 800a9fa:	d2fb      	bcs.n	800a9f4 <__hexnan+0xcc>
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	b91b      	cbnz	r3, 800aa08 <__hexnan+0xe0>
 800aa00:	4547      	cmp	r7, r8
 800aa02:	d127      	bne.n	800aa54 <__hexnan+0x12c>
 800aa04:	2301      	movs	r3, #1
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	2005      	movs	r0, #5
 800aa0a:	e026      	b.n	800aa5a <__hexnan+0x132>
 800aa0c:	3501      	adds	r5, #1
 800aa0e:	2d08      	cmp	r5, #8
 800aa10:	f10b 0b01 	add.w	fp, fp, #1
 800aa14:	dd06      	ble.n	800aa24 <__hexnan+0xfc>
 800aa16:	4544      	cmp	r4, r8
 800aa18:	d9c3      	bls.n	800a9a2 <__hexnan+0x7a>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	2501      	movs	r5, #1
 800aa1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa22:	3c04      	subs	r4, #4
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	f000 000f 	and.w	r0, r0, #15
 800aa2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa2e:	6022      	str	r2, [r4, #0]
 800aa30:	e7b7      	b.n	800a9a2 <__hexnan+0x7a>
 800aa32:	2508      	movs	r5, #8
 800aa34:	e7b5      	b.n	800a9a2 <__hexnan+0x7a>
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0df      	beq.n	800a9fc <__hexnan+0xd4>
 800aa3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa40:	f1c3 0320 	rsb	r3, r3, #32
 800aa44:	fa22 f303 	lsr.w	r3, r2, r3
 800aa48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa4c:	401a      	ands	r2, r3
 800aa4e:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa52:	e7d3      	b.n	800a9fc <__hexnan+0xd4>
 800aa54:	3f04      	subs	r7, #4
 800aa56:	e7d1      	b.n	800a9fc <__hexnan+0xd4>
 800aa58:	2004      	movs	r0, #4
 800aa5a:	b007      	add	sp, #28
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa60 <_localeconv_r>:
 800aa60:	4800      	ldr	r0, [pc, #0]	; (800aa64 <_localeconv_r+0x4>)
 800aa62:	4770      	bx	lr
 800aa64:	2000032c 	.word	0x2000032c

0800aa68 <malloc>:
 800aa68:	4b02      	ldr	r3, [pc, #8]	; (800aa74 <malloc+0xc>)
 800aa6a:	4601      	mov	r1, r0
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	f000 bd43 	b.w	800b4f8 <_malloc_r>
 800aa72:	bf00      	nop
 800aa74:	200001d4 	.word	0x200001d4

0800aa78 <__ascii_mbtowc>:
 800aa78:	b082      	sub	sp, #8
 800aa7a:	b901      	cbnz	r1, 800aa7e <__ascii_mbtowc+0x6>
 800aa7c:	a901      	add	r1, sp, #4
 800aa7e:	b142      	cbz	r2, 800aa92 <__ascii_mbtowc+0x1a>
 800aa80:	b14b      	cbz	r3, 800aa96 <__ascii_mbtowc+0x1e>
 800aa82:	7813      	ldrb	r3, [r2, #0]
 800aa84:	600b      	str	r3, [r1, #0]
 800aa86:	7812      	ldrb	r2, [r2, #0]
 800aa88:	1e10      	subs	r0, r2, #0
 800aa8a:	bf18      	it	ne
 800aa8c:	2001      	movne	r0, #1
 800aa8e:	b002      	add	sp, #8
 800aa90:	4770      	bx	lr
 800aa92:	4610      	mov	r0, r2
 800aa94:	e7fb      	b.n	800aa8e <__ascii_mbtowc+0x16>
 800aa96:	f06f 0001 	mvn.w	r0, #1
 800aa9a:	e7f8      	b.n	800aa8e <__ascii_mbtowc+0x16>

0800aa9c <memchr>:
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	b510      	push	{r4, lr}
 800aaa0:	b2c9      	uxtb	r1, r1
 800aaa2:	4402      	add	r2, r0
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	d101      	bne.n	800aaae <memchr+0x12>
 800aaaa:	2000      	movs	r0, #0
 800aaac:	e003      	b.n	800aab6 <memchr+0x1a>
 800aaae:	7804      	ldrb	r4, [r0, #0]
 800aab0:	3301      	adds	r3, #1
 800aab2:	428c      	cmp	r4, r1
 800aab4:	d1f6      	bne.n	800aaa4 <memchr+0x8>
 800aab6:	bd10      	pop	{r4, pc}

0800aab8 <memcpy>:
 800aab8:	440a      	add	r2, r1
 800aaba:	4291      	cmp	r1, r2
 800aabc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aac0:	d100      	bne.n	800aac4 <memcpy+0xc>
 800aac2:	4770      	bx	lr
 800aac4:	b510      	push	{r4, lr}
 800aac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaca:	4291      	cmp	r1, r2
 800aacc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aad0:	d1f9      	bne.n	800aac6 <memcpy+0xe>
 800aad2:	bd10      	pop	{r4, pc}

0800aad4 <_Balloc>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	b976      	cbnz	r6, 800aafc <_Balloc+0x28>
 800aade:	2010      	movs	r0, #16
 800aae0:	f7ff ffc2 	bl	800aa68 <malloc>
 800aae4:	4602      	mov	r2, r0
 800aae6:	6260      	str	r0, [r4, #36]	; 0x24
 800aae8:	b920      	cbnz	r0, 800aaf4 <_Balloc+0x20>
 800aaea:	2166      	movs	r1, #102	; 0x66
 800aaec:	4b17      	ldr	r3, [pc, #92]	; (800ab4c <_Balloc+0x78>)
 800aaee:	4818      	ldr	r0, [pc, #96]	; (800ab50 <_Balloc+0x7c>)
 800aaf0:	f000 feee 	bl	800b8d0 <__assert_func>
 800aaf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaf8:	6006      	str	r6, [r0, #0]
 800aafa:	60c6      	str	r6, [r0, #12]
 800aafc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aafe:	68f3      	ldr	r3, [r6, #12]
 800ab00:	b183      	cbz	r3, 800ab24 <_Balloc+0x50>
 800ab02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab0a:	b9b8      	cbnz	r0, 800ab3c <_Balloc+0x68>
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ab12:	1d72      	adds	r2, r6, #5
 800ab14:	4620      	mov	r0, r4
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	f000 fc94 	bl	800b444 <_calloc_r>
 800ab1c:	b160      	cbz	r0, 800ab38 <_Balloc+0x64>
 800ab1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab22:	e00e      	b.n	800ab42 <_Balloc+0x6e>
 800ab24:	2221      	movs	r2, #33	; 0x21
 800ab26:	2104      	movs	r1, #4
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 fc8b 	bl	800b444 <_calloc_r>
 800ab2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab30:	60f0      	str	r0, [r6, #12]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e4      	bne.n	800ab02 <_Balloc+0x2e>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	6802      	ldr	r2, [r0, #0]
 800ab3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab42:	2300      	movs	r3, #0
 800ab44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab48:	e7f7      	b.n	800ab3a <_Balloc+0x66>
 800ab4a:	bf00      	nop
 800ab4c:	0800cdee 	.word	0x0800cdee
 800ab50:	0800cef4 	.word	0x0800cef4

0800ab54 <_Bfree>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab58:	4605      	mov	r5, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b976      	cbnz	r6, 800ab7c <_Bfree+0x28>
 800ab5e:	2010      	movs	r0, #16
 800ab60:	f7ff ff82 	bl	800aa68 <malloc>
 800ab64:	4602      	mov	r2, r0
 800ab66:	6268      	str	r0, [r5, #36]	; 0x24
 800ab68:	b920      	cbnz	r0, 800ab74 <_Bfree+0x20>
 800ab6a:	218a      	movs	r1, #138	; 0x8a
 800ab6c:	4b08      	ldr	r3, [pc, #32]	; (800ab90 <_Bfree+0x3c>)
 800ab6e:	4809      	ldr	r0, [pc, #36]	; (800ab94 <_Bfree+0x40>)
 800ab70:	f000 feae 	bl	800b8d0 <__assert_func>
 800ab74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab78:	6006      	str	r6, [r0, #0]
 800ab7a:	60c6      	str	r6, [r0, #12]
 800ab7c:	b13c      	cbz	r4, 800ab8e <_Bfree+0x3a>
 800ab7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab80:	6862      	ldr	r2, [r4, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab88:	6021      	str	r1, [r4, #0]
 800ab8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	0800cdee 	.word	0x0800cdee
 800ab94:	0800cef4 	.word	0x0800cef4

0800ab98 <__multadd>:
 800ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9c:	4698      	mov	r8, r3
 800ab9e:	460c      	mov	r4, r1
 800aba0:	2300      	movs	r3, #0
 800aba2:	690e      	ldr	r6, [r1, #16]
 800aba4:	4607      	mov	r7, r0
 800aba6:	f101 0014 	add.w	r0, r1, #20
 800abaa:	6805      	ldr	r5, [r0, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	b2a9      	uxth	r1, r5
 800abb0:	fb02 8101 	mla	r1, r2, r1, r8
 800abb4:	0c2d      	lsrs	r5, r5, #16
 800abb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800abba:	fb02 c505 	mla	r5, r2, r5, ip
 800abbe:	b289      	uxth	r1, r1
 800abc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800abc4:	429e      	cmp	r6, r3
 800abc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800abca:	f840 1b04 	str.w	r1, [r0], #4
 800abce:	dcec      	bgt.n	800abaa <__multadd+0x12>
 800abd0:	f1b8 0f00 	cmp.w	r8, #0
 800abd4:	d022      	beq.n	800ac1c <__multadd+0x84>
 800abd6:	68a3      	ldr	r3, [r4, #8]
 800abd8:	42b3      	cmp	r3, r6
 800abda:	dc19      	bgt.n	800ac10 <__multadd+0x78>
 800abdc:	6861      	ldr	r1, [r4, #4]
 800abde:	4638      	mov	r0, r7
 800abe0:	3101      	adds	r1, #1
 800abe2:	f7ff ff77 	bl	800aad4 <_Balloc>
 800abe6:	4605      	mov	r5, r0
 800abe8:	b928      	cbnz	r0, 800abf6 <__multadd+0x5e>
 800abea:	4602      	mov	r2, r0
 800abec:	21b5      	movs	r1, #181	; 0xb5
 800abee:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <__multadd+0x8c>)
 800abf0:	480d      	ldr	r0, [pc, #52]	; (800ac28 <__multadd+0x90>)
 800abf2:	f000 fe6d 	bl	800b8d0 <__assert_func>
 800abf6:	6922      	ldr	r2, [r4, #16]
 800abf8:	f104 010c 	add.w	r1, r4, #12
 800abfc:	3202      	adds	r2, #2
 800abfe:	0092      	lsls	r2, r2, #2
 800ac00:	300c      	adds	r0, #12
 800ac02:	f7ff ff59 	bl	800aab8 <memcpy>
 800ac06:	4621      	mov	r1, r4
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7ff ffa3 	bl	800ab54 <_Bfree>
 800ac0e:	462c      	mov	r4, r5
 800ac10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ac14:	3601      	adds	r6, #1
 800ac16:	f8c3 8014 	str.w	r8, [r3, #20]
 800ac1a:	6126      	str	r6, [r4, #16]
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac22:	bf00      	nop
 800ac24:	0800ce64 	.word	0x0800ce64
 800ac28:	0800cef4 	.word	0x0800cef4

0800ac2c <__s2b>:
 800ac2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac30:	4615      	mov	r5, r2
 800ac32:	2209      	movs	r2, #9
 800ac34:	461f      	mov	r7, r3
 800ac36:	3308      	adds	r3, #8
 800ac38:	460c      	mov	r4, r1
 800ac3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac3e:	4606      	mov	r6, r0
 800ac40:	2201      	movs	r2, #1
 800ac42:	2100      	movs	r1, #0
 800ac44:	429a      	cmp	r2, r3
 800ac46:	db09      	blt.n	800ac5c <__s2b+0x30>
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f7ff ff43 	bl	800aad4 <_Balloc>
 800ac4e:	b940      	cbnz	r0, 800ac62 <__s2b+0x36>
 800ac50:	4602      	mov	r2, r0
 800ac52:	21ce      	movs	r1, #206	; 0xce
 800ac54:	4b18      	ldr	r3, [pc, #96]	; (800acb8 <__s2b+0x8c>)
 800ac56:	4819      	ldr	r0, [pc, #100]	; (800acbc <__s2b+0x90>)
 800ac58:	f000 fe3a 	bl	800b8d0 <__assert_func>
 800ac5c:	0052      	lsls	r2, r2, #1
 800ac5e:	3101      	adds	r1, #1
 800ac60:	e7f0      	b.n	800ac44 <__s2b+0x18>
 800ac62:	9b08      	ldr	r3, [sp, #32]
 800ac64:	2d09      	cmp	r5, #9
 800ac66:	6143      	str	r3, [r0, #20]
 800ac68:	f04f 0301 	mov.w	r3, #1
 800ac6c:	6103      	str	r3, [r0, #16]
 800ac6e:	dd16      	ble.n	800ac9e <__s2b+0x72>
 800ac70:	f104 0909 	add.w	r9, r4, #9
 800ac74:	46c8      	mov	r8, r9
 800ac76:	442c      	add	r4, r5
 800ac78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac7c:	4601      	mov	r1, r0
 800ac7e:	220a      	movs	r2, #10
 800ac80:	4630      	mov	r0, r6
 800ac82:	3b30      	subs	r3, #48	; 0x30
 800ac84:	f7ff ff88 	bl	800ab98 <__multadd>
 800ac88:	45a0      	cmp	r8, r4
 800ac8a:	d1f5      	bne.n	800ac78 <__s2b+0x4c>
 800ac8c:	f1a5 0408 	sub.w	r4, r5, #8
 800ac90:	444c      	add	r4, r9
 800ac92:	1b2d      	subs	r5, r5, r4
 800ac94:	1963      	adds	r3, r4, r5
 800ac96:	42bb      	cmp	r3, r7
 800ac98:	db04      	blt.n	800aca4 <__s2b+0x78>
 800ac9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9e:	2509      	movs	r5, #9
 800aca0:	340a      	adds	r4, #10
 800aca2:	e7f6      	b.n	800ac92 <__s2b+0x66>
 800aca4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aca8:	4601      	mov	r1, r0
 800acaa:	220a      	movs	r2, #10
 800acac:	4630      	mov	r0, r6
 800acae:	3b30      	subs	r3, #48	; 0x30
 800acb0:	f7ff ff72 	bl	800ab98 <__multadd>
 800acb4:	e7ee      	b.n	800ac94 <__s2b+0x68>
 800acb6:	bf00      	nop
 800acb8:	0800ce64 	.word	0x0800ce64
 800acbc:	0800cef4 	.word	0x0800cef4

0800acc0 <__hi0bits>:
 800acc0:	0c02      	lsrs	r2, r0, #16
 800acc2:	0412      	lsls	r2, r2, #16
 800acc4:	4603      	mov	r3, r0
 800acc6:	b9ca      	cbnz	r2, 800acfc <__hi0bits+0x3c>
 800acc8:	0403      	lsls	r3, r0, #16
 800acca:	2010      	movs	r0, #16
 800accc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800acd0:	bf04      	itt	eq
 800acd2:	021b      	lsleq	r3, r3, #8
 800acd4:	3008      	addeq	r0, #8
 800acd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800acda:	bf04      	itt	eq
 800acdc:	011b      	lsleq	r3, r3, #4
 800acde:	3004      	addeq	r0, #4
 800ace0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ace4:	bf04      	itt	eq
 800ace6:	009b      	lsleq	r3, r3, #2
 800ace8:	3002      	addeq	r0, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	db05      	blt.n	800acfa <__hi0bits+0x3a>
 800acee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800acf2:	f100 0001 	add.w	r0, r0, #1
 800acf6:	bf08      	it	eq
 800acf8:	2020      	moveq	r0, #32
 800acfa:	4770      	bx	lr
 800acfc:	2000      	movs	r0, #0
 800acfe:	e7e5      	b.n	800accc <__hi0bits+0xc>

0800ad00 <__lo0bits>:
 800ad00:	6803      	ldr	r3, [r0, #0]
 800ad02:	4602      	mov	r2, r0
 800ad04:	f013 0007 	ands.w	r0, r3, #7
 800ad08:	d00b      	beq.n	800ad22 <__lo0bits+0x22>
 800ad0a:	07d9      	lsls	r1, r3, #31
 800ad0c:	d422      	bmi.n	800ad54 <__lo0bits+0x54>
 800ad0e:	0798      	lsls	r0, r3, #30
 800ad10:	bf49      	itett	mi
 800ad12:	085b      	lsrmi	r3, r3, #1
 800ad14:	089b      	lsrpl	r3, r3, #2
 800ad16:	2001      	movmi	r0, #1
 800ad18:	6013      	strmi	r3, [r2, #0]
 800ad1a:	bf5c      	itt	pl
 800ad1c:	2002      	movpl	r0, #2
 800ad1e:	6013      	strpl	r3, [r2, #0]
 800ad20:	4770      	bx	lr
 800ad22:	b299      	uxth	r1, r3
 800ad24:	b909      	cbnz	r1, 800ad2a <__lo0bits+0x2a>
 800ad26:	2010      	movs	r0, #16
 800ad28:	0c1b      	lsrs	r3, r3, #16
 800ad2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad2e:	bf04      	itt	eq
 800ad30:	0a1b      	lsreq	r3, r3, #8
 800ad32:	3008      	addeq	r0, #8
 800ad34:	0719      	lsls	r1, r3, #28
 800ad36:	bf04      	itt	eq
 800ad38:	091b      	lsreq	r3, r3, #4
 800ad3a:	3004      	addeq	r0, #4
 800ad3c:	0799      	lsls	r1, r3, #30
 800ad3e:	bf04      	itt	eq
 800ad40:	089b      	lsreq	r3, r3, #2
 800ad42:	3002      	addeq	r0, #2
 800ad44:	07d9      	lsls	r1, r3, #31
 800ad46:	d403      	bmi.n	800ad50 <__lo0bits+0x50>
 800ad48:	085b      	lsrs	r3, r3, #1
 800ad4a:	f100 0001 	add.w	r0, r0, #1
 800ad4e:	d003      	beq.n	800ad58 <__lo0bits+0x58>
 800ad50:	6013      	str	r3, [r2, #0]
 800ad52:	4770      	bx	lr
 800ad54:	2000      	movs	r0, #0
 800ad56:	4770      	bx	lr
 800ad58:	2020      	movs	r0, #32
 800ad5a:	4770      	bx	lr

0800ad5c <__i2b>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	460c      	mov	r4, r1
 800ad60:	2101      	movs	r1, #1
 800ad62:	f7ff feb7 	bl	800aad4 <_Balloc>
 800ad66:	4602      	mov	r2, r0
 800ad68:	b928      	cbnz	r0, 800ad76 <__i2b+0x1a>
 800ad6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad6e:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <__i2b+0x24>)
 800ad70:	4804      	ldr	r0, [pc, #16]	; (800ad84 <__i2b+0x28>)
 800ad72:	f000 fdad 	bl	800b8d0 <__assert_func>
 800ad76:	2301      	movs	r3, #1
 800ad78:	6144      	str	r4, [r0, #20]
 800ad7a:	6103      	str	r3, [r0, #16]
 800ad7c:	bd10      	pop	{r4, pc}
 800ad7e:	bf00      	nop
 800ad80:	0800ce64 	.word	0x0800ce64
 800ad84:	0800cef4 	.word	0x0800cef4

0800ad88 <__multiply>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	4614      	mov	r4, r2
 800ad8e:	690a      	ldr	r2, [r1, #16]
 800ad90:	6923      	ldr	r3, [r4, #16]
 800ad92:	460d      	mov	r5, r1
 800ad94:	429a      	cmp	r2, r3
 800ad96:	bfbe      	ittt	lt
 800ad98:	460b      	movlt	r3, r1
 800ad9a:	4625      	movlt	r5, r4
 800ad9c:	461c      	movlt	r4, r3
 800ad9e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ada2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ada6:	68ab      	ldr	r3, [r5, #8]
 800ada8:	6869      	ldr	r1, [r5, #4]
 800adaa:	eb0a 0709 	add.w	r7, sl, r9
 800adae:	42bb      	cmp	r3, r7
 800adb0:	b085      	sub	sp, #20
 800adb2:	bfb8      	it	lt
 800adb4:	3101      	addlt	r1, #1
 800adb6:	f7ff fe8d 	bl	800aad4 <_Balloc>
 800adba:	b930      	cbnz	r0, 800adca <__multiply+0x42>
 800adbc:	4602      	mov	r2, r0
 800adbe:	f240 115d 	movw	r1, #349	; 0x15d
 800adc2:	4b41      	ldr	r3, [pc, #260]	; (800aec8 <__multiply+0x140>)
 800adc4:	4841      	ldr	r0, [pc, #260]	; (800aecc <__multiply+0x144>)
 800adc6:	f000 fd83 	bl	800b8d0 <__assert_func>
 800adca:	f100 0614 	add.w	r6, r0, #20
 800adce:	4633      	mov	r3, r6
 800add0:	2200      	movs	r2, #0
 800add2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800add6:	4543      	cmp	r3, r8
 800add8:	d31e      	bcc.n	800ae18 <__multiply+0x90>
 800adda:	f105 0c14 	add.w	ip, r5, #20
 800adde:	f104 0314 	add.w	r3, r4, #20
 800ade2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ade6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800adea:	9202      	str	r2, [sp, #8]
 800adec:	ebac 0205 	sub.w	r2, ip, r5
 800adf0:	3a15      	subs	r2, #21
 800adf2:	f022 0203 	bic.w	r2, r2, #3
 800adf6:	3204      	adds	r2, #4
 800adf8:	f105 0115 	add.w	r1, r5, #21
 800adfc:	458c      	cmp	ip, r1
 800adfe:	bf38      	it	cc
 800ae00:	2204      	movcc	r2, #4
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	9a02      	ldr	r2, [sp, #8]
 800ae06:	9303      	str	r3, [sp, #12]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d808      	bhi.n	800ae1e <__multiply+0x96>
 800ae0c:	2f00      	cmp	r7, #0
 800ae0e:	dc55      	bgt.n	800aebc <__multiply+0x134>
 800ae10:	6107      	str	r7, [r0, #16]
 800ae12:	b005      	add	sp, #20
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	f843 2b04 	str.w	r2, [r3], #4
 800ae1c:	e7db      	b.n	800add6 <__multiply+0x4e>
 800ae1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae22:	f1ba 0f00 	cmp.w	sl, #0
 800ae26:	d020      	beq.n	800ae6a <__multiply+0xe2>
 800ae28:	46b1      	mov	r9, r6
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f105 0e14 	add.w	lr, r5, #20
 800ae30:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ae34:	f8d9 b000 	ldr.w	fp, [r9]
 800ae38:	b2a1      	uxth	r1, r4
 800ae3a:	fa1f fb8b 	uxth.w	fp, fp
 800ae3e:	fb0a b101 	mla	r1, sl, r1, fp
 800ae42:	4411      	add	r1, r2
 800ae44:	f8d9 2000 	ldr.w	r2, [r9]
 800ae48:	0c24      	lsrs	r4, r4, #16
 800ae4a:	0c12      	lsrs	r2, r2, #16
 800ae4c:	fb0a 2404 	mla	r4, sl, r4, r2
 800ae50:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ae54:	b289      	uxth	r1, r1
 800ae56:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae5a:	45f4      	cmp	ip, lr
 800ae5c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ae60:	f849 1b04 	str.w	r1, [r9], #4
 800ae64:	d8e4      	bhi.n	800ae30 <__multiply+0xa8>
 800ae66:	9901      	ldr	r1, [sp, #4]
 800ae68:	5072      	str	r2, [r6, r1]
 800ae6a:	9a03      	ldr	r2, [sp, #12]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae72:	f1b9 0f00 	cmp.w	r9, #0
 800ae76:	d01f      	beq.n	800aeb8 <__multiply+0x130>
 800ae78:	46b6      	mov	lr, r6
 800ae7a:	f04f 0a00 	mov.w	sl, #0
 800ae7e:	6834      	ldr	r4, [r6, #0]
 800ae80:	f105 0114 	add.w	r1, r5, #20
 800ae84:	880a      	ldrh	r2, [r1, #0]
 800ae86:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae8a:	b2a4      	uxth	r4, r4
 800ae8c:	fb09 b202 	mla	r2, r9, r2, fp
 800ae90:	4492      	add	sl, r2
 800ae92:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae96:	f84e 4b04 	str.w	r4, [lr], #4
 800ae9a:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae9e:	f8be 2000 	ldrh.w	r2, [lr]
 800aea2:	0c24      	lsrs	r4, r4, #16
 800aea4:	fb09 2404 	mla	r4, r9, r4, r2
 800aea8:	458c      	cmp	ip, r1
 800aeaa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aeae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aeb2:	d8e7      	bhi.n	800ae84 <__multiply+0xfc>
 800aeb4:	9a01      	ldr	r2, [sp, #4]
 800aeb6:	50b4      	str	r4, [r6, r2]
 800aeb8:	3604      	adds	r6, #4
 800aeba:	e7a3      	b.n	800ae04 <__multiply+0x7c>
 800aebc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1a5      	bne.n	800ae10 <__multiply+0x88>
 800aec4:	3f01      	subs	r7, #1
 800aec6:	e7a1      	b.n	800ae0c <__multiply+0x84>
 800aec8:	0800ce64 	.word	0x0800ce64
 800aecc:	0800cef4 	.word	0x0800cef4

0800aed0 <__pow5mult>:
 800aed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed4:	4615      	mov	r5, r2
 800aed6:	f012 0203 	ands.w	r2, r2, #3
 800aeda:	4606      	mov	r6, r0
 800aedc:	460f      	mov	r7, r1
 800aede:	d007      	beq.n	800aef0 <__pow5mult+0x20>
 800aee0:	4c25      	ldr	r4, [pc, #148]	; (800af78 <__pow5mult+0xa8>)
 800aee2:	3a01      	subs	r2, #1
 800aee4:	2300      	movs	r3, #0
 800aee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeea:	f7ff fe55 	bl	800ab98 <__multadd>
 800aeee:	4607      	mov	r7, r0
 800aef0:	10ad      	asrs	r5, r5, #2
 800aef2:	d03d      	beq.n	800af70 <__pow5mult+0xa0>
 800aef4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aef6:	b97c      	cbnz	r4, 800af18 <__pow5mult+0x48>
 800aef8:	2010      	movs	r0, #16
 800aefa:	f7ff fdb5 	bl	800aa68 <malloc>
 800aefe:	4602      	mov	r2, r0
 800af00:	6270      	str	r0, [r6, #36]	; 0x24
 800af02:	b928      	cbnz	r0, 800af10 <__pow5mult+0x40>
 800af04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af08:	4b1c      	ldr	r3, [pc, #112]	; (800af7c <__pow5mult+0xac>)
 800af0a:	481d      	ldr	r0, [pc, #116]	; (800af80 <__pow5mult+0xb0>)
 800af0c:	f000 fce0 	bl	800b8d0 <__assert_func>
 800af10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af14:	6004      	str	r4, [r0, #0]
 800af16:	60c4      	str	r4, [r0, #12]
 800af18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af20:	b94c      	cbnz	r4, 800af36 <__pow5mult+0x66>
 800af22:	f240 2171 	movw	r1, #625	; 0x271
 800af26:	4630      	mov	r0, r6
 800af28:	f7ff ff18 	bl	800ad5c <__i2b>
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	f8c8 0008 	str.w	r0, [r8, #8]
 800af34:	6003      	str	r3, [r0, #0]
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	07eb      	lsls	r3, r5, #31
 800af3c:	d50a      	bpl.n	800af54 <__pow5mult+0x84>
 800af3e:	4639      	mov	r1, r7
 800af40:	4622      	mov	r2, r4
 800af42:	4630      	mov	r0, r6
 800af44:	f7ff ff20 	bl	800ad88 <__multiply>
 800af48:	4680      	mov	r8, r0
 800af4a:	4639      	mov	r1, r7
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff fe01 	bl	800ab54 <_Bfree>
 800af52:	4647      	mov	r7, r8
 800af54:	106d      	asrs	r5, r5, #1
 800af56:	d00b      	beq.n	800af70 <__pow5mult+0xa0>
 800af58:	6820      	ldr	r0, [r4, #0]
 800af5a:	b938      	cbnz	r0, 800af6c <__pow5mult+0x9c>
 800af5c:	4622      	mov	r2, r4
 800af5e:	4621      	mov	r1, r4
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ff11 	bl	800ad88 <__multiply>
 800af66:	6020      	str	r0, [r4, #0]
 800af68:	f8c0 9000 	str.w	r9, [r0]
 800af6c:	4604      	mov	r4, r0
 800af6e:	e7e4      	b.n	800af3a <__pow5mult+0x6a>
 800af70:	4638      	mov	r0, r7
 800af72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af76:	bf00      	nop
 800af78:	0800d048 	.word	0x0800d048
 800af7c:	0800cdee 	.word	0x0800cdee
 800af80:	0800cef4 	.word	0x0800cef4

0800af84 <__lshift>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	460c      	mov	r4, r1
 800af8a:	4607      	mov	r7, r0
 800af8c:	4691      	mov	r9, r2
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	6849      	ldr	r1, [r1, #4]
 800af92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af9c:	f108 0601 	add.w	r6, r8, #1
 800afa0:	42b3      	cmp	r3, r6
 800afa2:	db0b      	blt.n	800afbc <__lshift+0x38>
 800afa4:	4638      	mov	r0, r7
 800afa6:	f7ff fd95 	bl	800aad4 <_Balloc>
 800afaa:	4605      	mov	r5, r0
 800afac:	b948      	cbnz	r0, 800afc2 <__lshift+0x3e>
 800afae:	4602      	mov	r2, r0
 800afb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afb4:	4b27      	ldr	r3, [pc, #156]	; (800b054 <__lshift+0xd0>)
 800afb6:	4828      	ldr	r0, [pc, #160]	; (800b058 <__lshift+0xd4>)
 800afb8:	f000 fc8a 	bl	800b8d0 <__assert_func>
 800afbc:	3101      	adds	r1, #1
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	e7ee      	b.n	800afa0 <__lshift+0x1c>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f100 0114 	add.w	r1, r0, #20
 800afc8:	f100 0210 	add.w	r2, r0, #16
 800afcc:	4618      	mov	r0, r3
 800afce:	4553      	cmp	r3, sl
 800afd0:	db33      	blt.n	800b03a <__lshift+0xb6>
 800afd2:	6920      	ldr	r0, [r4, #16]
 800afd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afd8:	f104 0314 	add.w	r3, r4, #20
 800afdc:	f019 091f 	ands.w	r9, r9, #31
 800afe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afe8:	d02b      	beq.n	800b042 <__lshift+0xbe>
 800afea:	468a      	mov	sl, r1
 800afec:	2200      	movs	r2, #0
 800afee:	f1c9 0e20 	rsb	lr, r9, #32
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	fa00 f009 	lsl.w	r0, r0, r9
 800aff8:	4302      	orrs	r2, r0
 800affa:	f84a 2b04 	str.w	r2, [sl], #4
 800affe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b002:	459c      	cmp	ip, r3
 800b004:	fa22 f20e 	lsr.w	r2, r2, lr
 800b008:	d8f3      	bhi.n	800aff2 <__lshift+0x6e>
 800b00a:	ebac 0304 	sub.w	r3, ip, r4
 800b00e:	3b15      	subs	r3, #21
 800b010:	f023 0303 	bic.w	r3, r3, #3
 800b014:	3304      	adds	r3, #4
 800b016:	f104 0015 	add.w	r0, r4, #21
 800b01a:	4584      	cmp	ip, r0
 800b01c:	bf38      	it	cc
 800b01e:	2304      	movcc	r3, #4
 800b020:	50ca      	str	r2, [r1, r3]
 800b022:	b10a      	cbz	r2, 800b028 <__lshift+0xa4>
 800b024:	f108 0602 	add.w	r6, r8, #2
 800b028:	3e01      	subs	r6, #1
 800b02a:	4638      	mov	r0, r7
 800b02c:	4621      	mov	r1, r4
 800b02e:	612e      	str	r6, [r5, #16]
 800b030:	f7ff fd90 	bl	800ab54 <_Bfree>
 800b034:	4628      	mov	r0, r5
 800b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b03e:	3301      	adds	r3, #1
 800b040:	e7c5      	b.n	800afce <__lshift+0x4a>
 800b042:	3904      	subs	r1, #4
 800b044:	f853 2b04 	ldr.w	r2, [r3], #4
 800b048:	459c      	cmp	ip, r3
 800b04a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b04e:	d8f9      	bhi.n	800b044 <__lshift+0xc0>
 800b050:	e7ea      	b.n	800b028 <__lshift+0xa4>
 800b052:	bf00      	nop
 800b054:	0800ce64 	.word	0x0800ce64
 800b058:	0800cef4 	.word	0x0800cef4

0800b05c <__mcmp>:
 800b05c:	4603      	mov	r3, r0
 800b05e:	690a      	ldr	r2, [r1, #16]
 800b060:	6900      	ldr	r0, [r0, #16]
 800b062:	b530      	push	{r4, r5, lr}
 800b064:	1a80      	subs	r0, r0, r2
 800b066:	d10d      	bne.n	800b084 <__mcmp+0x28>
 800b068:	3314      	adds	r3, #20
 800b06a:	3114      	adds	r1, #20
 800b06c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b07c:	4295      	cmp	r5, r2
 800b07e:	d002      	beq.n	800b086 <__mcmp+0x2a>
 800b080:	d304      	bcc.n	800b08c <__mcmp+0x30>
 800b082:	2001      	movs	r0, #1
 800b084:	bd30      	pop	{r4, r5, pc}
 800b086:	42a3      	cmp	r3, r4
 800b088:	d3f4      	bcc.n	800b074 <__mcmp+0x18>
 800b08a:	e7fb      	b.n	800b084 <__mcmp+0x28>
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b090:	e7f8      	b.n	800b084 <__mcmp+0x28>
	...

0800b094 <__mdiff>:
 800b094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	460c      	mov	r4, r1
 800b09a:	4606      	mov	r6, r0
 800b09c:	4611      	mov	r1, r2
 800b09e:	4620      	mov	r0, r4
 800b0a0:	4692      	mov	sl, r2
 800b0a2:	f7ff ffdb 	bl	800b05c <__mcmp>
 800b0a6:	1e05      	subs	r5, r0, #0
 800b0a8:	d111      	bne.n	800b0ce <__mdiff+0x3a>
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f7ff fd11 	bl	800aad4 <_Balloc>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	b928      	cbnz	r0, 800b0c2 <__mdiff+0x2e>
 800b0b6:	f240 2132 	movw	r1, #562	; 0x232
 800b0ba:	4b3c      	ldr	r3, [pc, #240]	; (800b1ac <__mdiff+0x118>)
 800b0bc:	483c      	ldr	r0, [pc, #240]	; (800b1b0 <__mdiff+0x11c>)
 800b0be:	f000 fc07 	bl	800b8d0 <__assert_func>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	bfa4      	itt	ge
 800b0d0:	4653      	movge	r3, sl
 800b0d2:	46a2      	movge	sl, r4
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b0da:	bfa6      	itte	ge
 800b0dc:	461c      	movge	r4, r3
 800b0de:	2500      	movge	r5, #0
 800b0e0:	2501      	movlt	r5, #1
 800b0e2:	f7ff fcf7 	bl	800aad4 <_Balloc>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	b918      	cbnz	r0, 800b0f2 <__mdiff+0x5e>
 800b0ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0ee:	4b2f      	ldr	r3, [pc, #188]	; (800b1ac <__mdiff+0x118>)
 800b0f0:	e7e4      	b.n	800b0bc <__mdiff+0x28>
 800b0f2:	f100 0814 	add.w	r8, r0, #20
 800b0f6:	f8da 7010 	ldr.w	r7, [sl, #16]
 800b0fa:	60c5      	str	r5, [r0, #12]
 800b0fc:	f04f 0c00 	mov.w	ip, #0
 800b100:	f10a 0514 	add.w	r5, sl, #20
 800b104:	f10a 0010 	add.w	r0, sl, #16
 800b108:	46c2      	mov	sl, r8
 800b10a:	6926      	ldr	r6, [r4, #16]
 800b10c:	f104 0914 	add.w	r9, r4, #20
 800b110:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800b114:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b118:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b11c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b120:	fa1f f18b 	uxth.w	r1, fp
 800b124:	4461      	add	r1, ip
 800b126:	fa1f fc83 	uxth.w	ip, r3
 800b12a:	0c1b      	lsrs	r3, r3, #16
 800b12c:	eba1 010c 	sub.w	r1, r1, ip
 800b130:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b134:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b138:	b289      	uxth	r1, r1
 800b13a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b13e:	454e      	cmp	r6, r9
 800b140:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b144:	f84a 3b04 	str.w	r3, [sl], #4
 800b148:	d8e6      	bhi.n	800b118 <__mdiff+0x84>
 800b14a:	1b33      	subs	r3, r6, r4
 800b14c:	3b15      	subs	r3, #21
 800b14e:	f023 0303 	bic.w	r3, r3, #3
 800b152:	3415      	adds	r4, #21
 800b154:	3304      	adds	r3, #4
 800b156:	42a6      	cmp	r6, r4
 800b158:	bf38      	it	cc
 800b15a:	2304      	movcc	r3, #4
 800b15c:	441d      	add	r5, r3
 800b15e:	4443      	add	r3, r8
 800b160:	461e      	mov	r6, r3
 800b162:	462c      	mov	r4, r5
 800b164:	4574      	cmp	r4, lr
 800b166:	d30e      	bcc.n	800b186 <__mdiff+0xf2>
 800b168:	f10e 0103 	add.w	r1, lr, #3
 800b16c:	1b49      	subs	r1, r1, r5
 800b16e:	f021 0103 	bic.w	r1, r1, #3
 800b172:	3d03      	subs	r5, #3
 800b174:	45ae      	cmp	lr, r5
 800b176:	bf38      	it	cc
 800b178:	2100      	movcc	r1, #0
 800b17a:	4419      	add	r1, r3
 800b17c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b180:	b18b      	cbz	r3, 800b1a6 <__mdiff+0x112>
 800b182:	6117      	str	r7, [r2, #16]
 800b184:	e7a0      	b.n	800b0c8 <__mdiff+0x34>
 800b186:	f854 8b04 	ldr.w	r8, [r4], #4
 800b18a:	fa1f f188 	uxth.w	r1, r8
 800b18e:	4461      	add	r1, ip
 800b190:	1408      	asrs	r0, r1, #16
 800b192:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b196:	b289      	uxth	r1, r1
 800b198:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b19c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1a0:	f846 1b04 	str.w	r1, [r6], #4
 800b1a4:	e7de      	b.n	800b164 <__mdiff+0xd0>
 800b1a6:	3f01      	subs	r7, #1
 800b1a8:	e7e8      	b.n	800b17c <__mdiff+0xe8>
 800b1aa:	bf00      	nop
 800b1ac:	0800ce64 	.word	0x0800ce64
 800b1b0:	0800cef4 	.word	0x0800cef4

0800b1b4 <__ulp>:
 800b1b4:	4b11      	ldr	r3, [pc, #68]	; (800b1fc <__ulp+0x48>)
 800b1b6:	400b      	ands	r3, r1
 800b1b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dd02      	ble.n	800b1c6 <__ulp+0x12>
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4770      	bx	lr
 800b1c6:	425b      	negs	r3, r3
 800b1c8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b1cc:	f04f 0000 	mov.w	r0, #0
 800b1d0:	f04f 0100 	mov.w	r1, #0
 800b1d4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1d8:	da04      	bge.n	800b1e4 <__ulp+0x30>
 800b1da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1de:	fa43 f102 	asr.w	r1, r3, r2
 800b1e2:	4770      	bx	lr
 800b1e4:	f1a2 0314 	sub.w	r3, r2, #20
 800b1e8:	2b1e      	cmp	r3, #30
 800b1ea:	bfd6      	itet	le
 800b1ec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b1f0:	2301      	movgt	r3, #1
 800b1f2:	fa22 f303 	lsrle.w	r3, r2, r3
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	7ff00000 	.word	0x7ff00000

0800b200 <__b2d>:
 800b200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b204:	6907      	ldr	r7, [r0, #16]
 800b206:	f100 0914 	add.w	r9, r0, #20
 800b20a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b20e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b212:	f1a7 0804 	sub.w	r8, r7, #4
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff fd52 	bl	800acc0 <__hi0bits>
 800b21c:	f1c0 0320 	rsb	r3, r0, #32
 800b220:	280a      	cmp	r0, #10
 800b222:	600b      	str	r3, [r1, #0]
 800b224:	491f      	ldr	r1, [pc, #124]	; (800b2a4 <__b2d+0xa4>)
 800b226:	dc17      	bgt.n	800b258 <__b2d+0x58>
 800b228:	45c1      	cmp	r9, r8
 800b22a:	bf28      	it	cs
 800b22c:	2200      	movcs	r2, #0
 800b22e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b232:	fa26 f30c 	lsr.w	r3, r6, ip
 800b236:	bf38      	it	cc
 800b238:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b23c:	ea43 0501 	orr.w	r5, r3, r1
 800b240:	f100 0315 	add.w	r3, r0, #21
 800b244:	fa06 f303 	lsl.w	r3, r6, r3
 800b248:	fa22 f20c 	lsr.w	r2, r2, ip
 800b24c:	ea43 0402 	orr.w	r4, r3, r2
 800b250:	4620      	mov	r0, r4
 800b252:	4629      	mov	r1, r5
 800b254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b258:	45c1      	cmp	r9, r8
 800b25a:	bf2e      	itee	cs
 800b25c:	2200      	movcs	r2, #0
 800b25e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b262:	f1a7 0808 	subcc.w	r8, r7, #8
 800b266:	f1b0 030b 	subs.w	r3, r0, #11
 800b26a:	d016      	beq.n	800b29a <__b2d+0x9a>
 800b26c:	f1c3 0720 	rsb	r7, r3, #32
 800b270:	fa22 f107 	lsr.w	r1, r2, r7
 800b274:	45c8      	cmp	r8, r9
 800b276:	fa06 f603 	lsl.w	r6, r6, r3
 800b27a:	ea46 0601 	orr.w	r6, r6, r1
 800b27e:	bf94      	ite	ls
 800b280:	2100      	movls	r1, #0
 800b282:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b286:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b28a:	fa02 f003 	lsl.w	r0, r2, r3
 800b28e:	40f9      	lsrs	r1, r7
 800b290:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b294:	ea40 0401 	orr.w	r4, r0, r1
 800b298:	e7da      	b.n	800b250 <__b2d+0x50>
 800b29a:	4614      	mov	r4, r2
 800b29c:	ea46 0501 	orr.w	r5, r6, r1
 800b2a0:	e7d6      	b.n	800b250 <__b2d+0x50>
 800b2a2:	bf00      	nop
 800b2a4:	3ff00000 	.word	0x3ff00000

0800b2a8 <__d2b>:
 800b2a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b2b2:	4690      	mov	r8, r2
 800b2b4:	461d      	mov	r5, r3
 800b2b6:	f7ff fc0d 	bl	800aad4 <_Balloc>
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	b930      	cbnz	r0, 800b2cc <__d2b+0x24>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	f240 310a 	movw	r1, #778	; 0x30a
 800b2c4:	4b24      	ldr	r3, [pc, #144]	; (800b358 <__d2b+0xb0>)
 800b2c6:	4825      	ldr	r0, [pc, #148]	; (800b35c <__d2b+0xb4>)
 800b2c8:	f000 fb02 	bl	800b8d0 <__assert_func>
 800b2cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b2d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b2d4:	bb2d      	cbnz	r5, 800b322 <__d2b+0x7a>
 800b2d6:	9301      	str	r3, [sp, #4]
 800b2d8:	f1b8 0300 	subs.w	r3, r8, #0
 800b2dc:	d026      	beq.n	800b32c <__d2b+0x84>
 800b2de:	4668      	mov	r0, sp
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	f7ff fd0d 	bl	800ad00 <__lo0bits>
 800b2e6:	9900      	ldr	r1, [sp, #0]
 800b2e8:	b1f0      	cbz	r0, 800b328 <__d2b+0x80>
 800b2ea:	9a01      	ldr	r2, [sp, #4]
 800b2ec:	f1c0 0320 	rsb	r3, r0, #32
 800b2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	40c2      	lsrs	r2, r0
 800b2f8:	6163      	str	r3, [r4, #20]
 800b2fa:	9201      	str	r2, [sp, #4]
 800b2fc:	9b01      	ldr	r3, [sp, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	bf14      	ite	ne
 800b302:	2102      	movne	r1, #2
 800b304:	2101      	moveq	r1, #1
 800b306:	61a3      	str	r3, [r4, #24]
 800b308:	6121      	str	r1, [r4, #16]
 800b30a:	b1c5      	cbz	r5, 800b33e <__d2b+0x96>
 800b30c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b310:	4405      	add	r5, r0
 800b312:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b316:	603d      	str	r5, [r7, #0]
 800b318:	6030      	str	r0, [r6, #0]
 800b31a:	4620      	mov	r0, r4
 800b31c:	b002      	add	sp, #8
 800b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b326:	e7d6      	b.n	800b2d6 <__d2b+0x2e>
 800b328:	6161      	str	r1, [r4, #20]
 800b32a:	e7e7      	b.n	800b2fc <__d2b+0x54>
 800b32c:	a801      	add	r0, sp, #4
 800b32e:	f7ff fce7 	bl	800ad00 <__lo0bits>
 800b332:	2101      	movs	r1, #1
 800b334:	9b01      	ldr	r3, [sp, #4]
 800b336:	6121      	str	r1, [r4, #16]
 800b338:	6163      	str	r3, [r4, #20]
 800b33a:	3020      	adds	r0, #32
 800b33c:	e7e5      	b.n	800b30a <__d2b+0x62>
 800b33e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b342:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b346:	6038      	str	r0, [r7, #0]
 800b348:	6918      	ldr	r0, [r3, #16]
 800b34a:	f7ff fcb9 	bl	800acc0 <__hi0bits>
 800b34e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b352:	6031      	str	r1, [r6, #0]
 800b354:	e7e1      	b.n	800b31a <__d2b+0x72>
 800b356:	bf00      	nop
 800b358:	0800ce64 	.word	0x0800ce64
 800b35c:	0800cef4 	.word	0x0800cef4

0800b360 <__ratio>:
 800b360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	4688      	mov	r8, r1
 800b366:	4669      	mov	r1, sp
 800b368:	4681      	mov	r9, r0
 800b36a:	f7ff ff49 	bl	800b200 <__b2d>
 800b36e:	460f      	mov	r7, r1
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
 800b374:	4640      	mov	r0, r8
 800b376:	a901      	add	r1, sp, #4
 800b378:	f7ff ff42 	bl	800b200 <__b2d>
 800b37c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b380:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b384:	468b      	mov	fp, r1
 800b386:	eba3 0c02 	sub.w	ip, r3, r2
 800b38a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b38e:	1a9b      	subs	r3, r3, r2
 800b390:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b394:	2b00      	cmp	r3, #0
 800b396:	bfd5      	itete	le
 800b398:	460a      	movle	r2, r1
 800b39a:	462a      	movgt	r2, r5
 800b39c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3a4:	bfd8      	it	le
 800b3a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3aa:	465b      	mov	r3, fp
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	4639      	mov	r1, r7
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f7f5 f9c5 	bl	8000740 <__aeabi_ddiv>
 800b3b6:	b003      	add	sp, #12
 800b3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3bc <__copybits>:
 800b3bc:	3901      	subs	r1, #1
 800b3be:	b570      	push	{r4, r5, r6, lr}
 800b3c0:	1149      	asrs	r1, r1, #5
 800b3c2:	6914      	ldr	r4, [r2, #16]
 800b3c4:	3101      	adds	r1, #1
 800b3c6:	f102 0314 	add.w	r3, r2, #20
 800b3ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3d2:	1f05      	subs	r5, r0, #4
 800b3d4:	42a3      	cmp	r3, r4
 800b3d6:	d30c      	bcc.n	800b3f2 <__copybits+0x36>
 800b3d8:	1aa3      	subs	r3, r4, r2
 800b3da:	3b11      	subs	r3, #17
 800b3dc:	f023 0303 	bic.w	r3, r3, #3
 800b3e0:	3211      	adds	r2, #17
 800b3e2:	42a2      	cmp	r2, r4
 800b3e4:	bf88      	it	hi
 800b3e6:	2300      	movhi	r3, #0
 800b3e8:	4418      	add	r0, r3
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4288      	cmp	r0, r1
 800b3ee:	d305      	bcc.n	800b3fc <__copybits+0x40>
 800b3f0:	bd70      	pop	{r4, r5, r6, pc}
 800b3f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3fa:	e7eb      	b.n	800b3d4 <__copybits+0x18>
 800b3fc:	f840 3b04 	str.w	r3, [r0], #4
 800b400:	e7f4      	b.n	800b3ec <__copybits+0x30>

0800b402 <__any_on>:
 800b402:	f100 0214 	add.w	r2, r0, #20
 800b406:	6900      	ldr	r0, [r0, #16]
 800b408:	114b      	asrs	r3, r1, #5
 800b40a:	4298      	cmp	r0, r3
 800b40c:	b510      	push	{r4, lr}
 800b40e:	db11      	blt.n	800b434 <__any_on+0x32>
 800b410:	dd0a      	ble.n	800b428 <__any_on+0x26>
 800b412:	f011 011f 	ands.w	r1, r1, #31
 800b416:	d007      	beq.n	800b428 <__any_on+0x26>
 800b418:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b41c:	fa24 f001 	lsr.w	r0, r4, r1
 800b420:	fa00 f101 	lsl.w	r1, r0, r1
 800b424:	428c      	cmp	r4, r1
 800b426:	d10b      	bne.n	800b440 <__any_on+0x3e>
 800b428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d803      	bhi.n	800b438 <__any_on+0x36>
 800b430:	2000      	movs	r0, #0
 800b432:	bd10      	pop	{r4, pc}
 800b434:	4603      	mov	r3, r0
 800b436:	e7f7      	b.n	800b428 <__any_on+0x26>
 800b438:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d0f5      	beq.n	800b42c <__any_on+0x2a>
 800b440:	2001      	movs	r0, #1
 800b442:	e7f6      	b.n	800b432 <__any_on+0x30>

0800b444 <_calloc_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	fb02 f501 	mul.w	r5, r2, r1
 800b44a:	4629      	mov	r1, r5
 800b44c:	f000 f854 	bl	800b4f8 <_malloc_r>
 800b450:	4604      	mov	r4, r0
 800b452:	b118      	cbz	r0, 800b45c <_calloc_r+0x18>
 800b454:	462a      	mov	r2, r5
 800b456:	2100      	movs	r1, #0
 800b458:	f7fc fdca 	bl	8007ff0 <memset>
 800b45c:	4620      	mov	r0, r4
 800b45e:	bd38      	pop	{r3, r4, r5, pc}

0800b460 <_free_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4605      	mov	r5, r0
 800b464:	2900      	cmp	r1, #0
 800b466:	d043      	beq.n	800b4f0 <_free_r+0x90>
 800b468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b46c:	1f0c      	subs	r4, r1, #4
 800b46e:	2b00      	cmp	r3, #0
 800b470:	bfb8      	it	lt
 800b472:	18e4      	addlt	r4, r4, r3
 800b474:	f000 fa76 	bl	800b964 <__malloc_lock>
 800b478:	4a1e      	ldr	r2, [pc, #120]	; (800b4f4 <_free_r+0x94>)
 800b47a:	6813      	ldr	r3, [r2, #0]
 800b47c:	4610      	mov	r0, r2
 800b47e:	b933      	cbnz	r3, 800b48e <_free_r+0x2e>
 800b480:	6063      	str	r3, [r4, #4]
 800b482:	6014      	str	r4, [r2, #0]
 800b484:	4628      	mov	r0, r5
 800b486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b48a:	f000 ba71 	b.w	800b970 <__malloc_unlock>
 800b48e:	42a3      	cmp	r3, r4
 800b490:	d90a      	bls.n	800b4a8 <_free_r+0x48>
 800b492:	6821      	ldr	r1, [r4, #0]
 800b494:	1862      	adds	r2, r4, r1
 800b496:	4293      	cmp	r3, r2
 800b498:	bf01      	itttt	eq
 800b49a:	681a      	ldreq	r2, [r3, #0]
 800b49c:	685b      	ldreq	r3, [r3, #4]
 800b49e:	1852      	addeq	r2, r2, r1
 800b4a0:	6022      	streq	r2, [r4, #0]
 800b4a2:	6063      	str	r3, [r4, #4]
 800b4a4:	6004      	str	r4, [r0, #0]
 800b4a6:	e7ed      	b.n	800b484 <_free_r+0x24>
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	b10b      	cbz	r3, 800b4b2 <_free_r+0x52>
 800b4ae:	42a3      	cmp	r3, r4
 800b4b0:	d9fa      	bls.n	800b4a8 <_free_r+0x48>
 800b4b2:	6811      	ldr	r1, [r2, #0]
 800b4b4:	1850      	adds	r0, r2, r1
 800b4b6:	42a0      	cmp	r0, r4
 800b4b8:	d10b      	bne.n	800b4d2 <_free_r+0x72>
 800b4ba:	6820      	ldr	r0, [r4, #0]
 800b4bc:	4401      	add	r1, r0
 800b4be:	1850      	adds	r0, r2, r1
 800b4c0:	4283      	cmp	r3, r0
 800b4c2:	6011      	str	r1, [r2, #0]
 800b4c4:	d1de      	bne.n	800b484 <_free_r+0x24>
 800b4c6:	6818      	ldr	r0, [r3, #0]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	4401      	add	r1, r0
 800b4cc:	6011      	str	r1, [r2, #0]
 800b4ce:	6053      	str	r3, [r2, #4]
 800b4d0:	e7d8      	b.n	800b484 <_free_r+0x24>
 800b4d2:	d902      	bls.n	800b4da <_free_r+0x7a>
 800b4d4:	230c      	movs	r3, #12
 800b4d6:	602b      	str	r3, [r5, #0]
 800b4d8:	e7d4      	b.n	800b484 <_free_r+0x24>
 800b4da:	6820      	ldr	r0, [r4, #0]
 800b4dc:	1821      	adds	r1, r4, r0
 800b4de:	428b      	cmp	r3, r1
 800b4e0:	bf01      	itttt	eq
 800b4e2:	6819      	ldreq	r1, [r3, #0]
 800b4e4:	685b      	ldreq	r3, [r3, #4]
 800b4e6:	1809      	addeq	r1, r1, r0
 800b4e8:	6021      	streq	r1, [r4, #0]
 800b4ea:	6063      	str	r3, [r4, #4]
 800b4ec:	6054      	str	r4, [r2, #4]
 800b4ee:	e7c9      	b.n	800b484 <_free_r+0x24>
 800b4f0:	bd38      	pop	{r3, r4, r5, pc}
 800b4f2:	bf00      	nop
 800b4f4:	200003d0 	.word	0x200003d0

0800b4f8 <_malloc_r>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	1ccd      	adds	r5, r1, #3
 800b4fc:	f025 0503 	bic.w	r5, r5, #3
 800b500:	3508      	adds	r5, #8
 800b502:	2d0c      	cmp	r5, #12
 800b504:	bf38      	it	cc
 800b506:	250c      	movcc	r5, #12
 800b508:	2d00      	cmp	r5, #0
 800b50a:	4606      	mov	r6, r0
 800b50c:	db01      	blt.n	800b512 <_malloc_r+0x1a>
 800b50e:	42a9      	cmp	r1, r5
 800b510:	d903      	bls.n	800b51a <_malloc_r+0x22>
 800b512:	230c      	movs	r3, #12
 800b514:	6033      	str	r3, [r6, #0]
 800b516:	2000      	movs	r0, #0
 800b518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51a:	f000 fa23 	bl	800b964 <__malloc_lock>
 800b51e:	4921      	ldr	r1, [pc, #132]	; (800b5a4 <_malloc_r+0xac>)
 800b520:	680a      	ldr	r2, [r1, #0]
 800b522:	4614      	mov	r4, r2
 800b524:	b99c      	cbnz	r4, 800b54e <_malloc_r+0x56>
 800b526:	4f20      	ldr	r7, [pc, #128]	; (800b5a8 <_malloc_r+0xb0>)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	b923      	cbnz	r3, 800b536 <_malloc_r+0x3e>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4630      	mov	r0, r6
 800b530:	f000 f99e 	bl	800b870 <_sbrk_r>
 800b534:	6038      	str	r0, [r7, #0]
 800b536:	4629      	mov	r1, r5
 800b538:	4630      	mov	r0, r6
 800b53a:	f000 f999 	bl	800b870 <_sbrk_r>
 800b53e:	1c43      	adds	r3, r0, #1
 800b540:	d123      	bne.n	800b58a <_malloc_r+0x92>
 800b542:	230c      	movs	r3, #12
 800b544:	4630      	mov	r0, r6
 800b546:	6033      	str	r3, [r6, #0]
 800b548:	f000 fa12 	bl	800b970 <__malloc_unlock>
 800b54c:	e7e3      	b.n	800b516 <_malloc_r+0x1e>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	1b5b      	subs	r3, r3, r5
 800b552:	d417      	bmi.n	800b584 <_malloc_r+0x8c>
 800b554:	2b0b      	cmp	r3, #11
 800b556:	d903      	bls.n	800b560 <_malloc_r+0x68>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	441c      	add	r4, r3
 800b55c:	6025      	str	r5, [r4, #0]
 800b55e:	e004      	b.n	800b56a <_malloc_r+0x72>
 800b560:	6863      	ldr	r3, [r4, #4]
 800b562:	42a2      	cmp	r2, r4
 800b564:	bf0c      	ite	eq
 800b566:	600b      	streq	r3, [r1, #0]
 800b568:	6053      	strne	r3, [r2, #4]
 800b56a:	4630      	mov	r0, r6
 800b56c:	f000 fa00 	bl	800b970 <__malloc_unlock>
 800b570:	f104 000b 	add.w	r0, r4, #11
 800b574:	1d23      	adds	r3, r4, #4
 800b576:	f020 0007 	bic.w	r0, r0, #7
 800b57a:	1ac2      	subs	r2, r0, r3
 800b57c:	d0cc      	beq.n	800b518 <_malloc_r+0x20>
 800b57e:	1a1b      	subs	r3, r3, r0
 800b580:	50a3      	str	r3, [r4, r2]
 800b582:	e7c9      	b.n	800b518 <_malloc_r+0x20>
 800b584:	4622      	mov	r2, r4
 800b586:	6864      	ldr	r4, [r4, #4]
 800b588:	e7cc      	b.n	800b524 <_malloc_r+0x2c>
 800b58a:	1cc4      	adds	r4, r0, #3
 800b58c:	f024 0403 	bic.w	r4, r4, #3
 800b590:	42a0      	cmp	r0, r4
 800b592:	d0e3      	beq.n	800b55c <_malloc_r+0x64>
 800b594:	1a21      	subs	r1, r4, r0
 800b596:	4630      	mov	r0, r6
 800b598:	f000 f96a 	bl	800b870 <_sbrk_r>
 800b59c:	3001      	adds	r0, #1
 800b59e:	d1dd      	bne.n	800b55c <_malloc_r+0x64>
 800b5a0:	e7cf      	b.n	800b542 <_malloc_r+0x4a>
 800b5a2:	bf00      	nop
 800b5a4:	200003d0 	.word	0x200003d0
 800b5a8:	200003d4 	.word	0x200003d4

0800b5ac <__ssputs_r>:
 800b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	688e      	ldr	r6, [r1, #8]
 800b5b2:	4682      	mov	sl, r0
 800b5b4:	429e      	cmp	r6, r3
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	4690      	mov	r8, r2
 800b5ba:	461f      	mov	r7, r3
 800b5bc:	d838      	bhi.n	800b630 <__ssputs_r+0x84>
 800b5be:	898a      	ldrh	r2, [r1, #12]
 800b5c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5c4:	d032      	beq.n	800b62c <__ssputs_r+0x80>
 800b5c6:	6825      	ldr	r5, [r4, #0]
 800b5c8:	6909      	ldr	r1, [r1, #16]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	eba5 0901 	sub.w	r9, r5, r1
 800b5d0:	6965      	ldr	r5, [r4, #20]
 800b5d2:	444b      	add	r3, r9
 800b5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5dc:	106d      	asrs	r5, r5, #1
 800b5de:	429d      	cmp	r5, r3
 800b5e0:	bf38      	it	cc
 800b5e2:	461d      	movcc	r5, r3
 800b5e4:	0553      	lsls	r3, r2, #21
 800b5e6:	d531      	bpl.n	800b64c <__ssputs_r+0xa0>
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7ff ff85 	bl	800b4f8 <_malloc_r>
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	b950      	cbnz	r0, 800b608 <__ssputs_r+0x5c>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5f8:	f8ca 3000 	str.w	r3, [sl]
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b608:	464a      	mov	r2, r9
 800b60a:	6921      	ldr	r1, [r4, #16]
 800b60c:	f7ff fa54 	bl	800aab8 <memcpy>
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	6126      	str	r6, [r4, #16]
 800b61e:	444e      	add	r6, r9
 800b620:	6026      	str	r6, [r4, #0]
 800b622:	463e      	mov	r6, r7
 800b624:	6165      	str	r5, [r4, #20]
 800b626:	eba5 0509 	sub.w	r5, r5, r9
 800b62a:	60a5      	str	r5, [r4, #8]
 800b62c:	42be      	cmp	r6, r7
 800b62e:	d900      	bls.n	800b632 <__ssputs_r+0x86>
 800b630:	463e      	mov	r6, r7
 800b632:	4632      	mov	r2, r6
 800b634:	4641      	mov	r1, r8
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	f000 f97a 	bl	800b930 <memmove>
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	6822      	ldr	r2, [r4, #0]
 800b640:	1b9b      	subs	r3, r3, r6
 800b642:	4432      	add	r2, r6
 800b644:	2000      	movs	r0, #0
 800b646:	60a3      	str	r3, [r4, #8]
 800b648:	6022      	str	r2, [r4, #0]
 800b64a:	e7db      	b.n	800b604 <__ssputs_r+0x58>
 800b64c:	462a      	mov	r2, r5
 800b64e:	f000 f995 	bl	800b97c <_realloc_r>
 800b652:	4606      	mov	r6, r0
 800b654:	2800      	cmp	r0, #0
 800b656:	d1e1      	bne.n	800b61c <__ssputs_r+0x70>
 800b658:	4650      	mov	r0, sl
 800b65a:	6921      	ldr	r1, [r4, #16]
 800b65c:	f7ff ff00 	bl	800b460 <_free_r>
 800b660:	e7c7      	b.n	800b5f2 <__ssputs_r+0x46>
	...

0800b664 <_svfiprintf_r>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	4698      	mov	r8, r3
 800b66a:	898b      	ldrh	r3, [r1, #12]
 800b66c:	4607      	mov	r7, r0
 800b66e:	061b      	lsls	r3, r3, #24
 800b670:	460d      	mov	r5, r1
 800b672:	4614      	mov	r4, r2
 800b674:	b09d      	sub	sp, #116	; 0x74
 800b676:	d50e      	bpl.n	800b696 <_svfiprintf_r+0x32>
 800b678:	690b      	ldr	r3, [r1, #16]
 800b67a:	b963      	cbnz	r3, 800b696 <_svfiprintf_r+0x32>
 800b67c:	2140      	movs	r1, #64	; 0x40
 800b67e:	f7ff ff3b 	bl	800b4f8 <_malloc_r>
 800b682:	6028      	str	r0, [r5, #0]
 800b684:	6128      	str	r0, [r5, #16]
 800b686:	b920      	cbnz	r0, 800b692 <_svfiprintf_r+0x2e>
 800b688:	230c      	movs	r3, #12
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b690:	e0d1      	b.n	800b836 <_svfiprintf_r+0x1d2>
 800b692:	2340      	movs	r3, #64	; 0x40
 800b694:	616b      	str	r3, [r5, #20]
 800b696:	2300      	movs	r3, #0
 800b698:	9309      	str	r3, [sp, #36]	; 0x24
 800b69a:	2320      	movs	r3, #32
 800b69c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6a0:	2330      	movs	r3, #48	; 0x30
 800b6a2:	f04f 0901 	mov.w	r9, #1
 800b6a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b850 <_svfiprintf_r+0x1ec>
 800b6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6b2:	4623      	mov	r3, r4
 800b6b4:	469a      	mov	sl, r3
 800b6b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ba:	b10a      	cbz	r2, 800b6c0 <_svfiprintf_r+0x5c>
 800b6bc:	2a25      	cmp	r2, #37	; 0x25
 800b6be:	d1f9      	bne.n	800b6b4 <_svfiprintf_r+0x50>
 800b6c0:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c4:	d00b      	beq.n	800b6de <_svfiprintf_r+0x7a>
 800b6c6:	465b      	mov	r3, fp
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	f7ff ff6d 	bl	800b5ac <__ssputs_r>
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	f000 80aa 	beq.w	800b82c <_svfiprintf_r+0x1c8>
 800b6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6da:	445a      	add	r2, fp
 800b6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6de:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 80a2 	beq.w	800b82c <_svfiprintf_r+0x1c8>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f2:	f10a 0a01 	add.w	sl, sl, #1
 800b6f6:	9304      	str	r3, [sp, #16]
 800b6f8:	9307      	str	r3, [sp, #28]
 800b6fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b700:	4654      	mov	r4, sl
 800b702:	2205      	movs	r2, #5
 800b704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b708:	4851      	ldr	r0, [pc, #324]	; (800b850 <_svfiprintf_r+0x1ec>)
 800b70a:	f7ff f9c7 	bl	800aa9c <memchr>
 800b70e:	9a04      	ldr	r2, [sp, #16]
 800b710:	b9d8      	cbnz	r0, 800b74a <_svfiprintf_r+0xe6>
 800b712:	06d0      	lsls	r0, r2, #27
 800b714:	bf44      	itt	mi
 800b716:	2320      	movmi	r3, #32
 800b718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b71c:	0711      	lsls	r1, r2, #28
 800b71e:	bf44      	itt	mi
 800b720:	232b      	movmi	r3, #43	; 0x2b
 800b722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b726:	f89a 3000 	ldrb.w	r3, [sl]
 800b72a:	2b2a      	cmp	r3, #42	; 0x2a
 800b72c:	d015      	beq.n	800b75a <_svfiprintf_r+0xf6>
 800b72e:	4654      	mov	r4, sl
 800b730:	2000      	movs	r0, #0
 800b732:	f04f 0c0a 	mov.w	ip, #10
 800b736:	9a07      	ldr	r2, [sp, #28]
 800b738:	4621      	mov	r1, r4
 800b73a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b73e:	3b30      	subs	r3, #48	; 0x30
 800b740:	2b09      	cmp	r3, #9
 800b742:	d94e      	bls.n	800b7e2 <_svfiprintf_r+0x17e>
 800b744:	b1b0      	cbz	r0, 800b774 <_svfiprintf_r+0x110>
 800b746:	9207      	str	r2, [sp, #28]
 800b748:	e014      	b.n	800b774 <_svfiprintf_r+0x110>
 800b74a:	eba0 0308 	sub.w	r3, r0, r8
 800b74e:	fa09 f303 	lsl.w	r3, r9, r3
 800b752:	4313      	orrs	r3, r2
 800b754:	46a2      	mov	sl, r4
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	e7d2      	b.n	800b700 <_svfiprintf_r+0x9c>
 800b75a:	9b03      	ldr	r3, [sp, #12]
 800b75c:	1d19      	adds	r1, r3, #4
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	9103      	str	r1, [sp, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	bfbb      	ittet	lt
 800b766:	425b      	neglt	r3, r3
 800b768:	f042 0202 	orrlt.w	r2, r2, #2
 800b76c:	9307      	strge	r3, [sp, #28]
 800b76e:	9307      	strlt	r3, [sp, #28]
 800b770:	bfb8      	it	lt
 800b772:	9204      	strlt	r2, [sp, #16]
 800b774:	7823      	ldrb	r3, [r4, #0]
 800b776:	2b2e      	cmp	r3, #46	; 0x2e
 800b778:	d10c      	bne.n	800b794 <_svfiprintf_r+0x130>
 800b77a:	7863      	ldrb	r3, [r4, #1]
 800b77c:	2b2a      	cmp	r3, #42	; 0x2a
 800b77e:	d135      	bne.n	800b7ec <_svfiprintf_r+0x188>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	3402      	adds	r4, #2
 800b784:	1d1a      	adds	r2, r3, #4
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	9203      	str	r2, [sp, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	bfb8      	it	lt
 800b78e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b860 <_svfiprintf_r+0x1fc>
 800b798:	2203      	movs	r2, #3
 800b79a:	4650      	mov	r0, sl
 800b79c:	7821      	ldrb	r1, [r4, #0]
 800b79e:	f7ff f97d 	bl	800aa9c <memchr>
 800b7a2:	b140      	cbz	r0, 800b7b6 <_svfiprintf_r+0x152>
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	eba0 000a 	sub.w	r0, r0, sl
 800b7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	3401      	adds	r4, #1
 800b7b2:	4303      	orrs	r3, r0
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ba:	2206      	movs	r2, #6
 800b7bc:	4825      	ldr	r0, [pc, #148]	; (800b854 <_svfiprintf_r+0x1f0>)
 800b7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7c2:	f7ff f96b 	bl	800aa9c <memchr>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d038      	beq.n	800b83c <_svfiprintf_r+0x1d8>
 800b7ca:	4b23      	ldr	r3, [pc, #140]	; (800b858 <_svfiprintf_r+0x1f4>)
 800b7cc:	bb1b      	cbnz	r3, 800b816 <_svfiprintf_r+0x1b2>
 800b7ce:	9b03      	ldr	r3, [sp, #12]
 800b7d0:	3307      	adds	r3, #7
 800b7d2:	f023 0307 	bic.w	r3, r3, #7
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	9303      	str	r3, [sp, #12]
 800b7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7dc:	4433      	add	r3, r6
 800b7de:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e0:	e767      	b.n	800b6b2 <_svfiprintf_r+0x4e>
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ea:	e7a5      	b.n	800b738 <_svfiprintf_r+0xd4>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f04f 0c0a 	mov.w	ip, #10
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	3401      	adds	r4, #1
 800b7f6:	9305      	str	r3, [sp, #20]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7fe:	3a30      	subs	r2, #48	; 0x30
 800b800:	2a09      	cmp	r2, #9
 800b802:	d903      	bls.n	800b80c <_svfiprintf_r+0x1a8>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d0c5      	beq.n	800b794 <_svfiprintf_r+0x130>
 800b808:	9105      	str	r1, [sp, #20]
 800b80a:	e7c3      	b.n	800b794 <_svfiprintf_r+0x130>
 800b80c:	4604      	mov	r4, r0
 800b80e:	2301      	movs	r3, #1
 800b810:	fb0c 2101 	mla	r1, ip, r1, r2
 800b814:	e7f0      	b.n	800b7f8 <_svfiprintf_r+0x194>
 800b816:	ab03      	add	r3, sp, #12
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	462a      	mov	r2, r5
 800b81c:	4638      	mov	r0, r7
 800b81e:	4b0f      	ldr	r3, [pc, #60]	; (800b85c <_svfiprintf_r+0x1f8>)
 800b820:	a904      	add	r1, sp, #16
 800b822:	f7fc fc8b 	bl	800813c <_printf_float>
 800b826:	1c42      	adds	r2, r0, #1
 800b828:	4606      	mov	r6, r0
 800b82a:	d1d6      	bne.n	800b7da <_svfiprintf_r+0x176>
 800b82c:	89ab      	ldrh	r3, [r5, #12]
 800b82e:	065b      	lsls	r3, r3, #25
 800b830:	f53f af2c 	bmi.w	800b68c <_svfiprintf_r+0x28>
 800b834:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b836:	b01d      	add	sp, #116	; 0x74
 800b838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83c:	ab03      	add	r3, sp, #12
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	462a      	mov	r2, r5
 800b842:	4638      	mov	r0, r7
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <_svfiprintf_r+0x1f8>)
 800b846:	a904      	add	r1, sp, #16
 800b848:	f7fc ff14 	bl	8008674 <_printf_i>
 800b84c:	e7eb      	b.n	800b826 <_svfiprintf_r+0x1c2>
 800b84e:	bf00      	nop
 800b850:	0800d054 	.word	0x0800d054
 800b854:	0800d05e 	.word	0x0800d05e
 800b858:	0800813d 	.word	0x0800813d
 800b85c:	0800b5ad 	.word	0x0800b5ad
 800b860:	0800d05a 	.word	0x0800d05a

0800b864 <nan>:
 800b864:	2000      	movs	r0, #0
 800b866:	4901      	ldr	r1, [pc, #4]	; (800b86c <nan+0x8>)
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	7ff80000 	.word	0x7ff80000

0800b870 <_sbrk_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	2300      	movs	r3, #0
 800b874:	4d05      	ldr	r5, [pc, #20]	; (800b88c <_sbrk_r+0x1c>)
 800b876:	4604      	mov	r4, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	602b      	str	r3, [r5, #0]
 800b87c:	f7f8 fc30 	bl	80040e0 <_sbrk>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_sbrk_r+0x1a>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_sbrk_r+0x1a>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	20000818 	.word	0x20000818

0800b890 <strncmp>:
 800b890:	b510      	push	{r4, lr}
 800b892:	b16a      	cbz	r2, 800b8b0 <strncmp+0x20>
 800b894:	3901      	subs	r1, #1
 800b896:	1884      	adds	r4, r0, r2
 800b898:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b89c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d103      	bne.n	800b8ac <strncmp+0x1c>
 800b8a4:	42a0      	cmp	r0, r4
 800b8a6:	d001      	beq.n	800b8ac <strncmp+0x1c>
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1f5      	bne.n	800b898 <strncmp+0x8>
 800b8ac:	1a98      	subs	r0, r3, r2
 800b8ae:	bd10      	pop	{r4, pc}
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	e7fc      	b.n	800b8ae <strncmp+0x1e>

0800b8b4 <__ascii_wctomb>:
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	b141      	cbz	r1, 800b8cc <__ascii_wctomb+0x18>
 800b8ba:	2aff      	cmp	r2, #255	; 0xff
 800b8bc:	d904      	bls.n	800b8c8 <__ascii_wctomb+0x14>
 800b8be:	228a      	movs	r2, #138	; 0x8a
 800b8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	4770      	bx	lr
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	700a      	strb	r2, [r1, #0]
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <__assert_func>:
 800b8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8d2:	4614      	mov	r4, r2
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	4b09      	ldr	r3, [pc, #36]	; (800b8fc <__assert_func+0x2c>)
 800b8d8:	4605      	mov	r5, r0
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68d8      	ldr	r0, [r3, #12]
 800b8de:	b14c      	cbz	r4, 800b8f4 <__assert_func+0x24>
 800b8e0:	4b07      	ldr	r3, [pc, #28]	; (800b900 <__assert_func+0x30>)
 800b8e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8e6:	9100      	str	r1, [sp, #0]
 800b8e8:	462b      	mov	r3, r5
 800b8ea:	4906      	ldr	r1, [pc, #24]	; (800b904 <__assert_func+0x34>)
 800b8ec:	f000 f80e 	bl	800b90c <fiprintf>
 800b8f0:	f000 fa82 	bl	800bdf8 <abort>
 800b8f4:	4b04      	ldr	r3, [pc, #16]	; (800b908 <__assert_func+0x38>)
 800b8f6:	461c      	mov	r4, r3
 800b8f8:	e7f3      	b.n	800b8e2 <__assert_func+0x12>
 800b8fa:	bf00      	nop
 800b8fc:	200001d4 	.word	0x200001d4
 800b900:	0800d065 	.word	0x0800d065
 800b904:	0800d072 	.word	0x0800d072
 800b908:	0800d0a0 	.word	0x0800d0a0

0800b90c <fiprintf>:
 800b90c:	b40e      	push	{r1, r2, r3}
 800b90e:	b503      	push	{r0, r1, lr}
 800b910:	4601      	mov	r1, r0
 800b912:	ab03      	add	r3, sp, #12
 800b914:	4805      	ldr	r0, [pc, #20]	; (800b92c <fiprintf+0x20>)
 800b916:	f853 2b04 	ldr.w	r2, [r3], #4
 800b91a:	6800      	ldr	r0, [r0, #0]
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	f000 f87b 	bl	800ba18 <_vfiprintf_r>
 800b922:	b002      	add	sp, #8
 800b924:	f85d eb04 	ldr.w	lr, [sp], #4
 800b928:	b003      	add	sp, #12
 800b92a:	4770      	bx	lr
 800b92c:	200001d4 	.word	0x200001d4

0800b930 <memmove>:
 800b930:	4288      	cmp	r0, r1
 800b932:	b510      	push	{r4, lr}
 800b934:	eb01 0402 	add.w	r4, r1, r2
 800b938:	d902      	bls.n	800b940 <memmove+0x10>
 800b93a:	4284      	cmp	r4, r0
 800b93c:	4623      	mov	r3, r4
 800b93e:	d807      	bhi.n	800b950 <memmove+0x20>
 800b940:	1e43      	subs	r3, r0, #1
 800b942:	42a1      	cmp	r1, r4
 800b944:	d008      	beq.n	800b958 <memmove+0x28>
 800b946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b94e:	e7f8      	b.n	800b942 <memmove+0x12>
 800b950:	4601      	mov	r1, r0
 800b952:	4402      	add	r2, r0
 800b954:	428a      	cmp	r2, r1
 800b956:	d100      	bne.n	800b95a <memmove+0x2a>
 800b958:	bd10      	pop	{r4, pc}
 800b95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b962:	e7f7      	b.n	800b954 <memmove+0x24>

0800b964 <__malloc_lock>:
 800b964:	4801      	ldr	r0, [pc, #4]	; (800b96c <__malloc_lock+0x8>)
 800b966:	f000 bc07 	b.w	800c178 <__retarget_lock_acquire_recursive>
 800b96a:	bf00      	nop
 800b96c:	20000820 	.word	0x20000820

0800b970 <__malloc_unlock>:
 800b970:	4801      	ldr	r0, [pc, #4]	; (800b978 <__malloc_unlock+0x8>)
 800b972:	f000 bc02 	b.w	800c17a <__retarget_lock_release_recursive>
 800b976:	bf00      	nop
 800b978:	20000820 	.word	0x20000820

0800b97c <_realloc_r>:
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97e:	4607      	mov	r7, r0
 800b980:	4614      	mov	r4, r2
 800b982:	460e      	mov	r6, r1
 800b984:	b921      	cbnz	r1, 800b990 <_realloc_r+0x14>
 800b986:	4611      	mov	r1, r2
 800b988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b98c:	f7ff bdb4 	b.w	800b4f8 <_malloc_r>
 800b990:	b922      	cbnz	r2, 800b99c <_realloc_r+0x20>
 800b992:	f7ff fd65 	bl	800b460 <_free_r>
 800b996:	4625      	mov	r5, r4
 800b998:	4628      	mov	r0, r5
 800b99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b99c:	f000 fc52 	bl	800c244 <_malloc_usable_size_r>
 800b9a0:	42a0      	cmp	r0, r4
 800b9a2:	d20f      	bcs.n	800b9c4 <_realloc_r+0x48>
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	f7ff fda6 	bl	800b4f8 <_malloc_r>
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0f2      	beq.n	800b998 <_realloc_r+0x1c>
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	f7ff f87f 	bl	800aab8 <memcpy>
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7ff fd4f 	bl	800b460 <_free_r>
 800b9c2:	e7e9      	b.n	800b998 <_realloc_r+0x1c>
 800b9c4:	4635      	mov	r5, r6
 800b9c6:	e7e7      	b.n	800b998 <_realloc_r+0x1c>

0800b9c8 <__sfputc_r>:
 800b9c8:	6893      	ldr	r3, [r2, #8]
 800b9ca:	b410      	push	{r4}
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	6093      	str	r3, [r2, #8]
 800b9d2:	da07      	bge.n	800b9e4 <__sfputc_r+0x1c>
 800b9d4:	6994      	ldr	r4, [r2, #24]
 800b9d6:	42a3      	cmp	r3, r4
 800b9d8:	db01      	blt.n	800b9de <__sfputc_r+0x16>
 800b9da:	290a      	cmp	r1, #10
 800b9dc:	d102      	bne.n	800b9e4 <__sfputc_r+0x1c>
 800b9de:	bc10      	pop	{r4}
 800b9e0:	f000 b94a 	b.w	800bc78 <__swbuf_r>
 800b9e4:	6813      	ldr	r3, [r2, #0]
 800b9e6:	1c58      	adds	r0, r3, #1
 800b9e8:	6010      	str	r0, [r2, #0]
 800b9ea:	7019      	strb	r1, [r3, #0]
 800b9ec:	4608      	mov	r0, r1
 800b9ee:	bc10      	pop	{r4}
 800b9f0:	4770      	bx	lr

0800b9f2 <__sfputs_r>:
 800b9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f4:	4606      	mov	r6, r0
 800b9f6:	460f      	mov	r7, r1
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	18d5      	adds	r5, r2, r3
 800b9fc:	42ac      	cmp	r4, r5
 800b9fe:	d101      	bne.n	800ba04 <__sfputs_r+0x12>
 800ba00:	2000      	movs	r0, #0
 800ba02:	e007      	b.n	800ba14 <__sfputs_r+0x22>
 800ba04:	463a      	mov	r2, r7
 800ba06:	4630      	mov	r0, r6
 800ba08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0c:	f7ff ffdc 	bl	800b9c8 <__sfputc_r>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d1f3      	bne.n	800b9fc <__sfputs_r+0xa>
 800ba14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba18 <_vfiprintf_r>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	4614      	mov	r4, r2
 800ba20:	4698      	mov	r8, r3
 800ba22:	4606      	mov	r6, r0
 800ba24:	b09d      	sub	sp, #116	; 0x74
 800ba26:	b118      	cbz	r0, 800ba30 <_vfiprintf_r+0x18>
 800ba28:	6983      	ldr	r3, [r0, #24]
 800ba2a:	b90b      	cbnz	r3, 800ba30 <_vfiprintf_r+0x18>
 800ba2c:	f000 fb06 	bl	800c03c <__sinit>
 800ba30:	4b89      	ldr	r3, [pc, #548]	; (800bc58 <_vfiprintf_r+0x240>)
 800ba32:	429d      	cmp	r5, r3
 800ba34:	d11b      	bne.n	800ba6e <_vfiprintf_r+0x56>
 800ba36:	6875      	ldr	r5, [r6, #4]
 800ba38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba3a:	07d9      	lsls	r1, r3, #31
 800ba3c:	d405      	bmi.n	800ba4a <_vfiprintf_r+0x32>
 800ba3e:	89ab      	ldrh	r3, [r5, #12]
 800ba40:	059a      	lsls	r2, r3, #22
 800ba42:	d402      	bmi.n	800ba4a <_vfiprintf_r+0x32>
 800ba44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba46:	f000 fb97 	bl	800c178 <__retarget_lock_acquire_recursive>
 800ba4a:	89ab      	ldrh	r3, [r5, #12]
 800ba4c:	071b      	lsls	r3, r3, #28
 800ba4e:	d501      	bpl.n	800ba54 <_vfiprintf_r+0x3c>
 800ba50:	692b      	ldr	r3, [r5, #16]
 800ba52:	b9eb      	cbnz	r3, 800ba90 <_vfiprintf_r+0x78>
 800ba54:	4629      	mov	r1, r5
 800ba56:	4630      	mov	r0, r6
 800ba58:	f000 f960 	bl	800bd1c <__swsetup_r>
 800ba5c:	b1c0      	cbz	r0, 800ba90 <_vfiprintf_r+0x78>
 800ba5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba60:	07dc      	lsls	r4, r3, #31
 800ba62:	d50e      	bpl.n	800ba82 <_vfiprintf_r+0x6a>
 800ba64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba68:	b01d      	add	sp, #116	; 0x74
 800ba6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6e:	4b7b      	ldr	r3, [pc, #492]	; (800bc5c <_vfiprintf_r+0x244>)
 800ba70:	429d      	cmp	r5, r3
 800ba72:	d101      	bne.n	800ba78 <_vfiprintf_r+0x60>
 800ba74:	68b5      	ldr	r5, [r6, #8]
 800ba76:	e7df      	b.n	800ba38 <_vfiprintf_r+0x20>
 800ba78:	4b79      	ldr	r3, [pc, #484]	; (800bc60 <_vfiprintf_r+0x248>)
 800ba7a:	429d      	cmp	r5, r3
 800ba7c:	bf08      	it	eq
 800ba7e:	68f5      	ldreq	r5, [r6, #12]
 800ba80:	e7da      	b.n	800ba38 <_vfiprintf_r+0x20>
 800ba82:	89ab      	ldrh	r3, [r5, #12]
 800ba84:	0598      	lsls	r0, r3, #22
 800ba86:	d4ed      	bmi.n	800ba64 <_vfiprintf_r+0x4c>
 800ba88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba8a:	f000 fb76 	bl	800c17a <__retarget_lock_release_recursive>
 800ba8e:	e7e9      	b.n	800ba64 <_vfiprintf_r+0x4c>
 800ba90:	2300      	movs	r3, #0
 800ba92:	9309      	str	r3, [sp, #36]	; 0x24
 800ba94:	2320      	movs	r3, #32
 800ba96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba9a:	2330      	movs	r3, #48	; 0x30
 800ba9c:	f04f 0901 	mov.w	r9, #1
 800baa0:	f8cd 800c 	str.w	r8, [sp, #12]
 800baa4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bc64 <_vfiprintf_r+0x24c>
 800baa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baac:	4623      	mov	r3, r4
 800baae:	469a      	mov	sl, r3
 800bab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bab4:	b10a      	cbz	r2, 800baba <_vfiprintf_r+0xa2>
 800bab6:	2a25      	cmp	r2, #37	; 0x25
 800bab8:	d1f9      	bne.n	800baae <_vfiprintf_r+0x96>
 800baba:	ebba 0b04 	subs.w	fp, sl, r4
 800babe:	d00b      	beq.n	800bad8 <_vfiprintf_r+0xc0>
 800bac0:	465b      	mov	r3, fp
 800bac2:	4622      	mov	r2, r4
 800bac4:	4629      	mov	r1, r5
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7ff ff93 	bl	800b9f2 <__sfputs_r>
 800bacc:	3001      	adds	r0, #1
 800bace:	f000 80aa 	beq.w	800bc26 <_vfiprintf_r+0x20e>
 800bad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad4:	445a      	add	r2, fp
 800bad6:	9209      	str	r2, [sp, #36]	; 0x24
 800bad8:	f89a 3000 	ldrb.w	r3, [sl]
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 80a2 	beq.w	800bc26 <_vfiprintf_r+0x20e>
 800bae2:	2300      	movs	r3, #0
 800bae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baec:	f10a 0a01 	add.w	sl, sl, #1
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	9307      	str	r3, [sp, #28]
 800baf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baf8:	931a      	str	r3, [sp, #104]	; 0x68
 800bafa:	4654      	mov	r4, sl
 800bafc:	2205      	movs	r2, #5
 800bafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb02:	4858      	ldr	r0, [pc, #352]	; (800bc64 <_vfiprintf_r+0x24c>)
 800bb04:	f7fe ffca 	bl	800aa9c <memchr>
 800bb08:	9a04      	ldr	r2, [sp, #16]
 800bb0a:	b9d8      	cbnz	r0, 800bb44 <_vfiprintf_r+0x12c>
 800bb0c:	06d1      	lsls	r1, r2, #27
 800bb0e:	bf44      	itt	mi
 800bb10:	2320      	movmi	r3, #32
 800bb12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb16:	0713      	lsls	r3, r2, #28
 800bb18:	bf44      	itt	mi
 800bb1a:	232b      	movmi	r3, #43	; 0x2b
 800bb1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb20:	f89a 3000 	ldrb.w	r3, [sl]
 800bb24:	2b2a      	cmp	r3, #42	; 0x2a
 800bb26:	d015      	beq.n	800bb54 <_vfiprintf_r+0x13c>
 800bb28:	4654      	mov	r4, sl
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	f04f 0c0a 	mov.w	ip, #10
 800bb30:	9a07      	ldr	r2, [sp, #28]
 800bb32:	4621      	mov	r1, r4
 800bb34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb38:	3b30      	subs	r3, #48	; 0x30
 800bb3a:	2b09      	cmp	r3, #9
 800bb3c:	d94e      	bls.n	800bbdc <_vfiprintf_r+0x1c4>
 800bb3e:	b1b0      	cbz	r0, 800bb6e <_vfiprintf_r+0x156>
 800bb40:	9207      	str	r2, [sp, #28]
 800bb42:	e014      	b.n	800bb6e <_vfiprintf_r+0x156>
 800bb44:	eba0 0308 	sub.w	r3, r0, r8
 800bb48:	fa09 f303 	lsl.w	r3, r9, r3
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	46a2      	mov	sl, r4
 800bb50:	9304      	str	r3, [sp, #16]
 800bb52:	e7d2      	b.n	800bafa <_vfiprintf_r+0xe2>
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	1d19      	adds	r1, r3, #4
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	9103      	str	r1, [sp, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	bfbb      	ittet	lt
 800bb60:	425b      	neglt	r3, r3
 800bb62:	f042 0202 	orrlt.w	r2, r2, #2
 800bb66:	9307      	strge	r3, [sp, #28]
 800bb68:	9307      	strlt	r3, [sp, #28]
 800bb6a:	bfb8      	it	lt
 800bb6c:	9204      	strlt	r2, [sp, #16]
 800bb6e:	7823      	ldrb	r3, [r4, #0]
 800bb70:	2b2e      	cmp	r3, #46	; 0x2e
 800bb72:	d10c      	bne.n	800bb8e <_vfiprintf_r+0x176>
 800bb74:	7863      	ldrb	r3, [r4, #1]
 800bb76:	2b2a      	cmp	r3, #42	; 0x2a
 800bb78:	d135      	bne.n	800bbe6 <_vfiprintf_r+0x1ce>
 800bb7a:	9b03      	ldr	r3, [sp, #12]
 800bb7c:	3402      	adds	r4, #2
 800bb7e:	1d1a      	adds	r2, r3, #4
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	9203      	str	r2, [sp, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bfb8      	it	lt
 800bb88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb8c:	9305      	str	r3, [sp, #20]
 800bb8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc74 <_vfiprintf_r+0x25c>
 800bb92:	2203      	movs	r2, #3
 800bb94:	4650      	mov	r0, sl
 800bb96:	7821      	ldrb	r1, [r4, #0]
 800bb98:	f7fe ff80 	bl	800aa9c <memchr>
 800bb9c:	b140      	cbz	r0, 800bbb0 <_vfiprintf_r+0x198>
 800bb9e:	2340      	movs	r3, #64	; 0x40
 800bba0:	eba0 000a 	sub.w	r0, r0, sl
 800bba4:	fa03 f000 	lsl.w	r0, r3, r0
 800bba8:	9b04      	ldr	r3, [sp, #16]
 800bbaa:	3401      	adds	r4, #1
 800bbac:	4303      	orrs	r3, r0
 800bbae:	9304      	str	r3, [sp, #16]
 800bbb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb4:	2206      	movs	r2, #6
 800bbb6:	482c      	ldr	r0, [pc, #176]	; (800bc68 <_vfiprintf_r+0x250>)
 800bbb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbbc:	f7fe ff6e 	bl	800aa9c <memchr>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d03f      	beq.n	800bc44 <_vfiprintf_r+0x22c>
 800bbc4:	4b29      	ldr	r3, [pc, #164]	; (800bc6c <_vfiprintf_r+0x254>)
 800bbc6:	bb1b      	cbnz	r3, 800bc10 <_vfiprintf_r+0x1f8>
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	3307      	adds	r3, #7
 800bbcc:	f023 0307 	bic.w	r3, r3, #7
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	9303      	str	r3, [sp, #12]
 800bbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd6:	443b      	add	r3, r7
 800bbd8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbda:	e767      	b.n	800baac <_vfiprintf_r+0x94>
 800bbdc:	460c      	mov	r4, r1
 800bbde:	2001      	movs	r0, #1
 800bbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbe4:	e7a5      	b.n	800bb32 <_vfiprintf_r+0x11a>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f04f 0c0a 	mov.w	ip, #10
 800bbec:	4619      	mov	r1, r3
 800bbee:	3401      	adds	r4, #1
 800bbf0:	9305      	str	r3, [sp, #20]
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf8:	3a30      	subs	r2, #48	; 0x30
 800bbfa:	2a09      	cmp	r2, #9
 800bbfc:	d903      	bls.n	800bc06 <_vfiprintf_r+0x1ee>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0c5      	beq.n	800bb8e <_vfiprintf_r+0x176>
 800bc02:	9105      	str	r1, [sp, #20]
 800bc04:	e7c3      	b.n	800bb8e <_vfiprintf_r+0x176>
 800bc06:	4604      	mov	r4, r0
 800bc08:	2301      	movs	r3, #1
 800bc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc0e:	e7f0      	b.n	800bbf2 <_vfiprintf_r+0x1da>
 800bc10:	ab03      	add	r3, sp, #12
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	462a      	mov	r2, r5
 800bc16:	4630      	mov	r0, r6
 800bc18:	4b15      	ldr	r3, [pc, #84]	; (800bc70 <_vfiprintf_r+0x258>)
 800bc1a:	a904      	add	r1, sp, #16
 800bc1c:	f7fc fa8e 	bl	800813c <_printf_float>
 800bc20:	4607      	mov	r7, r0
 800bc22:	1c78      	adds	r0, r7, #1
 800bc24:	d1d6      	bne.n	800bbd4 <_vfiprintf_r+0x1bc>
 800bc26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc28:	07d9      	lsls	r1, r3, #31
 800bc2a:	d405      	bmi.n	800bc38 <_vfiprintf_r+0x220>
 800bc2c:	89ab      	ldrh	r3, [r5, #12]
 800bc2e:	059a      	lsls	r2, r3, #22
 800bc30:	d402      	bmi.n	800bc38 <_vfiprintf_r+0x220>
 800bc32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc34:	f000 faa1 	bl	800c17a <__retarget_lock_release_recursive>
 800bc38:	89ab      	ldrh	r3, [r5, #12]
 800bc3a:	065b      	lsls	r3, r3, #25
 800bc3c:	f53f af12 	bmi.w	800ba64 <_vfiprintf_r+0x4c>
 800bc40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc42:	e711      	b.n	800ba68 <_vfiprintf_r+0x50>
 800bc44:	ab03      	add	r3, sp, #12
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	462a      	mov	r2, r5
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4b08      	ldr	r3, [pc, #32]	; (800bc70 <_vfiprintf_r+0x258>)
 800bc4e:	a904      	add	r1, sp, #16
 800bc50:	f7fc fd10 	bl	8008674 <_printf_i>
 800bc54:	e7e4      	b.n	800bc20 <_vfiprintf_r+0x208>
 800bc56:	bf00      	nop
 800bc58:	0800d0c4 	.word	0x0800d0c4
 800bc5c:	0800d0e4 	.word	0x0800d0e4
 800bc60:	0800d0a4 	.word	0x0800d0a4
 800bc64:	0800d054 	.word	0x0800d054
 800bc68:	0800d05e 	.word	0x0800d05e
 800bc6c:	0800813d 	.word	0x0800813d
 800bc70:	0800b9f3 	.word	0x0800b9f3
 800bc74:	0800d05a 	.word	0x0800d05a

0800bc78 <__swbuf_r>:
 800bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7a:	460e      	mov	r6, r1
 800bc7c:	4614      	mov	r4, r2
 800bc7e:	4605      	mov	r5, r0
 800bc80:	b118      	cbz	r0, 800bc8a <__swbuf_r+0x12>
 800bc82:	6983      	ldr	r3, [r0, #24]
 800bc84:	b90b      	cbnz	r3, 800bc8a <__swbuf_r+0x12>
 800bc86:	f000 f9d9 	bl	800c03c <__sinit>
 800bc8a:	4b21      	ldr	r3, [pc, #132]	; (800bd10 <__swbuf_r+0x98>)
 800bc8c:	429c      	cmp	r4, r3
 800bc8e:	d12b      	bne.n	800bce8 <__swbuf_r+0x70>
 800bc90:	686c      	ldr	r4, [r5, #4]
 800bc92:	69a3      	ldr	r3, [r4, #24]
 800bc94:	60a3      	str	r3, [r4, #8]
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	071a      	lsls	r2, r3, #28
 800bc9a:	d52f      	bpl.n	800bcfc <__swbuf_r+0x84>
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	b36b      	cbz	r3, 800bcfc <__swbuf_r+0x84>
 800bca0:	6923      	ldr	r3, [r4, #16]
 800bca2:	6820      	ldr	r0, [r4, #0]
 800bca4:	b2f6      	uxtb	r6, r6
 800bca6:	1ac0      	subs	r0, r0, r3
 800bca8:	6963      	ldr	r3, [r4, #20]
 800bcaa:	4637      	mov	r7, r6
 800bcac:	4283      	cmp	r3, r0
 800bcae:	dc04      	bgt.n	800bcba <__swbuf_r+0x42>
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 f92e 	bl	800bf14 <_fflush_r>
 800bcb8:	bb30      	cbnz	r0, 800bd08 <__swbuf_r+0x90>
 800bcba:	68a3      	ldr	r3, [r4, #8]
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	60a3      	str	r3, [r4, #8]
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	6022      	str	r2, [r4, #0]
 800bcc8:	701e      	strb	r6, [r3, #0]
 800bcca:	6963      	ldr	r3, [r4, #20]
 800bccc:	4283      	cmp	r3, r0
 800bcce:	d004      	beq.n	800bcda <__swbuf_r+0x62>
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	07db      	lsls	r3, r3, #31
 800bcd4:	d506      	bpl.n	800bce4 <__swbuf_r+0x6c>
 800bcd6:	2e0a      	cmp	r6, #10
 800bcd8:	d104      	bne.n	800bce4 <__swbuf_r+0x6c>
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f000 f919 	bl	800bf14 <_fflush_r>
 800bce2:	b988      	cbnz	r0, 800bd08 <__swbuf_r+0x90>
 800bce4:	4638      	mov	r0, r7
 800bce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce8:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <__swbuf_r+0x9c>)
 800bcea:	429c      	cmp	r4, r3
 800bcec:	d101      	bne.n	800bcf2 <__swbuf_r+0x7a>
 800bcee:	68ac      	ldr	r4, [r5, #8]
 800bcf0:	e7cf      	b.n	800bc92 <__swbuf_r+0x1a>
 800bcf2:	4b09      	ldr	r3, [pc, #36]	; (800bd18 <__swbuf_r+0xa0>)
 800bcf4:	429c      	cmp	r4, r3
 800bcf6:	bf08      	it	eq
 800bcf8:	68ec      	ldreq	r4, [r5, #12]
 800bcfa:	e7ca      	b.n	800bc92 <__swbuf_r+0x1a>
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f000 f80c 	bl	800bd1c <__swsetup_r>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d0cb      	beq.n	800bca0 <__swbuf_r+0x28>
 800bd08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bd0c:	e7ea      	b.n	800bce4 <__swbuf_r+0x6c>
 800bd0e:	bf00      	nop
 800bd10:	0800d0c4 	.word	0x0800d0c4
 800bd14:	0800d0e4 	.word	0x0800d0e4
 800bd18:	0800d0a4 	.word	0x0800d0a4

0800bd1c <__swsetup_r>:
 800bd1c:	4b32      	ldr	r3, [pc, #200]	; (800bde8 <__swsetup_r+0xcc>)
 800bd1e:	b570      	push	{r4, r5, r6, lr}
 800bd20:	681d      	ldr	r5, [r3, #0]
 800bd22:	4606      	mov	r6, r0
 800bd24:	460c      	mov	r4, r1
 800bd26:	b125      	cbz	r5, 800bd32 <__swsetup_r+0x16>
 800bd28:	69ab      	ldr	r3, [r5, #24]
 800bd2a:	b913      	cbnz	r3, 800bd32 <__swsetup_r+0x16>
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f000 f985 	bl	800c03c <__sinit>
 800bd32:	4b2e      	ldr	r3, [pc, #184]	; (800bdec <__swsetup_r+0xd0>)
 800bd34:	429c      	cmp	r4, r3
 800bd36:	d10f      	bne.n	800bd58 <__swsetup_r+0x3c>
 800bd38:	686c      	ldr	r4, [r5, #4]
 800bd3a:	89a3      	ldrh	r3, [r4, #12]
 800bd3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd40:	0719      	lsls	r1, r3, #28
 800bd42:	d42c      	bmi.n	800bd9e <__swsetup_r+0x82>
 800bd44:	06dd      	lsls	r5, r3, #27
 800bd46:	d411      	bmi.n	800bd6c <__swsetup_r+0x50>
 800bd48:	2309      	movs	r3, #9
 800bd4a:	6033      	str	r3, [r6, #0]
 800bd4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd54:	81a3      	strh	r3, [r4, #12]
 800bd56:	e03e      	b.n	800bdd6 <__swsetup_r+0xba>
 800bd58:	4b25      	ldr	r3, [pc, #148]	; (800bdf0 <__swsetup_r+0xd4>)
 800bd5a:	429c      	cmp	r4, r3
 800bd5c:	d101      	bne.n	800bd62 <__swsetup_r+0x46>
 800bd5e:	68ac      	ldr	r4, [r5, #8]
 800bd60:	e7eb      	b.n	800bd3a <__swsetup_r+0x1e>
 800bd62:	4b24      	ldr	r3, [pc, #144]	; (800bdf4 <__swsetup_r+0xd8>)
 800bd64:	429c      	cmp	r4, r3
 800bd66:	bf08      	it	eq
 800bd68:	68ec      	ldreq	r4, [r5, #12]
 800bd6a:	e7e6      	b.n	800bd3a <__swsetup_r+0x1e>
 800bd6c:	0758      	lsls	r0, r3, #29
 800bd6e:	d512      	bpl.n	800bd96 <__swsetup_r+0x7a>
 800bd70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd72:	b141      	cbz	r1, 800bd86 <__swsetup_r+0x6a>
 800bd74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd78:	4299      	cmp	r1, r3
 800bd7a:	d002      	beq.n	800bd82 <__swsetup_r+0x66>
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f7ff fb6f 	bl	800b460 <_free_r>
 800bd82:	2300      	movs	r3, #0
 800bd84:	6363      	str	r3, [r4, #52]	; 0x34
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd8c:	81a3      	strh	r3, [r4, #12]
 800bd8e:	2300      	movs	r3, #0
 800bd90:	6063      	str	r3, [r4, #4]
 800bd92:	6923      	ldr	r3, [r4, #16]
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	f043 0308 	orr.w	r3, r3, #8
 800bd9c:	81a3      	strh	r3, [r4, #12]
 800bd9e:	6923      	ldr	r3, [r4, #16]
 800bda0:	b94b      	cbnz	r3, 800bdb6 <__swsetup_r+0x9a>
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bda8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdac:	d003      	beq.n	800bdb6 <__swsetup_r+0x9a>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f000 fa07 	bl	800c1c4 <__smakebuf_r>
 800bdb6:	89a0      	ldrh	r0, [r4, #12]
 800bdb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdbc:	f010 0301 	ands.w	r3, r0, #1
 800bdc0:	d00a      	beq.n	800bdd8 <__swsetup_r+0xbc>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60a3      	str	r3, [r4, #8]
 800bdc6:	6963      	ldr	r3, [r4, #20]
 800bdc8:	425b      	negs	r3, r3
 800bdca:	61a3      	str	r3, [r4, #24]
 800bdcc:	6923      	ldr	r3, [r4, #16]
 800bdce:	b943      	cbnz	r3, 800bde2 <__swsetup_r+0xc6>
 800bdd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdd4:	d1ba      	bne.n	800bd4c <__swsetup_r+0x30>
 800bdd6:	bd70      	pop	{r4, r5, r6, pc}
 800bdd8:	0781      	lsls	r1, r0, #30
 800bdda:	bf58      	it	pl
 800bddc:	6963      	ldrpl	r3, [r4, #20]
 800bdde:	60a3      	str	r3, [r4, #8]
 800bde0:	e7f4      	b.n	800bdcc <__swsetup_r+0xb0>
 800bde2:	2000      	movs	r0, #0
 800bde4:	e7f7      	b.n	800bdd6 <__swsetup_r+0xba>
 800bde6:	bf00      	nop
 800bde8:	200001d4 	.word	0x200001d4
 800bdec:	0800d0c4 	.word	0x0800d0c4
 800bdf0:	0800d0e4 	.word	0x0800d0e4
 800bdf4:	0800d0a4 	.word	0x0800d0a4

0800bdf8 <abort>:
 800bdf8:	2006      	movs	r0, #6
 800bdfa:	b508      	push	{r3, lr}
 800bdfc:	f000 fa52 	bl	800c2a4 <raise>
 800be00:	2001      	movs	r0, #1
 800be02:	f7f8 f8fa 	bl	8003ffa <_exit>
	...

0800be08 <__sflush_r>:
 800be08:	898a      	ldrh	r2, [r1, #12]
 800be0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0e:	4605      	mov	r5, r0
 800be10:	0710      	lsls	r0, r2, #28
 800be12:	460c      	mov	r4, r1
 800be14:	d458      	bmi.n	800bec8 <__sflush_r+0xc0>
 800be16:	684b      	ldr	r3, [r1, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dc05      	bgt.n	800be28 <__sflush_r+0x20>
 800be1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be1e:	2b00      	cmp	r3, #0
 800be20:	dc02      	bgt.n	800be28 <__sflush_r+0x20>
 800be22:	2000      	movs	r0, #0
 800be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be2a:	2e00      	cmp	r6, #0
 800be2c:	d0f9      	beq.n	800be22 <__sflush_r+0x1a>
 800be2e:	2300      	movs	r3, #0
 800be30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be34:	682f      	ldr	r7, [r5, #0]
 800be36:	602b      	str	r3, [r5, #0]
 800be38:	d032      	beq.n	800bea0 <__sflush_r+0x98>
 800be3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	075a      	lsls	r2, r3, #29
 800be40:	d505      	bpl.n	800be4e <__sflush_r+0x46>
 800be42:	6863      	ldr	r3, [r4, #4]
 800be44:	1ac0      	subs	r0, r0, r3
 800be46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be48:	b10b      	cbz	r3, 800be4e <__sflush_r+0x46>
 800be4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be4c:	1ac0      	subs	r0, r0, r3
 800be4e:	2300      	movs	r3, #0
 800be50:	4602      	mov	r2, r0
 800be52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be54:	4628      	mov	r0, r5
 800be56:	6a21      	ldr	r1, [r4, #32]
 800be58:	47b0      	blx	r6
 800be5a:	1c43      	adds	r3, r0, #1
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	d106      	bne.n	800be6e <__sflush_r+0x66>
 800be60:	6829      	ldr	r1, [r5, #0]
 800be62:	291d      	cmp	r1, #29
 800be64:	d82c      	bhi.n	800bec0 <__sflush_r+0xb8>
 800be66:	4a2a      	ldr	r2, [pc, #168]	; (800bf10 <__sflush_r+0x108>)
 800be68:	40ca      	lsrs	r2, r1
 800be6a:	07d6      	lsls	r6, r2, #31
 800be6c:	d528      	bpl.n	800bec0 <__sflush_r+0xb8>
 800be6e:	2200      	movs	r2, #0
 800be70:	6062      	str	r2, [r4, #4]
 800be72:	6922      	ldr	r2, [r4, #16]
 800be74:	04d9      	lsls	r1, r3, #19
 800be76:	6022      	str	r2, [r4, #0]
 800be78:	d504      	bpl.n	800be84 <__sflush_r+0x7c>
 800be7a:	1c42      	adds	r2, r0, #1
 800be7c:	d101      	bne.n	800be82 <__sflush_r+0x7a>
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	b903      	cbnz	r3, 800be84 <__sflush_r+0x7c>
 800be82:	6560      	str	r0, [r4, #84]	; 0x54
 800be84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be86:	602f      	str	r7, [r5, #0]
 800be88:	2900      	cmp	r1, #0
 800be8a:	d0ca      	beq.n	800be22 <__sflush_r+0x1a>
 800be8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be90:	4299      	cmp	r1, r3
 800be92:	d002      	beq.n	800be9a <__sflush_r+0x92>
 800be94:	4628      	mov	r0, r5
 800be96:	f7ff fae3 	bl	800b460 <_free_r>
 800be9a:	2000      	movs	r0, #0
 800be9c:	6360      	str	r0, [r4, #52]	; 0x34
 800be9e:	e7c1      	b.n	800be24 <__sflush_r+0x1c>
 800bea0:	6a21      	ldr	r1, [r4, #32]
 800bea2:	2301      	movs	r3, #1
 800bea4:	4628      	mov	r0, r5
 800bea6:	47b0      	blx	r6
 800bea8:	1c41      	adds	r1, r0, #1
 800beaa:	d1c7      	bne.n	800be3c <__sflush_r+0x34>
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0c4      	beq.n	800be3c <__sflush_r+0x34>
 800beb2:	2b1d      	cmp	r3, #29
 800beb4:	d001      	beq.n	800beba <__sflush_r+0xb2>
 800beb6:	2b16      	cmp	r3, #22
 800beb8:	d101      	bne.n	800bebe <__sflush_r+0xb6>
 800beba:	602f      	str	r7, [r5, #0]
 800bebc:	e7b1      	b.n	800be22 <__sflush_r+0x1a>
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bec4:	81a3      	strh	r3, [r4, #12]
 800bec6:	e7ad      	b.n	800be24 <__sflush_r+0x1c>
 800bec8:	690f      	ldr	r7, [r1, #16]
 800beca:	2f00      	cmp	r7, #0
 800becc:	d0a9      	beq.n	800be22 <__sflush_r+0x1a>
 800bece:	0793      	lsls	r3, r2, #30
 800bed0:	bf18      	it	ne
 800bed2:	2300      	movne	r3, #0
 800bed4:	680e      	ldr	r6, [r1, #0]
 800bed6:	bf08      	it	eq
 800bed8:	694b      	ldreq	r3, [r1, #20]
 800beda:	eba6 0807 	sub.w	r8, r6, r7
 800bede:	600f      	str	r7, [r1, #0]
 800bee0:	608b      	str	r3, [r1, #8]
 800bee2:	f1b8 0f00 	cmp.w	r8, #0
 800bee6:	dd9c      	ble.n	800be22 <__sflush_r+0x1a>
 800bee8:	4643      	mov	r3, r8
 800beea:	463a      	mov	r2, r7
 800beec:	4628      	mov	r0, r5
 800beee:	6a21      	ldr	r1, [r4, #32]
 800bef0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bef2:	47b0      	blx	r6
 800bef4:	2800      	cmp	r0, #0
 800bef6:	dc06      	bgt.n	800bf06 <__sflush_r+0xfe>
 800bef8:	89a3      	ldrh	r3, [r4, #12]
 800befa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800befe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf02:	81a3      	strh	r3, [r4, #12]
 800bf04:	e78e      	b.n	800be24 <__sflush_r+0x1c>
 800bf06:	4407      	add	r7, r0
 800bf08:	eba8 0800 	sub.w	r8, r8, r0
 800bf0c:	e7e9      	b.n	800bee2 <__sflush_r+0xda>
 800bf0e:	bf00      	nop
 800bf10:	20400001 	.word	0x20400001

0800bf14 <_fflush_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	690b      	ldr	r3, [r1, #16]
 800bf18:	4605      	mov	r5, r0
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	b913      	cbnz	r3, 800bf24 <_fflush_r+0x10>
 800bf1e:	2500      	movs	r5, #0
 800bf20:	4628      	mov	r0, r5
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	b118      	cbz	r0, 800bf2e <_fflush_r+0x1a>
 800bf26:	6983      	ldr	r3, [r0, #24]
 800bf28:	b90b      	cbnz	r3, 800bf2e <_fflush_r+0x1a>
 800bf2a:	f000 f887 	bl	800c03c <__sinit>
 800bf2e:	4b14      	ldr	r3, [pc, #80]	; (800bf80 <_fflush_r+0x6c>)
 800bf30:	429c      	cmp	r4, r3
 800bf32:	d11b      	bne.n	800bf6c <_fflush_r+0x58>
 800bf34:	686c      	ldr	r4, [r5, #4]
 800bf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0ef      	beq.n	800bf1e <_fflush_r+0xa>
 800bf3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf40:	07d0      	lsls	r0, r2, #31
 800bf42:	d404      	bmi.n	800bf4e <_fflush_r+0x3a>
 800bf44:	0599      	lsls	r1, r3, #22
 800bf46:	d402      	bmi.n	800bf4e <_fflush_r+0x3a>
 800bf48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf4a:	f000 f915 	bl	800c178 <__retarget_lock_acquire_recursive>
 800bf4e:	4628      	mov	r0, r5
 800bf50:	4621      	mov	r1, r4
 800bf52:	f7ff ff59 	bl	800be08 <__sflush_r>
 800bf56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf58:	4605      	mov	r5, r0
 800bf5a:	07da      	lsls	r2, r3, #31
 800bf5c:	d4e0      	bmi.n	800bf20 <_fflush_r+0xc>
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	059b      	lsls	r3, r3, #22
 800bf62:	d4dd      	bmi.n	800bf20 <_fflush_r+0xc>
 800bf64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf66:	f000 f908 	bl	800c17a <__retarget_lock_release_recursive>
 800bf6a:	e7d9      	b.n	800bf20 <_fflush_r+0xc>
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <_fflush_r+0x70>)
 800bf6e:	429c      	cmp	r4, r3
 800bf70:	d101      	bne.n	800bf76 <_fflush_r+0x62>
 800bf72:	68ac      	ldr	r4, [r5, #8]
 800bf74:	e7df      	b.n	800bf36 <_fflush_r+0x22>
 800bf76:	4b04      	ldr	r3, [pc, #16]	; (800bf88 <_fflush_r+0x74>)
 800bf78:	429c      	cmp	r4, r3
 800bf7a:	bf08      	it	eq
 800bf7c:	68ec      	ldreq	r4, [r5, #12]
 800bf7e:	e7da      	b.n	800bf36 <_fflush_r+0x22>
 800bf80:	0800d0c4 	.word	0x0800d0c4
 800bf84:	0800d0e4 	.word	0x0800d0e4
 800bf88:	0800d0a4 	.word	0x0800d0a4

0800bf8c <std>:
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	b510      	push	{r4, lr}
 800bf90:	4604      	mov	r4, r0
 800bf92:	e9c0 3300 	strd	r3, r3, [r0]
 800bf96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf9a:	6083      	str	r3, [r0, #8]
 800bf9c:	8181      	strh	r1, [r0, #12]
 800bf9e:	6643      	str	r3, [r0, #100]	; 0x64
 800bfa0:	81c2      	strh	r2, [r0, #14]
 800bfa2:	6183      	str	r3, [r0, #24]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	2208      	movs	r2, #8
 800bfa8:	305c      	adds	r0, #92	; 0x5c
 800bfaa:	f7fc f821 	bl	8007ff0 <memset>
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <std+0x38>)
 800bfb0:	6224      	str	r4, [r4, #32]
 800bfb2:	6263      	str	r3, [r4, #36]	; 0x24
 800bfb4:	4b04      	ldr	r3, [pc, #16]	; (800bfc8 <std+0x3c>)
 800bfb6:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfb8:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <std+0x40>)
 800bfba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfbc:	4b04      	ldr	r3, [pc, #16]	; (800bfd0 <std+0x44>)
 800bfbe:	6323      	str	r3, [r4, #48]	; 0x30
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	bf00      	nop
 800bfc4:	0800c2dd 	.word	0x0800c2dd
 800bfc8:	0800c2ff 	.word	0x0800c2ff
 800bfcc:	0800c337 	.word	0x0800c337
 800bfd0:	0800c35b 	.word	0x0800c35b

0800bfd4 <_cleanup_r>:
 800bfd4:	4901      	ldr	r1, [pc, #4]	; (800bfdc <_cleanup_r+0x8>)
 800bfd6:	f000 b8af 	b.w	800c138 <_fwalk_reent>
 800bfda:	bf00      	nop
 800bfdc:	0800bf15 	.word	0x0800bf15

0800bfe0 <__sfmoreglue>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	2568      	movs	r5, #104	; 0x68
 800bfe4:	1e4a      	subs	r2, r1, #1
 800bfe6:	4355      	muls	r5, r2
 800bfe8:	460e      	mov	r6, r1
 800bfea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfee:	f7ff fa83 	bl	800b4f8 <_malloc_r>
 800bff2:	4604      	mov	r4, r0
 800bff4:	b140      	cbz	r0, 800c008 <__sfmoreglue+0x28>
 800bff6:	2100      	movs	r1, #0
 800bff8:	e9c0 1600 	strd	r1, r6, [r0]
 800bffc:	300c      	adds	r0, #12
 800bffe:	60a0      	str	r0, [r4, #8]
 800c000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c004:	f7fb fff4 	bl	8007ff0 <memset>
 800c008:	4620      	mov	r0, r4
 800c00a:	bd70      	pop	{r4, r5, r6, pc}

0800c00c <__sfp_lock_acquire>:
 800c00c:	4801      	ldr	r0, [pc, #4]	; (800c014 <__sfp_lock_acquire+0x8>)
 800c00e:	f000 b8b3 	b.w	800c178 <__retarget_lock_acquire_recursive>
 800c012:	bf00      	nop
 800c014:	20000824 	.word	0x20000824

0800c018 <__sfp_lock_release>:
 800c018:	4801      	ldr	r0, [pc, #4]	; (800c020 <__sfp_lock_release+0x8>)
 800c01a:	f000 b8ae 	b.w	800c17a <__retarget_lock_release_recursive>
 800c01e:	bf00      	nop
 800c020:	20000824 	.word	0x20000824

0800c024 <__sinit_lock_acquire>:
 800c024:	4801      	ldr	r0, [pc, #4]	; (800c02c <__sinit_lock_acquire+0x8>)
 800c026:	f000 b8a7 	b.w	800c178 <__retarget_lock_acquire_recursive>
 800c02a:	bf00      	nop
 800c02c:	2000081f 	.word	0x2000081f

0800c030 <__sinit_lock_release>:
 800c030:	4801      	ldr	r0, [pc, #4]	; (800c038 <__sinit_lock_release+0x8>)
 800c032:	f000 b8a2 	b.w	800c17a <__retarget_lock_release_recursive>
 800c036:	bf00      	nop
 800c038:	2000081f 	.word	0x2000081f

0800c03c <__sinit>:
 800c03c:	b510      	push	{r4, lr}
 800c03e:	4604      	mov	r4, r0
 800c040:	f7ff fff0 	bl	800c024 <__sinit_lock_acquire>
 800c044:	69a3      	ldr	r3, [r4, #24]
 800c046:	b11b      	cbz	r3, 800c050 <__sinit+0x14>
 800c048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c04c:	f7ff bff0 	b.w	800c030 <__sinit_lock_release>
 800c050:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c054:	6523      	str	r3, [r4, #80]	; 0x50
 800c056:	4b13      	ldr	r3, [pc, #76]	; (800c0a4 <__sinit+0x68>)
 800c058:	4a13      	ldr	r2, [pc, #76]	; (800c0a8 <__sinit+0x6c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c05e:	42a3      	cmp	r3, r4
 800c060:	bf08      	it	eq
 800c062:	2301      	moveq	r3, #1
 800c064:	4620      	mov	r0, r4
 800c066:	bf08      	it	eq
 800c068:	61a3      	streq	r3, [r4, #24]
 800c06a:	f000 f81f 	bl	800c0ac <__sfp>
 800c06e:	6060      	str	r0, [r4, #4]
 800c070:	4620      	mov	r0, r4
 800c072:	f000 f81b 	bl	800c0ac <__sfp>
 800c076:	60a0      	str	r0, [r4, #8]
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 f817 	bl	800c0ac <__sfp>
 800c07e:	2200      	movs	r2, #0
 800c080:	2104      	movs	r1, #4
 800c082:	60e0      	str	r0, [r4, #12]
 800c084:	6860      	ldr	r0, [r4, #4]
 800c086:	f7ff ff81 	bl	800bf8c <std>
 800c08a:	2201      	movs	r2, #1
 800c08c:	2109      	movs	r1, #9
 800c08e:	68a0      	ldr	r0, [r4, #8]
 800c090:	f7ff ff7c 	bl	800bf8c <std>
 800c094:	2202      	movs	r2, #2
 800c096:	2112      	movs	r1, #18
 800c098:	68e0      	ldr	r0, [r4, #12]
 800c09a:	f7ff ff77 	bl	800bf8c <std>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	61a3      	str	r3, [r4, #24]
 800c0a2:	e7d1      	b.n	800c048 <__sinit+0xc>
 800c0a4:	0800cc54 	.word	0x0800cc54
 800c0a8:	0800bfd5 	.word	0x0800bfd5

0800c0ac <__sfp>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	f7ff ffac 	bl	800c00c <__sfp_lock_acquire>
 800c0b4:	4b1e      	ldr	r3, [pc, #120]	; (800c130 <__sfp+0x84>)
 800c0b6:	681e      	ldr	r6, [r3, #0]
 800c0b8:	69b3      	ldr	r3, [r6, #24]
 800c0ba:	b913      	cbnz	r3, 800c0c2 <__sfp+0x16>
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f7ff ffbd 	bl	800c03c <__sinit>
 800c0c2:	3648      	adds	r6, #72	; 0x48
 800c0c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	d503      	bpl.n	800c0d4 <__sfp+0x28>
 800c0cc:	6833      	ldr	r3, [r6, #0]
 800c0ce:	b30b      	cbz	r3, 800c114 <__sfp+0x68>
 800c0d0:	6836      	ldr	r6, [r6, #0]
 800c0d2:	e7f7      	b.n	800c0c4 <__sfp+0x18>
 800c0d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0d8:	b9d5      	cbnz	r5, 800c110 <__sfp+0x64>
 800c0da:	4b16      	ldr	r3, [pc, #88]	; (800c134 <__sfp+0x88>)
 800c0dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0e0:	60e3      	str	r3, [r4, #12]
 800c0e2:	6665      	str	r5, [r4, #100]	; 0x64
 800c0e4:	f000 f847 	bl	800c176 <__retarget_lock_init_recursive>
 800c0e8:	f7ff ff96 	bl	800c018 <__sfp_lock_release>
 800c0ec:	2208      	movs	r2, #8
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0f8:	6025      	str	r5, [r4, #0]
 800c0fa:	61a5      	str	r5, [r4, #24]
 800c0fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c100:	f7fb ff76 	bl	8007ff0 <memset>
 800c104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c10c:	4620      	mov	r0, r4
 800c10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c110:	3468      	adds	r4, #104	; 0x68
 800c112:	e7d9      	b.n	800c0c8 <__sfp+0x1c>
 800c114:	2104      	movs	r1, #4
 800c116:	4638      	mov	r0, r7
 800c118:	f7ff ff62 	bl	800bfe0 <__sfmoreglue>
 800c11c:	4604      	mov	r4, r0
 800c11e:	6030      	str	r0, [r6, #0]
 800c120:	2800      	cmp	r0, #0
 800c122:	d1d5      	bne.n	800c0d0 <__sfp+0x24>
 800c124:	f7ff ff78 	bl	800c018 <__sfp_lock_release>
 800c128:	230c      	movs	r3, #12
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	e7ee      	b.n	800c10c <__sfp+0x60>
 800c12e:	bf00      	nop
 800c130:	0800cc54 	.word	0x0800cc54
 800c134:	ffff0001 	.word	0xffff0001

0800c138 <_fwalk_reent>:
 800c138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c13c:	4606      	mov	r6, r0
 800c13e:	4688      	mov	r8, r1
 800c140:	2700      	movs	r7, #0
 800c142:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c146:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c14a:	f1b9 0901 	subs.w	r9, r9, #1
 800c14e:	d505      	bpl.n	800c15c <_fwalk_reent+0x24>
 800c150:	6824      	ldr	r4, [r4, #0]
 800c152:	2c00      	cmp	r4, #0
 800c154:	d1f7      	bne.n	800c146 <_fwalk_reent+0xe>
 800c156:	4638      	mov	r0, r7
 800c158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c15c:	89ab      	ldrh	r3, [r5, #12]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d907      	bls.n	800c172 <_fwalk_reent+0x3a>
 800c162:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c166:	3301      	adds	r3, #1
 800c168:	d003      	beq.n	800c172 <_fwalk_reent+0x3a>
 800c16a:	4629      	mov	r1, r5
 800c16c:	4630      	mov	r0, r6
 800c16e:	47c0      	blx	r8
 800c170:	4307      	orrs	r7, r0
 800c172:	3568      	adds	r5, #104	; 0x68
 800c174:	e7e9      	b.n	800c14a <_fwalk_reent+0x12>

0800c176 <__retarget_lock_init_recursive>:
 800c176:	4770      	bx	lr

0800c178 <__retarget_lock_acquire_recursive>:
 800c178:	4770      	bx	lr

0800c17a <__retarget_lock_release_recursive>:
 800c17a:	4770      	bx	lr

0800c17c <__swhatbuf_r>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	460e      	mov	r6, r1
 800c180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c184:	4614      	mov	r4, r2
 800c186:	2900      	cmp	r1, #0
 800c188:	461d      	mov	r5, r3
 800c18a:	b096      	sub	sp, #88	; 0x58
 800c18c:	da07      	bge.n	800c19e <__swhatbuf_r+0x22>
 800c18e:	2300      	movs	r3, #0
 800c190:	602b      	str	r3, [r5, #0]
 800c192:	89b3      	ldrh	r3, [r6, #12]
 800c194:	061a      	lsls	r2, r3, #24
 800c196:	d410      	bmi.n	800c1ba <__swhatbuf_r+0x3e>
 800c198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c19c:	e00e      	b.n	800c1bc <__swhatbuf_r+0x40>
 800c19e:	466a      	mov	r2, sp
 800c1a0:	f000 f902 	bl	800c3a8 <_fstat_r>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	dbf2      	blt.n	800c18e <__swhatbuf_r+0x12>
 800c1a8:	9a01      	ldr	r2, [sp, #4]
 800c1aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1b2:	425a      	negs	r2, r3
 800c1b4:	415a      	adcs	r2, r3
 800c1b6:	602a      	str	r2, [r5, #0]
 800c1b8:	e7ee      	b.n	800c198 <__swhatbuf_r+0x1c>
 800c1ba:	2340      	movs	r3, #64	; 0x40
 800c1bc:	2000      	movs	r0, #0
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	b016      	add	sp, #88	; 0x58
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}

0800c1c4 <__smakebuf_r>:
 800c1c4:	898b      	ldrh	r3, [r1, #12]
 800c1c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1c8:	079d      	lsls	r5, r3, #30
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	d507      	bpl.n	800c1e0 <__smakebuf_r+0x1c>
 800c1d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	6123      	str	r3, [r4, #16]
 800c1d8:	2301      	movs	r3, #1
 800c1da:	6163      	str	r3, [r4, #20]
 800c1dc:	b002      	add	sp, #8
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	466a      	mov	r2, sp
 800c1e2:	ab01      	add	r3, sp, #4
 800c1e4:	f7ff ffca 	bl	800c17c <__swhatbuf_r>
 800c1e8:	9900      	ldr	r1, [sp, #0]
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f7ff f983 	bl	800b4f8 <_malloc_r>
 800c1f2:	b948      	cbnz	r0, 800c208 <__smakebuf_r+0x44>
 800c1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f8:	059a      	lsls	r2, r3, #22
 800c1fa:	d4ef      	bmi.n	800c1dc <__smakebuf_r+0x18>
 800c1fc:	f023 0303 	bic.w	r3, r3, #3
 800c200:	f043 0302 	orr.w	r3, r3, #2
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	e7e3      	b.n	800c1d0 <__smakebuf_r+0xc>
 800c208:	4b0d      	ldr	r3, [pc, #52]	; (800c240 <__smakebuf_r+0x7c>)
 800c20a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	6020      	str	r0, [r4, #0]
 800c210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	6120      	str	r0, [r4, #16]
 800c21a:	6163      	str	r3, [r4, #20]
 800c21c:	9b01      	ldr	r3, [sp, #4]
 800c21e:	b15b      	cbz	r3, 800c238 <__smakebuf_r+0x74>
 800c220:	4630      	mov	r0, r6
 800c222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c226:	f000 f8d1 	bl	800c3cc <_isatty_r>
 800c22a:	b128      	cbz	r0, 800c238 <__smakebuf_r+0x74>
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	f023 0303 	bic.w	r3, r3, #3
 800c232:	f043 0301 	orr.w	r3, r3, #1
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	89a0      	ldrh	r0, [r4, #12]
 800c23a:	4305      	orrs	r5, r0
 800c23c:	81a5      	strh	r5, [r4, #12]
 800c23e:	e7cd      	b.n	800c1dc <__smakebuf_r+0x18>
 800c240:	0800bfd5 	.word	0x0800bfd5

0800c244 <_malloc_usable_size_r>:
 800c244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c248:	1f18      	subs	r0, r3, #4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	bfbc      	itt	lt
 800c24e:	580b      	ldrlt	r3, [r1, r0]
 800c250:	18c0      	addlt	r0, r0, r3
 800c252:	4770      	bx	lr

0800c254 <_raise_r>:
 800c254:	291f      	cmp	r1, #31
 800c256:	b538      	push	{r3, r4, r5, lr}
 800c258:	4604      	mov	r4, r0
 800c25a:	460d      	mov	r5, r1
 800c25c:	d904      	bls.n	800c268 <_raise_r+0x14>
 800c25e:	2316      	movs	r3, #22
 800c260:	6003      	str	r3, [r0, #0]
 800c262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c266:	bd38      	pop	{r3, r4, r5, pc}
 800c268:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c26a:	b112      	cbz	r2, 800c272 <_raise_r+0x1e>
 800c26c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c270:	b94b      	cbnz	r3, 800c286 <_raise_r+0x32>
 800c272:	4620      	mov	r0, r4
 800c274:	f000 f830 	bl	800c2d8 <_getpid_r>
 800c278:	462a      	mov	r2, r5
 800c27a:	4601      	mov	r1, r0
 800c27c:	4620      	mov	r0, r4
 800c27e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c282:	f000 b817 	b.w	800c2b4 <_kill_r>
 800c286:	2b01      	cmp	r3, #1
 800c288:	d00a      	beq.n	800c2a0 <_raise_r+0x4c>
 800c28a:	1c59      	adds	r1, r3, #1
 800c28c:	d103      	bne.n	800c296 <_raise_r+0x42>
 800c28e:	2316      	movs	r3, #22
 800c290:	6003      	str	r3, [r0, #0]
 800c292:	2001      	movs	r0, #1
 800c294:	e7e7      	b.n	800c266 <_raise_r+0x12>
 800c296:	2400      	movs	r4, #0
 800c298:	4628      	mov	r0, r5
 800c29a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c29e:	4798      	blx	r3
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	e7e0      	b.n	800c266 <_raise_r+0x12>

0800c2a4 <raise>:
 800c2a4:	4b02      	ldr	r3, [pc, #8]	; (800c2b0 <raise+0xc>)
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	6818      	ldr	r0, [r3, #0]
 800c2aa:	f7ff bfd3 	b.w	800c254 <_raise_r>
 800c2ae:	bf00      	nop
 800c2b0:	200001d4 	.word	0x200001d4

0800c2b4 <_kill_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	4d06      	ldr	r5, [pc, #24]	; (800c2d4 <_kill_r+0x20>)
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	4611      	mov	r1, r2
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	f7f7 fe8a 	bl	8003fda <_kill>
 800c2c6:	1c43      	adds	r3, r0, #1
 800c2c8:	d102      	bne.n	800c2d0 <_kill_r+0x1c>
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	b103      	cbz	r3, 800c2d0 <_kill_r+0x1c>
 800c2ce:	6023      	str	r3, [r4, #0]
 800c2d0:	bd38      	pop	{r3, r4, r5, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20000818 	.word	0x20000818

0800c2d8 <_getpid_r>:
 800c2d8:	f7f7 be78 	b.w	8003fcc <_getpid>

0800c2dc <__sread>:
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	460c      	mov	r4, r1
 800c2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e4:	f000 f894 	bl	800c410 <_read_r>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	bfab      	itete	ge
 800c2ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c2f0:	181b      	addge	r3, r3, r0
 800c2f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2f6:	bfac      	ite	ge
 800c2f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2fa:	81a3      	strhlt	r3, [r4, #12]
 800c2fc:	bd10      	pop	{r4, pc}

0800c2fe <__swrite>:
 800c2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c302:	461f      	mov	r7, r3
 800c304:	898b      	ldrh	r3, [r1, #12]
 800c306:	4605      	mov	r5, r0
 800c308:	05db      	lsls	r3, r3, #23
 800c30a:	460c      	mov	r4, r1
 800c30c:	4616      	mov	r6, r2
 800c30e:	d505      	bpl.n	800c31c <__swrite+0x1e>
 800c310:	2302      	movs	r3, #2
 800c312:	2200      	movs	r2, #0
 800c314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c318:	f000 f868 	bl	800c3ec <_lseek_r>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	4632      	mov	r2, r6
 800c320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c324:	81a3      	strh	r3, [r4, #12]
 800c326:	4628      	mov	r0, r5
 800c328:	463b      	mov	r3, r7
 800c32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c332:	f000 b817 	b.w	800c364 <_write_r>

0800c336 <__sseek>:
 800c336:	b510      	push	{r4, lr}
 800c338:	460c      	mov	r4, r1
 800c33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c33e:	f000 f855 	bl	800c3ec <_lseek_r>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	bf15      	itete	ne
 800c348:	6560      	strne	r0, [r4, #84]	; 0x54
 800c34a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c34e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c352:	81a3      	strheq	r3, [r4, #12]
 800c354:	bf18      	it	ne
 800c356:	81a3      	strhne	r3, [r4, #12]
 800c358:	bd10      	pop	{r4, pc}

0800c35a <__sclose>:
 800c35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35e:	f000 b813 	b.w	800c388 <_close_r>
	...

0800c364 <_write_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4604      	mov	r4, r0
 800c368:	4608      	mov	r0, r1
 800c36a:	4611      	mov	r1, r2
 800c36c:	2200      	movs	r2, #0
 800c36e:	4d05      	ldr	r5, [pc, #20]	; (800c384 <_write_r+0x20>)
 800c370:	602a      	str	r2, [r5, #0]
 800c372:	461a      	mov	r2, r3
 800c374:	f7f7 fe68 	bl	8004048 <_write>
 800c378:	1c43      	adds	r3, r0, #1
 800c37a:	d102      	bne.n	800c382 <_write_r+0x1e>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	b103      	cbz	r3, 800c382 <_write_r+0x1e>
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	bd38      	pop	{r3, r4, r5, pc}
 800c384:	20000818 	.word	0x20000818

0800c388 <_close_r>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	2300      	movs	r3, #0
 800c38c:	4d05      	ldr	r5, [pc, #20]	; (800c3a4 <_close_r+0x1c>)
 800c38e:	4604      	mov	r4, r0
 800c390:	4608      	mov	r0, r1
 800c392:	602b      	str	r3, [r5, #0]
 800c394:	f7f7 fe74 	bl	8004080 <_close>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_close_r+0x1a>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_close_r+0x1a>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	20000818 	.word	0x20000818

0800c3a8 <_fstat_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	4d06      	ldr	r5, [pc, #24]	; (800c3c8 <_fstat_r+0x20>)
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	4608      	mov	r0, r1
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	602b      	str	r3, [r5, #0]
 800c3b6:	f7f7 fe6e 	bl	8004096 <_fstat>
 800c3ba:	1c43      	adds	r3, r0, #1
 800c3bc:	d102      	bne.n	800c3c4 <_fstat_r+0x1c>
 800c3be:	682b      	ldr	r3, [r5, #0]
 800c3c0:	b103      	cbz	r3, 800c3c4 <_fstat_r+0x1c>
 800c3c2:	6023      	str	r3, [r4, #0]
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20000818 	.word	0x20000818

0800c3cc <_isatty_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	4d05      	ldr	r5, [pc, #20]	; (800c3e8 <_isatty_r+0x1c>)
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	602b      	str	r3, [r5, #0]
 800c3d8:	f7f7 fe6c 	bl	80040b4 <_isatty>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_isatty_r+0x1a>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_isatty_r+0x1a>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	20000818 	.word	0x20000818

0800c3ec <_lseek_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	4d05      	ldr	r5, [pc, #20]	; (800c40c <_lseek_r+0x20>)
 800c3f8:	602a      	str	r2, [r5, #0]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f7f7 fe64 	bl	80040c8 <_lseek>
 800c400:	1c43      	adds	r3, r0, #1
 800c402:	d102      	bne.n	800c40a <_lseek_r+0x1e>
 800c404:	682b      	ldr	r3, [r5, #0]
 800c406:	b103      	cbz	r3, 800c40a <_lseek_r+0x1e>
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	20000818 	.word	0x20000818

0800c410 <_read_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	4611      	mov	r1, r2
 800c418:	2200      	movs	r2, #0
 800c41a:	4d05      	ldr	r5, [pc, #20]	; (800c430 <_read_r+0x20>)
 800c41c:	602a      	str	r2, [r5, #0]
 800c41e:	461a      	mov	r2, r3
 800c420:	f7f7 fdf5 	bl	800400e <_read>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	d102      	bne.n	800c42e <_read_r+0x1e>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	b103      	cbz	r3, 800c42e <_read_r+0x1e>
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	20000818 	.word	0x20000818

0800c434 <atan2>:
 800c434:	f000 b800 	b.w	800c438 <__ieee754_atan2>

0800c438 <__ieee754_atan2>:
 800c438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43c:	4692      	mov	sl, r2
 800c43e:	4699      	mov	r9, r3
 800c440:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c444:	461f      	mov	r7, r3
 800c446:	f1ca 0300 	rsb	r3, sl, #0
 800c44a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800c5d8 <__ieee754_atan2+0x1a0>
 800c44e:	ea43 030a 	orr.w	r3, r3, sl
 800c452:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c456:	4573      	cmp	r3, lr
 800c458:	4604      	mov	r4, r0
 800c45a:	460d      	mov	r5, r1
 800c45c:	d808      	bhi.n	800c470 <__ieee754_atan2+0x38>
 800c45e:	4246      	negs	r6, r0
 800c460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c464:	4306      	orrs	r6, r0
 800c466:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800c46a:	4576      	cmp	r6, lr
 800c46c:	468c      	mov	ip, r1
 800c46e:	d908      	bls.n	800c482 <__ieee754_atan2+0x4a>
 800c470:	4652      	mov	r2, sl
 800c472:	464b      	mov	r3, r9
 800c474:	4620      	mov	r0, r4
 800c476:	4629      	mov	r1, r5
 800c478:	f7f3 fe82 	bl	8000180 <__adddf3>
 800c47c:	4604      	mov	r4, r0
 800c47e:	460d      	mov	r5, r1
 800c480:	e019      	b.n	800c4b6 <__ieee754_atan2+0x7e>
 800c482:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800c486:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800c48a:	ea56 060a 	orrs.w	r6, r6, sl
 800c48e:	d103      	bne.n	800c498 <__ieee754_atan2+0x60>
 800c490:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	f000 b8a4 	b.w	800c5e0 <atan>
 800c498:	17be      	asrs	r6, r7, #30
 800c49a:	f006 0602 	and.w	r6, r6, #2
 800c49e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c4a2:	ea53 0100 	orrs.w	r1, r3, r0
 800c4a6:	d10a      	bne.n	800c4be <__ieee754_atan2+0x86>
 800c4a8:	2e02      	cmp	r6, #2
 800c4aa:	d067      	beq.n	800c57c <__ieee754_atan2+0x144>
 800c4ac:	2e03      	cmp	r6, #3
 800c4ae:	d102      	bne.n	800c4b6 <__ieee754_atan2+0x7e>
 800c4b0:	a53b      	add	r5, pc, #236	; (adr r5, 800c5a0 <__ieee754_atan2+0x168>)
 800c4b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4be:	ea52 010a 	orrs.w	r1, r2, sl
 800c4c2:	d106      	bne.n	800c4d2 <__ieee754_atan2+0x9a>
 800c4c4:	f1bc 0f00 	cmp.w	ip, #0
 800c4c8:	da63      	bge.n	800c592 <__ieee754_atan2+0x15a>
 800c4ca:	a537      	add	r5, pc, #220	; (adr r5, 800c5a8 <__ieee754_atan2+0x170>)
 800c4cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c4d0:	e7f1      	b.n	800c4b6 <__ieee754_atan2+0x7e>
 800c4d2:	4572      	cmp	r2, lr
 800c4d4:	d10f      	bne.n	800c4f6 <__ieee754_atan2+0xbe>
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800c4dc:	d107      	bne.n	800c4ee <__ieee754_atan2+0xb6>
 800c4de:	2e02      	cmp	r6, #2
 800c4e0:	d850      	bhi.n	800c584 <__ieee754_atan2+0x14c>
 800c4e2:	4b3b      	ldr	r3, [pc, #236]	; (800c5d0 <__ieee754_atan2+0x198>)
 800c4e4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c4e8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800c4ec:	e7e3      	b.n	800c4b6 <__ieee754_atan2+0x7e>
 800c4ee:	2e02      	cmp	r6, #2
 800c4f0:	d84c      	bhi.n	800c58c <__ieee754_atan2+0x154>
 800c4f2:	4b38      	ldr	r3, [pc, #224]	; (800c5d4 <__ieee754_atan2+0x19c>)
 800c4f4:	e7f6      	b.n	800c4e4 <__ieee754_atan2+0xac>
 800c4f6:	4573      	cmp	r3, lr
 800c4f8:	d0e4      	beq.n	800c4c4 <__ieee754_atan2+0x8c>
 800c4fa:	1a9b      	subs	r3, r3, r2
 800c4fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c500:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c504:	da20      	bge.n	800c548 <__ieee754_atan2+0x110>
 800c506:	2f00      	cmp	r7, #0
 800c508:	da01      	bge.n	800c50e <__ieee754_atan2+0xd6>
 800c50a:	323c      	adds	r2, #60	; 0x3c
 800c50c:	db20      	blt.n	800c550 <__ieee754_atan2+0x118>
 800c50e:	4652      	mov	r2, sl
 800c510:	464b      	mov	r3, r9
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	f7f4 f913 	bl	8000740 <__aeabi_ddiv>
 800c51a:	f000 f9eb 	bl	800c8f4 <fabs>
 800c51e:	f000 f85f 	bl	800c5e0 <atan>
 800c522:	4604      	mov	r4, r0
 800c524:	460d      	mov	r5, r1
 800c526:	2e01      	cmp	r6, #1
 800c528:	d015      	beq.n	800c556 <__ieee754_atan2+0x11e>
 800c52a:	2e02      	cmp	r6, #2
 800c52c:	d017      	beq.n	800c55e <__ieee754_atan2+0x126>
 800c52e:	2e00      	cmp	r6, #0
 800c530:	d0c1      	beq.n	800c4b6 <__ieee754_atan2+0x7e>
 800c532:	a31f      	add	r3, pc, #124	; (adr r3, 800c5b0 <__ieee754_atan2+0x178>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	4620      	mov	r0, r4
 800c53a:	4629      	mov	r1, r5
 800c53c:	f7f3 fe1e 	bl	800017c <__aeabi_dsub>
 800c540:	a31d      	add	r3, pc, #116	; (adr r3, 800c5b8 <__ieee754_atan2+0x180>)
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	e016      	b.n	800c576 <__ieee754_atan2+0x13e>
 800c548:	a51d      	add	r5, pc, #116	; (adr r5, 800c5c0 <__ieee754_atan2+0x188>)
 800c54a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c54e:	e7ea      	b.n	800c526 <__ieee754_atan2+0xee>
 800c550:	2400      	movs	r4, #0
 800c552:	2500      	movs	r5, #0
 800c554:	e7e7      	b.n	800c526 <__ieee754_atan2+0xee>
 800c556:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c55a:	461d      	mov	r5, r3
 800c55c:	e7ab      	b.n	800c4b6 <__ieee754_atan2+0x7e>
 800c55e:	a314      	add	r3, pc, #80	; (adr r3, 800c5b0 <__ieee754_atan2+0x178>)
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	4620      	mov	r0, r4
 800c566:	4629      	mov	r1, r5
 800c568:	f7f3 fe08 	bl	800017c <__aeabi_dsub>
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	a111      	add	r1, pc, #68	; (adr r1, 800c5b8 <__ieee754_atan2+0x180>)
 800c572:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c576:	f7f3 fe01 	bl	800017c <__aeabi_dsub>
 800c57a:	e77f      	b.n	800c47c <__ieee754_atan2+0x44>
 800c57c:	a50e      	add	r5, pc, #56	; (adr r5, 800c5b8 <__ieee754_atan2+0x180>)
 800c57e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c582:	e798      	b.n	800c4b6 <__ieee754_atan2+0x7e>
 800c584:	a510      	add	r5, pc, #64	; (adr r5, 800c5c8 <__ieee754_atan2+0x190>)
 800c586:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c58a:	e794      	b.n	800c4b6 <__ieee754_atan2+0x7e>
 800c58c:	2400      	movs	r4, #0
 800c58e:	2500      	movs	r5, #0
 800c590:	e791      	b.n	800c4b6 <__ieee754_atan2+0x7e>
 800c592:	a50b      	add	r5, pc, #44	; (adr r5, 800c5c0 <__ieee754_atan2+0x188>)
 800c594:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c598:	e78d      	b.n	800c4b6 <__ieee754_atan2+0x7e>
 800c59a:	bf00      	nop
 800c59c:	f3af 8000 	nop.w
 800c5a0:	54442d18 	.word	0x54442d18
 800c5a4:	c00921fb 	.word	0xc00921fb
 800c5a8:	54442d18 	.word	0x54442d18
 800c5ac:	bff921fb 	.word	0xbff921fb
 800c5b0:	33145c07 	.word	0x33145c07
 800c5b4:	3ca1a626 	.word	0x3ca1a626
 800c5b8:	54442d18 	.word	0x54442d18
 800c5bc:	400921fb 	.word	0x400921fb
 800c5c0:	54442d18 	.word	0x54442d18
 800c5c4:	3ff921fb 	.word	0x3ff921fb
 800c5c8:	54442d18 	.word	0x54442d18
 800c5cc:	3fe921fb 	.word	0x3fe921fb
 800c5d0:	0800d108 	.word	0x0800d108
 800c5d4:	0800d120 	.word	0x0800d120
 800c5d8:	7ff00000 	.word	0x7ff00000
 800c5dc:	00000000 	.word	0x00000000

0800c5e0 <atan>:
 800c5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	4bb6      	ldr	r3, [pc, #728]	; (800c8c0 <atan+0x2e0>)
 800c5e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c5ea:	429e      	cmp	r6, r3
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	460d      	mov	r5, r1
 800c5f0:	468b      	mov	fp, r1
 800c5f2:	dd17      	ble.n	800c624 <atan+0x44>
 800c5f4:	4bb3      	ldr	r3, [pc, #716]	; (800c8c4 <atan+0x2e4>)
 800c5f6:	429e      	cmp	r6, r3
 800c5f8:	dc01      	bgt.n	800c5fe <atan+0x1e>
 800c5fa:	d109      	bne.n	800c610 <atan+0x30>
 800c5fc:	b140      	cbz	r0, 800c610 <atan+0x30>
 800c5fe:	4622      	mov	r2, r4
 800c600:	462b      	mov	r3, r5
 800c602:	4620      	mov	r0, r4
 800c604:	4629      	mov	r1, r5
 800c606:	f7f3 fdbb 	bl	8000180 <__adddf3>
 800c60a:	4604      	mov	r4, r0
 800c60c:	460d      	mov	r5, r1
 800c60e:	e005      	b.n	800c61c <atan+0x3c>
 800c610:	f1bb 0f00 	cmp.w	fp, #0
 800c614:	4cac      	ldr	r4, [pc, #688]	; (800c8c8 <atan+0x2e8>)
 800c616:	f300 8121 	bgt.w	800c85c <atan+0x27c>
 800c61a:	4dac      	ldr	r5, [pc, #688]	; (800c8cc <atan+0x2ec>)
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	4baa      	ldr	r3, [pc, #680]	; (800c8d0 <atan+0x2f0>)
 800c626:	429e      	cmp	r6, r3
 800c628:	dc11      	bgt.n	800c64e <atan+0x6e>
 800c62a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c62e:	429e      	cmp	r6, r3
 800c630:	dc0a      	bgt.n	800c648 <atan+0x68>
 800c632:	a38b      	add	r3, pc, #556	; (adr r3, 800c860 <atan+0x280>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 fda2 	bl	8000180 <__adddf3>
 800c63c:	2200      	movs	r2, #0
 800c63e:	4ba5      	ldr	r3, [pc, #660]	; (800c8d4 <atan+0x2f4>)
 800c640:	f7f4 f9e4 	bl	8000a0c <__aeabi_dcmpgt>
 800c644:	2800      	cmp	r0, #0
 800c646:	d1e9      	bne.n	800c61c <atan+0x3c>
 800c648:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c64c:	e027      	b.n	800c69e <atan+0xbe>
 800c64e:	f000 f951 	bl	800c8f4 <fabs>
 800c652:	4ba1      	ldr	r3, [pc, #644]	; (800c8d8 <atan+0x2f8>)
 800c654:	4604      	mov	r4, r0
 800c656:	429e      	cmp	r6, r3
 800c658:	460d      	mov	r5, r1
 800c65a:	f300 80b8 	bgt.w	800c7ce <atan+0x1ee>
 800c65e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c662:	429e      	cmp	r6, r3
 800c664:	f300 809c 	bgt.w	800c7a0 <atan+0x1c0>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	f7f3 fd88 	bl	8000180 <__adddf3>
 800c670:	2200      	movs	r2, #0
 800c672:	4b98      	ldr	r3, [pc, #608]	; (800c8d4 <atan+0x2f4>)
 800c674:	f7f3 fd82 	bl	800017c <__aeabi_dsub>
 800c678:	2200      	movs	r2, #0
 800c67a:	4606      	mov	r6, r0
 800c67c:	460f      	mov	r7, r1
 800c67e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c682:	4620      	mov	r0, r4
 800c684:	4629      	mov	r1, r5
 800c686:	f7f3 fd7b 	bl	8000180 <__adddf3>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4630      	mov	r0, r6
 800c690:	4639      	mov	r1, r7
 800c692:	f7f4 f855 	bl	8000740 <__aeabi_ddiv>
 800c696:	f04f 0a00 	mov.w	sl, #0
 800c69a:	4604      	mov	r4, r0
 800c69c:	460d      	mov	r5, r1
 800c69e:	4622      	mov	r2, r4
 800c6a0:	462b      	mov	r3, r5
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7f3 ff21 	bl	80004ec <__aeabi_dmul>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4680      	mov	r8, r0
 800c6b0:	4689      	mov	r9, r1
 800c6b2:	f7f3 ff1b 	bl	80004ec <__aeabi_dmul>
 800c6b6:	a36c      	add	r3, pc, #432	; (adr r3, 800c868 <atan+0x288>)
 800c6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6bc:	4606      	mov	r6, r0
 800c6be:	460f      	mov	r7, r1
 800c6c0:	f7f3 ff14 	bl	80004ec <__aeabi_dmul>
 800c6c4:	a36a      	add	r3, pc, #424	; (adr r3, 800c870 <atan+0x290>)
 800c6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ca:	f7f3 fd59 	bl	8000180 <__adddf3>
 800c6ce:	4632      	mov	r2, r6
 800c6d0:	463b      	mov	r3, r7
 800c6d2:	f7f3 ff0b 	bl	80004ec <__aeabi_dmul>
 800c6d6:	a368      	add	r3, pc, #416	; (adr r3, 800c878 <atan+0x298>)
 800c6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6dc:	f7f3 fd50 	bl	8000180 <__adddf3>
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	463b      	mov	r3, r7
 800c6e4:	f7f3 ff02 	bl	80004ec <__aeabi_dmul>
 800c6e8:	a365      	add	r3, pc, #404	; (adr r3, 800c880 <atan+0x2a0>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	f7f3 fd47 	bl	8000180 <__adddf3>
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	463b      	mov	r3, r7
 800c6f6:	f7f3 fef9 	bl	80004ec <__aeabi_dmul>
 800c6fa:	a363      	add	r3, pc, #396	; (adr r3, 800c888 <atan+0x2a8>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	f7f3 fd3e 	bl	8000180 <__adddf3>
 800c704:	4632      	mov	r2, r6
 800c706:	463b      	mov	r3, r7
 800c708:	f7f3 fef0 	bl	80004ec <__aeabi_dmul>
 800c70c:	a360      	add	r3, pc, #384	; (adr r3, 800c890 <atan+0x2b0>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f7f3 fd35 	bl	8000180 <__adddf3>
 800c716:	4642      	mov	r2, r8
 800c718:	464b      	mov	r3, r9
 800c71a:	f7f3 fee7 	bl	80004ec <__aeabi_dmul>
 800c71e:	a35e      	add	r3, pc, #376	; (adr r3, 800c898 <atan+0x2b8>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	4680      	mov	r8, r0
 800c726:	4689      	mov	r9, r1
 800c728:	4630      	mov	r0, r6
 800c72a:	4639      	mov	r1, r7
 800c72c:	f7f3 fede 	bl	80004ec <__aeabi_dmul>
 800c730:	a35b      	add	r3, pc, #364	; (adr r3, 800c8a0 <atan+0x2c0>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	f7f3 fd21 	bl	800017c <__aeabi_dsub>
 800c73a:	4632      	mov	r2, r6
 800c73c:	463b      	mov	r3, r7
 800c73e:	f7f3 fed5 	bl	80004ec <__aeabi_dmul>
 800c742:	a359      	add	r3, pc, #356	; (adr r3, 800c8a8 <atan+0x2c8>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fd18 	bl	800017c <__aeabi_dsub>
 800c74c:	4632      	mov	r2, r6
 800c74e:	463b      	mov	r3, r7
 800c750:	f7f3 fecc 	bl	80004ec <__aeabi_dmul>
 800c754:	a356      	add	r3, pc, #344	; (adr r3, 800c8b0 <atan+0x2d0>)
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f7f3 fd0f 	bl	800017c <__aeabi_dsub>
 800c75e:	4632      	mov	r2, r6
 800c760:	463b      	mov	r3, r7
 800c762:	f7f3 fec3 	bl	80004ec <__aeabi_dmul>
 800c766:	a354      	add	r3, pc, #336	; (adr r3, 800c8b8 <atan+0x2d8>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 fd06 	bl	800017c <__aeabi_dsub>
 800c770:	4632      	mov	r2, r6
 800c772:	463b      	mov	r3, r7
 800c774:	f7f3 feba 	bl	80004ec <__aeabi_dmul>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4640      	mov	r0, r8
 800c77e:	4649      	mov	r1, r9
 800c780:	f7f3 fcfe 	bl	8000180 <__adddf3>
 800c784:	4622      	mov	r2, r4
 800c786:	462b      	mov	r3, r5
 800c788:	f7f3 feb0 	bl	80004ec <__aeabi_dmul>
 800c78c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	d144      	bne.n	800c820 <atan+0x240>
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fcef 	bl	800017c <__aeabi_dsub>
 800c79e:	e734      	b.n	800c60a <atan+0x2a>
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	4b4c      	ldr	r3, [pc, #304]	; (800c8d4 <atan+0x2f4>)
 800c7a4:	f7f3 fcea 	bl	800017c <__aeabi_dsub>
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	460f      	mov	r7, r1
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	4b48      	ldr	r3, [pc, #288]	; (800c8d4 <atan+0x2f4>)
 800c7b4:	f7f3 fce4 	bl	8000180 <__adddf3>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4630      	mov	r0, r6
 800c7be:	4639      	mov	r1, r7
 800c7c0:	f7f3 ffbe 	bl	8000740 <__aeabi_ddiv>
 800c7c4:	f04f 0a01 	mov.w	sl, #1
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	460d      	mov	r5, r1
 800c7cc:	e767      	b.n	800c69e <atan+0xbe>
 800c7ce:	4b43      	ldr	r3, [pc, #268]	; (800c8dc <atan+0x2fc>)
 800c7d0:	429e      	cmp	r6, r3
 800c7d2:	da1a      	bge.n	800c80a <atan+0x22a>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4b42      	ldr	r3, [pc, #264]	; (800c8e0 <atan+0x300>)
 800c7d8:	f7f3 fcd0 	bl	800017c <__aeabi_dsub>
 800c7dc:	2200      	movs	r2, #0
 800c7de:	4606      	mov	r6, r0
 800c7e0:	460f      	mov	r7, r1
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4b3e      	ldr	r3, [pc, #248]	; (800c8e0 <atan+0x300>)
 800c7e8:	f7f3 fe80 	bl	80004ec <__aeabi_dmul>
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	4b39      	ldr	r3, [pc, #228]	; (800c8d4 <atan+0x2f4>)
 800c7f0:	f7f3 fcc6 	bl	8000180 <__adddf3>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f3 ffa0 	bl	8000740 <__aeabi_ddiv>
 800c800:	f04f 0a02 	mov.w	sl, #2
 800c804:	4604      	mov	r4, r0
 800c806:	460d      	mov	r5, r1
 800c808:	e749      	b.n	800c69e <atan+0xbe>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	2000      	movs	r0, #0
 800c810:	4934      	ldr	r1, [pc, #208]	; (800c8e4 <atan+0x304>)
 800c812:	f7f3 ff95 	bl	8000740 <__aeabi_ddiv>
 800c816:	f04f 0a03 	mov.w	sl, #3
 800c81a:	4604      	mov	r4, r0
 800c81c:	460d      	mov	r5, r1
 800c81e:	e73e      	b.n	800c69e <atan+0xbe>
 800c820:	4b31      	ldr	r3, [pc, #196]	; (800c8e8 <atan+0x308>)
 800c822:	4e32      	ldr	r6, [pc, #200]	; (800c8ec <atan+0x30c>)
 800c824:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c828:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c82c:	e9da 2300 	ldrd	r2, r3, [sl]
 800c830:	f7f3 fca4 	bl	800017c <__aeabi_dsub>
 800c834:	4622      	mov	r2, r4
 800c836:	462b      	mov	r3, r5
 800c838:	f7f3 fca0 	bl	800017c <__aeabi_dsub>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c844:	f7f3 fc9a 	bl	800017c <__aeabi_dsub>
 800c848:	f1bb 0f00 	cmp.w	fp, #0
 800c84c:	4604      	mov	r4, r0
 800c84e:	460d      	mov	r5, r1
 800c850:	f6bf aee4 	bge.w	800c61c <atan+0x3c>
 800c854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c858:	461d      	mov	r5, r3
 800c85a:	e6df      	b.n	800c61c <atan+0x3c>
 800c85c:	4d24      	ldr	r5, [pc, #144]	; (800c8f0 <atan+0x310>)
 800c85e:	e6dd      	b.n	800c61c <atan+0x3c>
 800c860:	8800759c 	.word	0x8800759c
 800c864:	7e37e43c 	.word	0x7e37e43c
 800c868:	e322da11 	.word	0xe322da11
 800c86c:	3f90ad3a 	.word	0x3f90ad3a
 800c870:	24760deb 	.word	0x24760deb
 800c874:	3fa97b4b 	.word	0x3fa97b4b
 800c878:	a0d03d51 	.word	0xa0d03d51
 800c87c:	3fb10d66 	.word	0x3fb10d66
 800c880:	c54c206e 	.word	0xc54c206e
 800c884:	3fb745cd 	.word	0x3fb745cd
 800c888:	920083ff 	.word	0x920083ff
 800c88c:	3fc24924 	.word	0x3fc24924
 800c890:	5555550d 	.word	0x5555550d
 800c894:	3fd55555 	.word	0x3fd55555
 800c898:	2c6a6c2f 	.word	0x2c6a6c2f
 800c89c:	bfa2b444 	.word	0xbfa2b444
 800c8a0:	52defd9a 	.word	0x52defd9a
 800c8a4:	3fadde2d 	.word	0x3fadde2d
 800c8a8:	af749a6d 	.word	0xaf749a6d
 800c8ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800c8b0:	fe231671 	.word	0xfe231671
 800c8b4:	3fbc71c6 	.word	0x3fbc71c6
 800c8b8:	9998ebc4 	.word	0x9998ebc4
 800c8bc:	3fc99999 	.word	0x3fc99999
 800c8c0:	440fffff 	.word	0x440fffff
 800c8c4:	7ff00000 	.word	0x7ff00000
 800c8c8:	54442d18 	.word	0x54442d18
 800c8cc:	bff921fb 	.word	0xbff921fb
 800c8d0:	3fdbffff 	.word	0x3fdbffff
 800c8d4:	3ff00000 	.word	0x3ff00000
 800c8d8:	3ff2ffff 	.word	0x3ff2ffff
 800c8dc:	40038000 	.word	0x40038000
 800c8e0:	3ff80000 	.word	0x3ff80000
 800c8e4:	bff00000 	.word	0xbff00000
 800c8e8:	0800d158 	.word	0x0800d158
 800c8ec:	0800d138 	.word	0x0800d138
 800c8f0:	3ff921fb 	.word	0x3ff921fb

0800c8f4 <fabs>:
 800c8f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c8f8:	4770      	bx	lr
	...

0800c8fc <_init>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	bf00      	nop
 800c900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c902:	bc08      	pop	{r3}
 800c904:	469e      	mov	lr, r3
 800c906:	4770      	bx	lr

0800c908 <_fini>:
 800c908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90a:	bf00      	nop
 800c90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c90e:	bc08      	pop	{r3}
 800c910:	469e      	mov	lr, r3
 800c912:	4770      	bx	lr
